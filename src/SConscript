#! /usr/bin/env python
import os, sys, glob

if not sys.platform.startswith('win'):
  BOLD   ="\033[1m"
  RED    ="\033[91m"
  GREEN  ="\033[92m"
  BLUE   ="\033[94m"
  YELLOW ="\033[93m" # unreadable on white backgrounds
  CYAN   ="\033[96m"
  NORMAL ="\033[0m"
else:
  BOLD   =""
  RED    =""
  GREEN  =""
  BLUE   =""
  YELLOW =""
  CYAN   =""
  NORMAL =""

#######################
## Source files
#######################
bpmdetect_sources="""
main.cpp
BPMDetect.cpp
PeakFinder.cpp
FIFOSampleBuffer.cpp
track.cpp
trackproxy.cpp
trackwav.cpp
dlgtestbpm.cpp
dlgtestbpmplayer.cpp
"""

sources_testbpm_ui="""
dlgtestbpmdlg.ui
"""

sources_mad="""
trackmp3.cpp
"""
sources_vorbis="""
trackoggvorbis.cpp
"""
sources_flac="""
trackflac.cpp
"""

sources_realtime="""
audioinput.cpp
audioanalyzer.cpp
kiss_fft.c
kiss_fftr.c
energybeatdetector.cpp
bpmcounter.cpp
beatinfo.cpp
bpmcalculator.cpp
metronome.cpp
waveform.cpp
"""

sources_realtime_gui="""
dlgrealtime.cpp
wvumeter.cpp
wwaveform.cpp
wenergybeatdisplay.cpp
wplot.cpp
wbpmcalcdisplay.cpp
"""

realtime_sources="""
mainreal.cpp
PeakFinder.cpp
"""

sources_realtime_ui="""
dlgrealtimedlg.ui
"""

bpmdetect_sources_gui="""
progressbar.cpp
qdroplistview.cpp
dlgbpmdetect.cpp
"""

bpmdetect_ui="""
dlgbpmdetect.ui
"""

bpmdetect_res = """
icon.rc
"""

def display_help():
  print """
"""+BOLD+"""  Configure options
--------------------------------------------------"""+NORMAL+"""
"""+BOLD+"""* prefix        """+NORMAL+""": installation prefix (/usr/local)
"""+BOLD+"""* console       """+NORMAL+""": build only console mode (without QT)
"""+BOLD+"""* mingw         """+NORMAL+""": use MinGW compiler
"""+BOLD+"""* debug         """+NORMAL+""": enable debug (debug=1 or debug=full)
"""+BOLD+"""* extraincludes """+NORMAL+""": extra includes separated by colon (':')
"""+BOLD+"""* mad=0         """+NORMAL+""": disable MPEG audio decoder
"""+BOLD+"""* vorbis=0      """+NORMAL+""": disable vorbis decoder
"""+BOLD+"""* flac=0        """+NORMAL+""": disable FLAC decoder
"""+BOLD+"""* taglib=0      """+NORMAL+""": do not use TagLib (reading/writing tags)
"""+BOLD+"""* realtime=1    """+NORMAL+""": enable realtime BPM (beat) detection (experimental)
"""+BOLD+"""* qtdir         """+NORMAL+""": where the QT is installed
"""+BOLD+"""* qtincludes    """+NORMAL+""": path to QT includes (/usr/include/qt4 on debian, ...)
"""+BOLD+"""* qtlibs        """+NORMAL+""": path to QT libraries
"""+NORMAL
  return

import re
def makeHashTable(args):
  table = { }
  for arg in args:
    if len(arg) > 1:
      lst=arg.split('=')
      if len(lst) < 2:
        continue
      key=lst[0]
      value=lst[1]
      if len(key) > 0 and len(value) >0:
        table[key] = value
  return table

def check_pkgconfig(env):
  print "Checking for pkg-config           : ",
  pkg_config = env.WhereIs("pkg-config").strip()
  if not pkg_config:
    pkg_config = ""
  if len(pkg_config):
    print GREEN+pkg_config+NORMAL,
    pkgcver = os.popen("pkg-config --version").read().strip()
    print BOLD+' version '+pkgcver+NORMAL
    env['PKGCONFIG'] = 1
  else:
    print RED+'not found'+NORMAL
    env['PKGCONFIG'] = 0

def check_library(conf, lib, hdr):
    ret = 1
    if not conf.CheckLib(lib):
        ret = 0
    if not conf.CheckHeader(hdr):
        ret = 0
    return ret

def check_taglib(env):
  tagprefix = ''
  if env['PKGCONFIG']:
    tagprefix = os.popen("pkg-config --variable=prefix taglib").read().strip()

  print "Checking for taglib               : ",
  if len(tagprefix) and env['PKGCONFIG']:
    tagver = os.popen("pkg-config --modversion taglib").read().strip()
    print GREEN+"found "+NORMAL+BOLD+"version "+tagver+NORMAL
    # includes
    print "taglib includes                   : ",
    tagincludes = os.popen('pkg-config --cflags-only-I taglib').read().strip()[2:]
    print BOLD+tagincludes+NORMAL
    # libs
    print "taglib library                    : ",
    taglibpath = os.popen('pkg-config --libs-only-L taglib').read().strip()[2:]
    if not len(taglibpath):
      taglibpath = tagprefix + '/lib'
    print BOLD+taglibpath+NORMAL

    env.Append(CPPDEFINES = ['HAVE_TAGLIB'])
    env.Append(CPPPATH = tagincludes)
    env.Append(LIBS = ['tag', 'z'])
    env.Append(LIBPATH = taglibpath)
  else:
    print RED+"not found"+NORMAL

def configure(env):
  # unset existing variables
  if env.has_key('PREFIX'):
    env.__delitem__('PREFIX')
  if env.has_key('DEBUG'):
    env.__delitem__('DEBUG')
  if env.has_key('EXTRAINCLUDES'):
    env.__delitem__('EXTRAINCLUDES')
  if env.has_key('ISCONFIGURED'):
    env.__delitem__('ISCONFIGURED')
  if env.has_key('PKGCONFIG'):
    env.__delitem__('PKGCONFIG')
  if env.has_key('MINGWBUILD'):
    env.__delitem__('MINGWBUILD')
  if env.has_key('CONSOLEONLY'):
    env.__delitem__('CONSOLEONLY')
  if env.has_key('CPPPATH'):
    env.__delitem__('CPPPATH')
  if env.has_key('CPPDEFINES'):
    env.__delitem__('CPPDEFINES')
  if env.has_key('CXXFLAGS'):
    env.__delitem__('CXXFLAGS')
  if env.has_key('LIBPATH'):
    env.__delitem__('LIBPATH')
  if env.has_key('LIBS'):
    env.__delitem__('LIBS')
  if env.has_key('LINKFLAGS'):
    env.__delitem__('LINKFLAGS')
  if env.has_key('MAD'):
    env.__delitem__('MAD')
  if env.has_key('VORBIS'):
    env.__delitem__('VORBIS')
  if env.has_key('FLAC'):
    env.__delitem__('FLAC')
  if env.has_key('TAGLIB'):
    env.__delitem__('TAGLIB')
  if env.has_key('PORTAUDIO'):
    env.__delitem__('PORTAUDIO')
  if env.has_key('REALTIME'):
    env.__delitem__('REALTIME')

  print BOLD + """
--------------------------------------------------""" + NORMAL
  print "Use MinGW compiler                : ",
  if int(env['ARGS'].get('mingw', 0)) or sys.platform.startswith('win'):
    env['MINGWBUILD'] = 1
    print BOLD+'yes'+NORMAL
    env.Tool('mingw')
    env.Tool('crossmingw')
  else:
    env['MINGWBUILD'] = 0
    print 'no'

  print 'Enable debug                      : ',
  if env['ARGS'].get('debug', 0):
    debuglevel = env['ARGS'].get('debug', None)
    print BLUE + 'yes ' + NORMAL + debuglevel
    env.Append(CPPDEFINES = ['DEBUG'])
    env['DEBUG'] = 1
    if (debuglevel == "full"):
      env.Append(CXXFLAGS   = '-g3')
    else:
      env.Append(CXXFLAGS   = '-g')
  else:
    print 'no '
    env.Append(CXXFLAGS = '-O2' )
    env.Append(CPPDEFINES = ['NDEBUG', 'NO_DEBUG'])
    env['DEBUG'] = 0

  # Required for Qt5
  env.Append(CXXFLAGS = ' -std=c++11 -fPIC')

  check_pkgconfig(env)

  # User-specified prefix
  if env['ARGS'].get('prefix', None):
    env['PREFIX'] = env['ARGS'].get('prefix', None)
  else:
    if sys.platform.startswith('win'):
      env['PREFIX'] = '../install'
    else:
      env['PREFIX'] = '/usr/local'
  print 'installation prefix               :  '+BOLD + env['PREFIX'] +NORMAL

  # Console mode only
  print 'GUI                               : ',
  if int(env['ARGS'].get('console', 0)):
    env['CONSOLEONLY'] = 1
    print BLUE+'disabled'+NORMAL
  else:
    env['CONSOLEONLY'] = 0
    print GREEN+'enabled'+NORMAL

  # User-specified include paths
  env['EXTRAINCLUDES'] = env['ARGS'].get('extraincludes', None)
  if env['ARGS'].get('extraincludes', None):
    incpaths = []
    for dir in str(env['EXTRAINCLUDES']).split(':'):
      incpaths.append( dir )
    env.Append(CPPPATH = incpaths)
  elif env.has_key('EXTRAINCLUDES'):
    env.__delitem__('EXTRAINCLUDES')

  # Check for libraries
  if not ARGUMENTS.get('taglib', 0):
      check_taglib(env)
      env['TAGLIB'] = 1
  else:
      env['TAGLIB'] = 0

  env.Append(CPPPATH = ['.', '..'])
  _libs = ['.']
  env.Append(LIBPATH = _libs)
  conf = Configure(env)

  if not ARGUMENTS.get('mad', 0) and check_library(conf, 'mad', 'mad.h'):
      env.Append(CPPDEFINES = ['HAVE_MAD'])
      env['MAD'] = 1
  else:
      env['MAD'] = 0

  if not ARGUMENTS.get('vorbis', 0) and check_library(conf, 'vorbisfile', 'vorbis/vorbisfile.h'):
      env.Append(CPPDEFINES = ['HAVE_VORBISFILE'])
      env['VORBIS'] = 1
  else:
      env['VORBIS'] = 0

  if not ARGUMENTS.get('flac', 0) and check_library(conf, 'FLAC', 'FLAC/stream_decoder.h'):
      env.Append(CPPDEFINES = ['HAVE_FLAC'])
      env['FLAC'] = 1
  else:
      env['FLAC'] = 0

  if int(ARGUMENTS.get('realtime', 0)) == 1:
      if check_library(conf, 'portaudio', 'portaudio.h'):
          env.Append(CPPDEFINES = ['HAVE_PORTAUDIO'])
      env['PORTAUDIO'] = 1
      env['REALTIME'] = 1
  else:
      env['PORTAUDIO'] = 0
      env['REALTIME'] = 0

  env['ISCONFIGURED']=1
  # And finally save the options in the cache
  opts.Save(cachefile, env)


def install(env, binary_files):
  if not os.path.isdir(env['PREFIX']):
    os.mkdir(env['PREFIX'])

  prefix = env['PREFIX']
  dotdesktop_files = glob.glob('../src/bpmdetect.desktop')
  icon_files = glob.glob('../src/bpmdetect-icon.png')

  if sys.platform.startswith('win'):
    #dlls = env.Install(prefix, dll_files)
    binary = env.Install(prefix, binary_files)

    #env.Alias('install', dlls)
    env.Alias('install', binary)
  else:
    bin_path   = prefix + "/bin"
    icon_path = prefix + "/share/pixmaps"
    dotdesktop_path = prefix + '/share/applications'

    binary = env.Install(bin_path, binary_files)
    dotdesktop = env.Install(dotdesktop_path, dotdesktop_files)
    icon = env.Install(icon_path, icon_files)

    env.Alias('install', binary)
    env.Alias('install', dotdesktop)
    env.Alias('install', icon)


#############################
# Main
#############################
env = Environment(ENV = os.environ,
      toolpath=['./', '../admin/'])
env.Replace(CCFLAGS = [])

env['ARGS']=makeHashTable(sys.argv)
env['HELP']=0
if '--help' in sys.argv or '-h' in sys.argv or 'help' in sys.argv:
  env['HELP']=1

## Global cache directory
## Put all project files in it so a rm -rf cache will clean up the config
if not env.has_key('CACHEDIR'):
  env['CACHEDIR'] =os.getcwd()+ '/../cache/'
if not os.path.isdir(env['CACHEDIR']):
  os.mkdir(env['CACHEDIR'])

## Avoid spreading .sconsign files everywhere - keep this line
env.SConsignFile(env['CACHEDIR']+'/scons_signatures')

# load the options
from SCons.Options import Options, PathOption
cachefile=env['CACHEDIR']+'cache.py'
opts = Options(cachefile)
opts.AddOptions(
  ( 'CACHEDIR', 'Cache directory'),
  ( 'PREFIX', 'Prefix for installation' ),
  ( 'DEBUG', 'Enable debug' ),
  ( 'EXTRAINCLUDES', 'Extra include paths for the project' ),
  ( 'ISCONFIGURED', 'Project configured' ),
  ( 'PKGCONFIG', 'pkg-config found' ),
  ( 'MINGWBUILD', 'Build using mingw compiler' ),
  ( 'CONSOLEONLY', 'Build console mode only' ),
  ( 'CPPPATH', 'Include directories' ),
  ( 'CPPDEFINES', 'Preprocessor definitions' ),
  ( 'CXXFLAGS', 'C++ compiler options' ),
  ( 'LIBPATH', 'library directories' ),
  ( 'LIBS', 'Libraries' ),
  ( 'LINKFLAGS', 'Linker flags'),
  ( 'MAD', 'MPEG audio decoder'),
  ( 'VORBIS', 'Ogg vorbis decoder (libvorbisfile)'),
  ( 'FLAC', 'FLAC decoder using libFLAC'),
  ( 'TAGLIB', 'TagLib for reading and writing tags'),
  ( 'REALTIME', 'Realtime BPM detection (from soundcard input) (Experimental)'),
)
opts.Update(env)

# to avoid an error message 'how to make target configure... ?'
env.Alias('configure', None)
env.Alias('help', None)

import SCons.Util

if 'configure' in sys.argv:
  env['_CONFIGURE']=1
else:
  env['_CONFIGURE']=0

# configure the environment if needed
if not env['HELP'] and (env['_CONFIGURE'] or not env.has_key('ISCONFIGURED')):
  configure(env)

if env['HELP']:
  display_help()
else:
  if env.has_key('CONSOLEONLY') and env['CONSOLEONLY']:
    env.Append(CPPDEFINES = ['NO_GUI'])
  else:
      env.Tool('qt5')
      env.EnableQt5Modules(['QtCore', 'QtGui', 'QtWidgets', 'QtMultimedia'], debug = False)
      bpmdetect_sources = bpmdetect_sources_gui + bpmdetect_sources
      if env.has_key('REALTIME') and env['REALTIME']:
            #bpmdetect_sources = bpmdetect_sources + sources_realtime_gui
            #bpmdetect_ui = bpmdetect_ui + sources_realtime_ui
            realtime_sources = realtime_sources + sources_realtime_gui + sources_realtime
            for ui in sources_realtime_ui.split():
                env.Uic5(ui)
      for ui in bpmdetect_ui.split():
          env.Uic5(ui)

  # Add sources and print status
  if env.has_key('MAD') and env['MAD']:
      bpmdetect_sources = bpmdetect_sources + sources_mad
      print 'MAD                               :  ' + GREEN + 'Enabled' + NORMAL
  else:
      print 'MAD                               :  ' + RED + 'Disabled' + NORMAL

  if env.has_key('VORBIS') and env['VORBIS']:
      bpmdetect_sources = bpmdetect_sources + sources_vorbis
      print 'OGG Vorbis                        :  ' + GREEN + 'Enabled' + NORMAL
  else:
      print 'OGG Vorbis                        :  ' + RED + 'Disabled' + NORMAL
  if env.has_key('FLAC') and env['FLAC']:
      bpmdetect_sources = bpmdetect_sources + sources_flac
      print 'FLAC                              :  ' + GREEN + 'Enabled' + NORMAL
  else:
      print 'FLAC                              :  ' + RED + 'Disabled' + NORMAL

  if env.has_key('TAGLIB') and env['TAGLIB']:
      print 'TagLib                            :  ' + GREEN + 'Enabled' + NORMAL
  else:
      print 'TagLib                            :  ' + RED + 'Disabled' + NORMAL

  if env.has_key('REALTIME') and env['REALTIME']:
      print 'Realtime BPM detection            :  ' + GREEN + 'Enabled' + NORMAL
      bpmdetect_sources = bpmdetect_sources + sources_realtime
  else:
      print 'Realtime BPM detection            :  ' + RED + 'Disabled' + NORMAL

  print BOLD + """--------------------------------------------------
""" + NORMAL
  if env['MINGWBUILD']:
    env.Tool('crossmingw')
    env.Tool('mingw')
    # FIXME: resource
    comm = env['RC'] + ' -I../src -o ../build/icon.o -i ../src/icon.rc 2>&1'
    print os.popen(comm).read()
    env.RES(bpmdetect_res.split())
    env.Append(LINKFLAGS = ['build/icon.o'])
    if not env['CONSOLEONLY'] and not env['DEBUG']:
      env.Append(LINKFLAGS = ['-mwindows'])
  bpmdetect_bin = env.Program('bpmdetect', bpmdetect_sources.split())
  if env.has_key('REALTIME') and env['REALTIME']:
    realtime_bin = env.Program('rtbpmdetect', realtime_sources.split())
  if 'install' in sys.argv:
    install(env, bpmdetect_bin)
