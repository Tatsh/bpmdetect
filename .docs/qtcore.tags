<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QAbstractAnimation</name>
        <filename>qabstractanimation.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>DeletionPolicy</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>DeletionPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>KeepWhenStopped</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>DeletionPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeleteWhenStopped</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>DeletionPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Direction</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>Direction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Forward</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Backward</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>State</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>State-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Stopped</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Paused</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Running</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractAnimation</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>QAbstractAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QAbstractAnimation::Direction&gt;</type>
            <name>bindableDirection</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableCurrentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableLoopCount</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentLoopChanged</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoopChanged</anchor>
            <arglist>(int currentLoop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directionChanged</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>directionChanged</anchor>
            <arglist>(QAbstractAnimation::Direction newDirection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(QAbstractAnimation::Direction direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoopCount</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>(int loopCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(QAbstractAnimation::DeletionPolicy policy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int currentTime) = 0</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateDirection</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>updateDirection</anchor>
            <arglist>(QAbstractAnimation::Direction direction)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractAnimation</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>dtor.QAbstractAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation::Direction</type>
            <name>direction</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation::State</type>
            <name>state</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnimationGroup *</type>
            <name>group</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QAbstractAnimation::State&gt;</type>
            <name>bindableState</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableCurrentLoop</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoop-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentLoop</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoop-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentLoopTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoopTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>duration</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>totalDuration</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>totalDuration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="int">
            <name>currentLoop</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentLoop-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>currentTime</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Direction">
            <name>direction</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>loopCount</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="State">
            <name>state</name>
            <anchorfile>qabstractanimation.html</anchorfile>
            <anchor>state-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractEventDispatcher</name>
        <filename>qabstracteventdispatcher.html</filename>
        <base>QObject</base>
        <class>QAbstractEventDispatcher::TimerInfo</class>
        <class>QAbstractEventDispatcher::TimerInfoV2</class>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAbstractEventDispatcher *</type>
            <name>instance</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>(QThread *thread)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractEventDispatcher</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>QAbstractEventDispatcher</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerId</type>
            <name>registerTimer</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registerTimer-3</anchor>
            <arglist>(QAbstractEventDispatcher::Duration interval, Qt::TimerType timerType, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>filterNativeEvent</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>filterNativeEvent</anchor>
            <arglist>(const QByteArray &amp;eventType, void *message, qintptr *result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>processEvents</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>processEvents</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unregisterTimer</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>unregisterTimer</anchor>
            <arglist>(Qt::TimerId timerId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>unregisterTimer</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>unregisterTimer-1</anchor>
            <arglist>(int timerId) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>unregisterTimers</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>unregisterTimers</anchor>
            <arglist>(QObject *object) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>registerTimer</name>
            <anchorfile>qabstracteventdispatcher-obsolete.html</anchorfile>
            <anchor>registerTimer</anchor>
            <arglist>(qint64 interval, Qt::TimerType timerType, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>remainingTime</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>remainingTime</anchor>
            <arglist>(int timerId) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToBlock</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>aboutToBlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>awake</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>awake</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installNativeEventFilter</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>installNativeEventFilter</anchor>
            <arglist>(QAbstractNativeEventFilter *filterObj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>interrupt</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>interrupt</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>registerSocketNotifier</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registerSocketNotifier</anchor>
            <arglist>(QSocketNotifier *notifier) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerTimer</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registerTimer-1</anchor>
            <arglist>(Qt::TimerId timerId, QAbstractEventDispatcher::Duration interval, Qt::TimerType timerType, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>registerTimer</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registerTimer-2</anchor>
            <arglist>(int timerId, qint64 interval, Qt::TimerType timerType, QObject *object) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeNativeEventFilter</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>removeNativeEventFilter</anchor>
            <arglist>(QAbstractNativeEventFilter *filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>unregisterSocketNotifier</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>unregisterSocketNotifier</anchor>
            <arglist>(QSocketNotifier *notifier) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>wakeUp</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>wakeUp</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractEventDispatcher</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>dtor.QAbstractEventDispatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractEventDispatcher::Duration</type>
            <name>remainingTime</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>remainingTime-1</anchor>
            <arglist>(Qt::TimerId timerId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QList&lt;QAbstractEventDispatcher::TimerInfo&gt;</type>
            <name>registeredTimers</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>registeredTimers</anchor>
            <arglist>(QObject *object) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractEventDispatcher::TimerInfoV2&gt;</type>
            <name>timersForObject</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>timersForObject</anchor>
            <arglist>(QObject *object) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Duration</name>
            <anchorfile>qabstracteventdispatcher.html</anchorfile>
            <anchor>Duration-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractEventDispatcher::TimerInfo</name>
        <filename>qabstracteventdispatcher-timerinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>TimerInfo</name>
            <anchorfile>qabstracteventdispatcher-timerinfo.html</anchorfile>
            <anchor>TimerInfo</anchor>
            <arglist>(int timerId, int interval, Qt::TimerType timerType)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractEventDispatcher::TimerInfoV2</name>
        <filename>qabstracteventdispatcher-timerinfov2.html</filename>
    </compound>
    <compound kind="class">
        <name>QAbstractEventDispatcherV2</name>
        <filename>qabstracteventdispatcherv2.html</filename>
        <base>QAbstractEventDispatcher</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractEventDispatcherV2</name>
            <anchorfile>qabstracteventdispatcherv2.html</anchorfile>
            <anchor>QAbstractEventDispatcherV2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractEventDispatcherV2</name>
            <anchorfile>qabstracteventdispatcherv2.html</anchorfile>
            <anchor>dtor.QAbstractEventDispatcherV2</anchor>
            <arglist>() override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractItemModel</name>
        <filename>qabstractitemmodel.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>CheckIndexOption</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>CheckIndexOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoOption</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>CheckIndexOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IndexIsValid</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>CheckIndexOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DoNotUseParent</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>CheckIndexOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParentIsInvalid</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>CheckIndexOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>LayoutChangeHint</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>LayoutChangeHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoLayoutChangeHint</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>LayoutChangeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VerticalSortHint</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>LayoutChangeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HorizontalSortHint</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>LayoutChangeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractItemModel</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>QAbstractItemModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>beginMoveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginMoveColumns</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceFirst, int sourceLast, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>beginMoveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginMoveRows</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceFirst, int sourceLast, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>clearItemData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>clearItemData</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertColumn</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>insertColumn</anchor>
            <arglist>(int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insertRow</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>insertRow</anchor>
            <arglist>(int row, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>moveColumn</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>moveColumn</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceColumn, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>moveColumns</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceColumn, int count, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>moveRow</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>moveRow</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceRow, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>moveRows</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceRow, int count, const QModelIndex &amp;destinationParent, int destinationChild)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeColumn</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>removeColumn</anchor>
            <arglist>(int column, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeRow</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>removeRow</anchor>
            <arglist>(int row, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>submit</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>submit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginInsertColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginInsertColumns</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginInsertRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginInsertRows</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginRemoveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginRemoveColumns</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginRemoveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginRemoveRows</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginResetModel</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>beginResetModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>changePersistentIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>changePersistentIndex</anchor>
            <arglist>(const QModelIndex &amp;from, const QModelIndex &amp;to)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>changePersistentIndexList</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>changePersistentIndexList</anchor>
            <arglist>(const QModelIndexList &amp;from, const QModelIndexList &amp;to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsAboutToBeInserted</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsAboutToBeInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsAboutToBeMoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsAboutToBeMoved</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationColumn)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsAboutToBeRemoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsAboutToBeRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsInserted</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsMoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsMoved</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationColumn)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>columnsRemoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnsRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dataChanged</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>dataChanged</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight, const QList&lt;int&gt; &amp;roles)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endInsertColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endInsertColumns</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endInsertRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endInsertRows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endMoveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endMoveColumns</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endMoveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endMoveRows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endRemoveColumns</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endRemoveColumns</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endRemoveRows</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endRemoveRows</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>endResetModel</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>endResetModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fetchMore</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>fetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>headerDataChanged</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>headerDataChanged</anchor>
            <arglist>(Qt::Orientation orientation, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layoutAboutToBeChanged</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>layoutAboutToBeChanged</anchor>
            <arglist>(const QList&lt;QPersistentModelIndex&gt; &amp;parents, QAbstractItemModel::LayoutChangeHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>layoutChanged</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>layoutChanged</anchor>
            <arglist>(const QList&lt;QPersistentModelIndex&gt; &amp;parents, QAbstractItemModel::LayoutChangeHint hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modelAboutToBeReset</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>modelAboutToBeReset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modelReset</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>modelReset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>resetInternalData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>resetInternalData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>revert</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>revert</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsAboutToBeInserted</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsAboutToBeInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int start, int end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsAboutToBeMoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsAboutToBeMoved</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationRow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsAboutToBeRemoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsAboutToBeRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsInserted</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsInserted</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsMoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsMoved</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationRow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rowsRemoved</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowsRemoved</anchor>
            <arglist>(const QModelIndex &amp;parent, int first, int last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractItemModel</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>dtor.QAbstractItemModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QHash&lt;int, QByteArray&gt;</type>
            <name>roleNames</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>roleNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>buddy</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>buddy</anchor>
            <arglist>(const QModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>createIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>createIndex</anchor>
            <arglist>(int row, int column, const void *ptr) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>createIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>createIndex-1</anchor>
            <arglist>(int row, int column, quintptr id) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;index) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>match</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>persistentIndexList</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>persistentIndexList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>span</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDragActions</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>supportedDragActions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canDropMimeData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>canDropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canFetchMore</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>canFetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>checkIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>checkIndex</anchor>
            <arglist>(const QModelIndex &amp;index, QAbstractItemModel::CheckIndexOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasIndex</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>hasIndex</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>multiData</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>multiData</anchor>
            <arglist>(const QModelIndex &amp;index, QModelRoleDataSpan roleDataSpan) const const</arglist>
        </member>
        <member kind="typedef" type="QAbstractItemModel::CheckIndexOption">
            <name>CheckIndexOptions</name>
            <anchorfile>qabstractitemmodel.html</anchorfile>
            <anchor>CheckIndexOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractListModel</name>
        <filename>qabstractlistmodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractListModel</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>QAbstractListModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractListModel</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>dtor.QAbstractListModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qabstractlistmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractNativeEventFilter</name>
        <filename>qabstractnativeeventfilter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractNativeEventFilter</name>
            <anchorfile>qabstractnativeeventfilter.html</anchorfile>
            <anchor>QAbstractNativeEventFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>nativeEventFilter</name>
            <anchorfile>qabstractnativeeventfilter.html</anchorfile>
            <anchor>nativeEventFilter</anchor>
            <arglist>(const QByteArray &amp;eventType, void *message, qintptr *result) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractNativeEventFilter</name>
            <anchorfile>qabstractnativeeventfilter.html</anchorfile>
            <anchor>dtor.QAbstractNativeEventFilter</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractProxyModel</name>
        <filename>qabstractproxymodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractProxyModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>QAbstractProxyModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QAbstractItemModel *&gt;</type>
            <name>bindableSourceModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sourceModel-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>clearItemData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>clearItemData</anchor>
            <arglist>(const QModelIndex &amp;index) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>submit</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>submit</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fetchMore</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>fetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>revert</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>revert</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSourceModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>setSourceModel</anchor>
            <arglist>(QAbstractItemModel *sourceModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sourceModelChanged</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sourceModel-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractProxyModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>dtor.QAbstractProxyModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>sourceModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sourceModel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QHash&lt;int, QByteArray&gt;</type>
            <name>roleNames</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>roleNames</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionFromSource</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mapSelectionFromSource</anchor>
            <arglist>(const QItemSelection &amp;sourceSelection) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionToSource</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mapSelectionToSource</anchor>
            <arglist>(const QItemSelection &amp;proxySelection) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>buddy</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>buddy</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>createSourceIndex</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>createSourceIndex</anchor>
            <arglist>(int row, int col, void *internalPtr) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>mapFromSource</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mapFromSource</anchor>
            <arglist>(const QModelIndex &amp;sourceIndex) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QModelIndex</type>
            <name>mapToSource</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mapToSource</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>span</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDragActions</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>supportedDragActions</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canDropMimeData</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>canDropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canFetchMore</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>canFetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="property" type="QAbstractItemModel*">
            <name>sourceModel</name>
            <anchorfile>qabstractproxymodel.html</anchorfile>
            <anchor>sourceModel-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAbstractTableModel</name>
        <filename>qabstracttablemodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAbstractTableModel</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>QAbstractTableModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAbstractTableModel</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>dtor.QAbstractTableModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qabstracttablemodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAdoptSharedDataTag</name>
        <filename>qadoptshareddatatag.html</filename>
    </compound>
    <compound kind="class">
        <name>QAndroidActivityResultReceiver</name>
        <filename>qandroidactivityresultreceiver.html</filename>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>handleActivityResult</name>
            <anchorfile>qandroidactivityresultreceiver.html</anchorfile>
            <anchor>handleActivityResult</anchor>
            <arglist>(int receiverRequestCode, int resultCode, const QJniObject &amp;data) = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAndroidBinder</name>
        <filename>qandroidbinder.html</filename>
        <member kind="enumeration">
            <name>CallType</name>
            <anchorfile>qandroidbinder.html</anchorfile>
            <anchor>CallType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Normal</name>
            <anchorfile>qandroidbinder.html</anchorfile>
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OneWay</name>
            <anchorfile>qandroidbinder.html</anchorfile>
            <anchor>CallType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidBinder</name>
            <anchorfile>qandroidbinder.html</anchorfile>
            <anchor>QAndroidBinder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidBinder</name>
            <anchorfile>qandroidbinder.html</anchorfile>
            <anchor>QAndroidBinder-1</anchor>
            <arglist>(const QJniObject &amp;binder)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>onTransact</name>
            <anchorfile>qandroidbinder.html</anchorfile>
            <anchor>onTransact</anchor>
            <arglist>(int code, const QAndroidParcel &amp;data, const QAndroidParcel &amp;reply, QAndroidBinder::CallType flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>handle</name>
            <anchorfile>qandroidbinder.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>transact</name>
            <anchorfile>qandroidbinder.html</anchorfile>
            <anchor>transact</anchor>
            <arglist>(int code, const QAndroidParcel &amp;data, QAndroidParcel *reply, QAndroidBinder::CallType flags) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAndroidIntent</name>
        <filename>qandroidintent.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidIntent</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>QAndroidIntent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidIntent</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>QAndroidIntent-1</anchor>
            <arglist>(const QJniObject &amp;intent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidIntent</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>QAndroidIntent-3</anchor>
            <arglist>(const QJniObject &amp;packageContext, const char *className)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidIntent</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>QAndroidIntent-2</anchor>
            <arglist>(const QString &amp;action)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>extraBytes</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>extraBytes</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>extraVariant</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>extraVariant</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>putExtra</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>putExtra</anchor>
            <arglist>(const QString &amp;key, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>putExtra</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>putExtra-1</anchor>
            <arglist>(const QString &amp;key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>handle</name>
            <anchorfile>qandroidintent.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAndroidParcel</name>
        <filename>qandroidparcel.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidParcel</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>QAndroidParcel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidParcel</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>QAndroidParcel-1</anchor>
            <arglist>(const QJniObject &amp;parcel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAndroidBinder</type>
            <name>readBinder</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>readBinder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readData</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>handle</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>readVariant</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>readVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>readFileDescriptor</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>readFileDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeBinder</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>writeBinder</anchor>
            <arglist>(const QAndroidBinder &amp;binder) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeData</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const QByteArray &amp;data) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeFileDescriptor</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>writeFileDescriptor</anchor>
            <arglist>(int fd) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeVariant</name>
            <anchorfile>qandroidparcel.html</anchorfile>
            <anchor>writeVariant</anchor>
            <arglist>(const QVariant &amp;value) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAndroidService</name>
        <filename>qandroidservice.html</filename>
        <base>QCoreApplication</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QAndroidBinder *</type>
            <name>onBind</name>
            <anchorfile>qandroidservice.html</anchorfile>
            <anchor>onBind</anchor>
            <arglist>(const QAndroidIntent &amp;intent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidService</name>
            <anchorfile>qandroidservice.html</anchorfile>
            <anchor>QAndroidService</anchor>
            <arglist>(int &amp;argc, char **argv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidService</name>
            <anchorfile>qandroidservice.html</anchorfile>
            <anchor>QAndroidService-1</anchor>
            <arglist>(int &amp;argc, char **argv, const std::function&lt;QAndroidBinder *(const QAndroidIntent &amp;)&gt; &amp;binder)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAndroidServiceConnection</name>
        <filename>qandroidserviceconnection.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidServiceConnection</name>
            <anchorfile>qandroidserviceconnection.html</anchorfile>
            <anchor>QAndroidServiceConnection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAndroidServiceConnection</name>
            <anchorfile>qandroidserviceconnection.html</anchorfile>
            <anchor>QAndroidServiceConnection-1</anchor>
            <arglist>(const QJniObject &amp;serviceConnection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>onServiceConnected</name>
            <anchorfile>qandroidserviceconnection.html</anchorfile>
            <anchor>onServiceConnected</anchor>
            <arglist>(const QString &amp;name, const QAndroidBinder &amp;serviceBinder) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>onServiceDisconnected</name>
            <anchorfile>qandroidserviceconnection.html</anchorfile>
            <anchor>onServiceDisconnected</anchor>
            <arglist>(const QString &amp;name) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>handle</name>
            <anchorfile>qandroidserviceconnection.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAnimationGroup</name>
        <filename>qanimationgroup.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation *</type>
            <name>takeAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>takeAnimation</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnimationGroup</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>QAnimationGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>addAnimation</anchor>
            <arglist>(QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>insertAnimation</anchor>
            <arglist>(int index, QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>removeAnimation</anchor>
            <arglist>(QAbstractAnimation *animation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QAnimationGroup</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>dtor.QAnimationGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation *</type>
            <name>animationAt</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>animationAt</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>animationCount</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>animationCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfAnimation</name>
            <anchorfile>qanimationgroup.html</anchorfile>
            <anchor>indexOfAnimation</anchor>
            <arglist>(QAbstractAnimation *animation) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAnyStringView</name>
        <filename>qanystringview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView &amp;</type>
            <name>slice</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>slice-1</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView &amp;</type>
            <name>slice</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>slice</anchor>
            <arglist>(qsizetype pos, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAnyStringView</type>
            <name>fromArray</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>fromArray</anchor>
            <arglist>(const Char (&amp;)[Size] string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView-1</anchor>
            <arglist>(const Char (&amp;)[N] string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView-7</anchor>
            <arglist>(const Char *first, const Char *last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView-2</anchor>
            <arglist>(const Char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView-8</anchor>
            <arglist>(const Char *str, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView-3</anchor>
            <arglist>(const Container &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView-4</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView-5</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAnyStringView</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>QAnyStringView-6</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug d, QAnyStringView s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QAnyStringView &amp;lhs, const QAnyStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QAnyStringView &amp;lhs, const QAnyStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QAnyStringView &amp;lhs, const QAnyStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QAnyStringView &amp;lhs, const QAnyStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QAnyStringView &amp;lhs, const QAnyStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QAnyStringView &amp;lhs, const QAnyStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(QAnyStringView lhs, QAnyStringView rhs, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView</type>
            <name>chopped</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>chopped</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView</type>
            <name>first</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>first</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView</type>
            <name>last</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>last</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView</type>
            <name>left</name>
            <anchorfile>qanystringview-obsolete.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView</type>
            <name>mid</name>
            <anchorfile>qanystringview-obsolete.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(qsizetype pos, qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView</type>
            <name>right</name>
            <anchorfile>qanystringview-obsolete.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView</type>
            <name>sliced</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAnyStringView</type>
            <name>sliced</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(qsizetype pos, qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>back</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>back</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>front</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>front</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>arg</anchor>
            <arglist>(Args &amp;&amp;... args) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>data</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>decltype(auto)</type>
            <name>visit</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>visit</anchor>
            <arglist>(auto) visit(Visitor &amp;&amp;v) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size_bytes</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>size_bytes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qanystringview.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAssociativeIterable</name>
        <filename>qassociativeiterable.html</filename>
        <base>QIterable</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAssociativeIterable::iterator</type>
            <name>mutableFind</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>mutableFind</anchor>
            <arglist>(const QVariant &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsKey</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>containsKey</anchor>
            <arglist>(const QVariant &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertKey</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>insertKey</anchor>
            <arglist>(const QVariant &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeKey</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>removeKey</anchor>
            <arglist>(const QVariant &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const QVariant &amp;key, const QVariant &amp;mapped)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAssociativeIterable::const_iterator</type>
            <name>find</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QVariant &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QVariant &amp;key) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>BidirectionalConstIterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>BidirectionalConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>BidirectionalIterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>BidirectionalIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ForwardConstIterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>ForwardConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ForwardIterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>ForwardIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>InputConstIterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>InputConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>InputIterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>InputIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>RandomAccessConstIterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>RandomAccessConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>RandomAccessIterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>RandomAccessIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qassociativeiterable.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAtomicInt</name>
        <filename>qatomicint.html</filename>
        <base>QAtomicInteger</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicInt</name>
            <anchorfile>qatomicint.html</anchorfile>
            <anchor>QAtomicInt</anchor>
            <arglist>(int value)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAtomicInteger</name>
        <filename>qatomicinteger.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicInteger</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>QAtomicInteger</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicInteger</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>QAtomicInteger-1</anchor>
            <arglist>(const QAtomicInteger&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAtomicInteger&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(T)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAtomicInteger&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QAtomicInteger&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_ALWAYS_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_ALWAYS_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_ALWAYS_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_NOT_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_NOT_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_NOT_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_SOMETIMES_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_SOMETIMES_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_SOMETIMES_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_WAIT_FREE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_WAIT_FREE</anchor>
            <arglist>Q_ATOMIC_INTnn_FETCH_AND_ADD_IS_WAIT_FREE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_ALWAYS_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_ALWAYS_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_ALWAYS_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_NOT_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_NOT_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_NOT_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_SOMETIMES_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_SOMETIMES_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_SOMETIMES_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_WAIT_FREE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_WAIT_FREE</anchor>
            <arglist>Q_ATOMIC_INTnn_FETCH_AND_STORE_IS_WAIT_FREE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_IS_SUPPORTED</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_IS_SUPPORTED</anchor>
            <arglist>Q_ATOMIC_INTnn_IS_SUPPORTED</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_ALWAYS_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_ALWAYS_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_ALWAYS_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_NOT_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_NOT_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_NOT_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_WAIT_FREE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_WAIT_FREE</anchor>
            <arglist>Q_ATOMIC_INTnn_REFERENCE_COUNTING_IS_WAIT_FREE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_TEST_AND_SET_IS_ALWAYS_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_TEST_AND_SET_IS_ALWAYS_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_TEST_AND_SET_IS_ALWAYS_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_TEST_AND_SET_IS_NOT_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_TEST_AND_SET_IS_NOT_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_TEST_AND_SET_IS_NOT_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_TEST_AND_SET_IS_SOMETIMES_NATIVE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_TEST_AND_SET_IS_SOMETIMES_NATIVE</anchor>
            <arglist>Q_ATOMIC_INTnn_TEST_AND_SET_IS_SOMETIMES_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_INTnn_TEST_AND_SET_IS_WAIT_FREE</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>Q_ATOMIC_INTnn_TEST_AND_SET_IS_WAIT_FREE</anchor>
            <arglist>Q_ATOMIC_INTnn_TEST_AND_SET_IS_WAIT_FREE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAddAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAddAcquire</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAddOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAddOrdered</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAddRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAddRelaxed</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAddRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAddRelease</anchor>
            <arglist>(T valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAndAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAndAcquire</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAndOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAndOrdered</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAndRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAndRelaxed</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndAndRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndAndRelease</anchor>
            <arglist>(T valueToAnd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndOrAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndOrAcquire</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndOrOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndOrOrdered</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndOrRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndOrRelaxed</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndOrRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndOrRelease</anchor>
            <arglist>(T valueToOr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndStoreAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndStoreAcquire</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndStoreOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndStoreOrdered</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndStoreRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndStoreRelaxed</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndStoreRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndStoreRelease</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndSubAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndSubAcquire</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndSubOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndSubOrdered</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndSubRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndSubRelaxed</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndSubRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndSubRelease</anchor>
            <arglist>(T valueToSub)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndXorAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndXorAcquire</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndXorOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndXorOrdered</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndXorRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndXorRelaxed</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>fetchAndXorRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>fetchAndXorRelease</anchor>
            <arglist>(T valueToXor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator&amp;=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator++</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator++</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator+=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator--</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator--</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator-=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator^=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator|=</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>deref</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>deref</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndAddNative</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isFetchAndAddNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndAddWaitFree</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isFetchAndAddWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndStoreNative</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isFetchAndStoreNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndStoreWaitFree</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isFetchAndStoreWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isReferenceCountingNative</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isReferenceCountingNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isReferenceCountingWaitFree</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isReferenceCountingWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTestAndSetNative</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isTestAndSetNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTestAndSetWaitFree</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>isTestAndSetWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ref</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>ref</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetAcquire</anchor>
            <arglist>(T expectedValue, T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetAcquire-1</anchor>
            <arglist>(T expectedValue, T newValue, T &amp;currentValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetOrdered</anchor>
            <arglist>(T expectedValue, T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetOrdered</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetOrdered-1</anchor>
            <arglist>(T expectedValue, T newValue, T &amp;currentValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetRelaxed</anchor>
            <arglist>(T expectedValue, T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetRelaxed-1</anchor>
            <arglist>(T expectedValue, T newValue, T &amp;currentValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetRelease</anchor>
            <arglist>(T expectedValue, T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>testAndSetRelease-1</anchor>
            <arglist>(T expectedValue, T newValue, T &amp;currentValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qYieldCpu</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>qYieldCpu</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>storeRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>storeRelaxed</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>storeRelease</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>storeRelease</anchor>
            <arglist>(T newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>loadAcquire</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>loadAcquire</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>loadRelaxed</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>loadRelaxed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator T</name>
            <anchorfile>qatomicinteger.html</anchorfile>
            <anchor>operator-T</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAtomicPointer</name>
        <filename>qatomicpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicPointer</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>QAtomicPointer</anchor>
            <arglist>(T *value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicPointer</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>QAtomicPointer-1</anchor>
            <arglist>(const QAtomicPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAtomicPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QAtomicPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_WAIT_FREE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_WAIT_FREE</anchor>
            <arglist>Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_WAIT_FREE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE</anchor>
            <arglist>Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE</anchor>
            <arglist>Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE</anchor>
            <arglist>Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndAddAcquire</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndAddAcquire</anchor>
            <arglist>(qptrdiff valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndAddOrdered</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndAddOrdered</anchor>
            <arglist>(qptrdiff valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndAddRelaxed</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndAddRelaxed</anchor>
            <arglist>(qptrdiff valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndAddRelease</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndAddRelease</anchor>
            <arglist>(qptrdiff valueToAdd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndStoreAcquire</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndStoreAcquire</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndStoreOrdered</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndStoreOrdered</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndStoreRelaxed</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndStoreRelaxed</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>fetchAndStoreRelease</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>fetchAndStoreRelease</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndAddNative</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isFetchAndAddNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndAddWaitFree</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isFetchAndAddWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndStoreNative</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isFetchAndStoreNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isFetchAndStoreWaitFree</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isFetchAndStoreWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTestAndSetNative</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isTestAndSetNative</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTestAndSetWaitFree</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>isTestAndSetWaitFree</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetAcquire</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>testAndSetAcquire</anchor>
            <arglist>(T *expectedValue, T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetOrdered</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>testAndSetOrdered</anchor>
            <arglist>(T *expectedValue, T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelaxed</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>testAndSetRelaxed</anchor>
            <arglist>(T *expectedValue, T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAndSetRelease</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>testAndSetRelease</anchor>
            <arglist>(T *expectedValue, T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>storeRelaxed</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>storeRelaxed</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>storeRelease</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>storeRelease</anchor>
            <arglist>(T *newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>loadAcquire</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>loadAcquire</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>loadRelaxed</name>
            <anchorfile>qatomicpointer.html</anchorfile>
            <anchor>loadRelaxed</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QAtomicScopedValueRollback</name>
        <filename>qatomicscopedvaluerollback.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicScopedValueRollback</name>
            <anchorfile>qatomicscopedvaluerollback.html</anchorfile>
            <anchor>QAtomicScopedValueRollback-3</anchor>
            <arglist>(QBasicAtomicInteger&lt;T&gt; &amp;var, T value, std::memory_order mo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicScopedValueRollback</name>
            <anchorfile>qatomicscopedvaluerollback.html</anchorfile>
            <anchor>QAtomicScopedValueRollback</anchor>
            <arglist>(QBasicAtomicInteger&lt;T&gt; &amp;var, std::memory_order mo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicScopedValueRollback</name>
            <anchorfile>qatomicscopedvaluerollback.html</anchorfile>
            <anchor>QAtomicScopedValueRollback-4</anchor>
            <arglist>(QBasicAtomicPointer&lt;std::remove_pointer_t&lt;T&gt;&gt; &amp;var, T value, std::memory_order mo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicScopedValueRollback</name>
            <anchorfile>qatomicscopedvaluerollback.html</anchorfile>
            <anchor>QAtomicScopedValueRollback-1</anchor>
            <arglist>(QBasicAtomicPointer&lt;std::remove_pointer_t&lt;T&gt;&gt; &amp;var, std::memory_order mo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicScopedValueRollback</name>
            <anchorfile>qatomicscopedvaluerollback.html</anchorfile>
            <anchor>QAtomicScopedValueRollback-5</anchor>
            <arglist>(std::atomic&lt;T&gt; &amp;var, T value, std::memory_order mo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QAtomicScopedValueRollback</name>
            <anchorfile>qatomicscopedvaluerollback.html</anchorfile>
            <anchor>QAtomicScopedValueRollback-2</anchor>
            <arglist>(std::atomic&lt;T&gt; &amp;var, std::memory_order mo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commit</name>
            <anchorfile>qatomicscopedvaluerollback.html</anchorfile>
            <anchor>commit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QAtomicScopedValueRollback</name>
            <anchorfile>qatomicscopedvaluerollback.html</anchorfile>
            <anchor>dtor.QAtomicScopedValueRollback</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBEInteger</name>
        <filename>qbeinteger.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBEInteger</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>QBEInteger</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator%=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-25-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator*=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator++</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator--</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator/=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-lt-lt-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator&gt;&gt;=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-gt-gt-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator^=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt; &amp;</type>
            <name>operator|=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QBEInteger&lt;T&gt;</type>
            <name>max</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>max</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QBEInteger&lt;T&gt;</type>
            <name>min</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>min</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt;</type>
            <name>operator++</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBEInteger&lt;T&gt;</type>
            <name>operator--</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator T</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-T</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QBEInteger&lt;T&gt; other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbeinteger.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QBEInteger&lt;T&gt; other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBaseIterator</name>
        <filename>qbaseiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>mutableIterator</name>
            <anchorfile>qbaseiterator.html</anchorfile>
            <anchor>mutableIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>constIterator</name>
            <anchorfile>qbaseiterator.html</anchorfile>
            <anchor>constIterator</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBasicTimer</name>
        <filename>qbasictimer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBasicTimer &amp;</type>
            <name>operator=</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QBasicTimer &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBasicTimer</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>QBasicTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBasicTimer</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>QBasicTimer-1</anchor>
            <arglist>(QBasicTimer &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(QBasicTimer::Duration duration, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>start-2</anchor>
            <arglist>(QBasicTimer::Duration duration, Qt::TimerType timerType, QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qbasictimer-obsolete.html</anchorfile>
            <anchor>start-1</anchor>
            <arglist>(int msec, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qbasictimer-obsolete.html</anchorfile>
            <anchor>start-3</anchor>
            <arglist>(int msec, Qt::TimerType timerType, QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>swap-1</anchor>
            <arglist>(QBasicTimer &amp;lhs, QBasicTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QBasicTimer &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QBasicTimer</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>dtor.QBasicTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerId</type>
            <name>id</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timerId</name>
            <anchorfile>qbasictimer-obsolete.html</anchorfile>
            <anchor>timerId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Duration</name>
            <anchorfile>qbasictimer.html</anchorfile>
            <anchor>Duration-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBindable</name>
        <filename>qbindable.html</filename>
        <base>QUntypedBindable</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBindable</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>QBindable</anchor>
            <arglist>(QObject *obj, const QMetaProperty &amp;property)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBindable</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>QBindable-1</anchor>
            <arglist>(QObject *obj, const char *property)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>setBinding</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>setBinding-1</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>setBinding</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>setBinding</anchor>
            <arglist>(const QPropertyBinding&lt;T&gt; &amp;binding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>takeBinding</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>takeBinding</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>binding</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>binding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>makeBinding</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>makeBinding</anchor>
            <arglist>(const QPropertyBindingSourceLocation &amp;location) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qbindable.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBitArray</name>
        <filename>qbitarray.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(QBitArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-and-eq-1</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QBitArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator^=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(QBitArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator^=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5e-eq-1</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator|=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(QBitArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray &amp;</type>
            <name>operator|=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7c-eq-1</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QBitArray</type>
            <name>fromBits</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>fromBits</anchor>
            <arglist>(const char *data, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator&amp;</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(QBitArray &amp;&amp;a1, QBitArray &amp;&amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator&amp;</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-and-1</anchor>
            <arglist>(QBitArray &amp;&amp;a1, const QBitArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator&amp;</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-and-2</anchor>
            <arglist>(const QBitArray &amp;a1, QBitArray &amp;&amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator&amp;</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-and-3</anchor>
            <arglist>(const QBitArray &amp;a1, const QBitArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator^</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5e</anchor>
            <arglist>(QBitArray &amp;&amp;a1, QBitArray &amp;&amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator^</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5e-1</anchor>
            <arglist>(QBitArray &amp;&amp;a1, const QBitArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator^</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5e-2</anchor>
            <arglist>(const QBitArray &amp;a1, QBitArray &amp;&amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator^</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5e-3</anchor>
            <arglist>(const QBitArray &amp;a1, const QBitArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator|</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(QBitArray &amp;&amp;a1, QBitArray &amp;&amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator|</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7c-1</anchor>
            <arglist>(QBitArray &amp;&amp;a1, const QBitArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator|</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7c-2</anchor>
            <arglist>(const QBitArray &amp;a1, QBitArray &amp;&amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator|</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7c-3</anchor>
            <arglist>(const QBitArray &amp;a1, const QBitArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>operator~</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-7e</anchor>
            <arglist>(QBitArray a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitArray</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>QBitArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitArray</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>QBitArray-1</anchor>
            <arglist>(QBitArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitArray</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>QBitArray-2</anchor>
            <arglist>(const QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBitArray</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>QBitArray-3</anchor>
            <arglist>(qsizetype size, bool value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitRef</type>
            <name>operator[]</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDataStream &amp;out, const QBitArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;in, QBitArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fill</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(bool value, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QBitArray &amp;lhs, const QBitArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QBitArray &amp;lhs, const QBitArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toggleBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>toggleBit</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>clearBit</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fill</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>fill-1</anchor>
            <arglist>(bool value, qsizetype begin, qsizetype end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>setBit</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>setBit-1</anchor>
            <arglist>(qsizetype i, bool value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QBitArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>at</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator[]</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testBit</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>testBit</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>bits</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>bits</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>(bool on) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>toUInt32</name>
            <anchorfile>qbitarray.html</anchorfile>
            <anchor>toUInt32</anchor>
            <arglist>(QSysInfo::Endian endianness, bool *ok) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBluetoothPermission</name>
        <filename>qbluetoothpermission.html</filename>
        <member kind="enumeration">
            <name>CommunicationMode</name>
            <anchorfile>qbluetoothpermission.html</anchorfile>
            <anchor>CommunicationMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Access</name>
            <anchorfile>qbluetoothpermission.html</anchorfile>
            <anchor>CommunicationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Advertise</name>
            <anchorfile>qbluetoothpermission.html</anchorfile>
            <anchor>CommunicationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Default</name>
            <anchorfile>qbluetoothpermission.html</anchorfile>
            <anchor>CommunicationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCommunicationModes</name>
            <anchorfile>qbluetoothpermission.html</anchorfile>
            <anchor>setCommunicationModes</anchor>
            <arglist>(QBluetoothPermission::CommunicationModes modes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBluetoothPermission::CommunicationModes</type>
            <name>communicationModes</name>
            <anchorfile>qbluetoothpermission.html</anchorfile>
            <anchor>communicationModes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QBluetoothPermission::CommunicationMode">
            <name>CommunicationModes</name>
            <anchorfile>qbluetoothpermission.html</anchorfile>
            <anchor>CommunicationMode-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QBuffer</name>
        <filename>qbuffer.html</filename>
        <base>QIODevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>QBuffer-1</anchor>
            <arglist>(QByteArray *byteArray, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QBuffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>QBuffer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>buffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>buffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QIODeviceBase::OpenMode mode) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>seek</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>seek</anchor>
            <arglist>(qint64 pos) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 len) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBuffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>setBuffer</anchor>
            <arglist>(QByteArray *byteArray)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>setData-1</anchor>
            <arglist>(const char *data, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QBuffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>dtor.QBuffer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QByteArray &amp;</type>
            <name>buffer</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>buffer-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QByteArray &amp;</type>
            <name>data</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>pos</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>size</name>
            <anchorfile>qbuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QByteArray</name>
        <filename>qbytearray.html</filename>
        <class>QByteArray::FromBase64Result</class>
        <member kind="enumeration">
            <name>Base64Option</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Base64Encoding</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Base64UrlEncoding</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeepTrailingEquals</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OmitTrailingEquals</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IgnoreBase64DecodingErrors</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AbortOnBase64DecodingErrors</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-1</anchor>
            <arglist>(QByteArrayView data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-4</anchor>
            <arglist>(const char *str, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>append</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>append-5</anchor>
            <arglist>(qsizetype count, char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>assign</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>assign-1</anchor>
            <arglist>(InputIterator first, InputIterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>assign</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>assign</anchor>
            <arglist>(QByteArrayView v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>assign</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>assign-2</anchor>
            <arglist>(qsizetype n, char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>fill</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(char ch, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(qsizetype i, QByteArrayView data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(qsizetype i, char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(qsizetype i, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(qsizetype i, const char *data, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(qsizetype i, const char *s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>insert</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>insert-5</anchor>
            <arglist>(qsizetype i, qsizetype count, char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-eq-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QByteArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(QByteArrayView ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend-1</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend-2</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend-4</anchor>
            <arglist>(const char *str, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>prepend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>prepend-5</anchor>
            <arglist>(qsizetype count, char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>remove</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(qsizetype pos, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>removeAt</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>removeFirst</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>removeIf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>removeLast</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-1</anchor>
            <arglist>(QByteArrayView before, QByteArrayView after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-2</anchor>
            <arglist>(char before, QByteArrayView after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-3</anchor>
            <arglist>(char before, char after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-4</anchor>
            <arglist>(const char *before, qsizetype bsize, const char *after, qsizetype asize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(qsizetype pos, qsizetype len, QByteArrayView after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>replace</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>replace-5</anchor>
            <arglist>(qsizetype pos, qsizetype len, const char *after, qsizetype alen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-8</anchor>
            <arglist>(double n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-9</anchor>
            <arglist>(float n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum</anchor>
            <arglist>(int n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-1</anchor>
            <arglist>(long n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-2</anchor>
            <arglist>(qlonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-3</anchor>
            <arglist>(qulonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-4</anchor>
            <arglist>(short n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-5</anchor>
            <arglist>(uint n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-6</anchor>
            <arglist>(ulong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setNum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setNum-7</anchor>
            <arglist>(ushort n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>setRawData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>setRawData</anchor>
            <arglist>(const char *data, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>slice</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>slice-1</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray &amp;</type>
            <name>slice</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>slice</anchor>
            <arglist>(qsizetype pos, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>chopped</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>chopped</anchor>
            <arglist>(qsizetype len) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>first</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>first</anchor>
            <arglist>(qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromBase64</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromBase64</anchor>
            <arglist>(const QByteArray &amp;base64, QByteArray::Base64Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromCFData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromCFData</anchor>
            <arglist>(CFDataRef data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromEcmaUint8Array</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromEcmaUint8Array</anchor>
            <arglist>(emscripten::val uint8array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromHex</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromHex</anchor>
            <arglist>(const QByteArray &amp;hexEncoded)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromNSData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromNSData</anchor>
            <arglist>(const NSData *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromPercentEncoding</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromPercentEncoding</anchor>
            <arglist>(const QByteArray &amp;input, char percent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromRawCFData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromRawCFData</anchor>
            <arglist>(CFDataRef data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromRawData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromRawData</anchor>
            <arglist>(const char *data, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromRawNSData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromRawNSData</anchor>
            <arglist>(const NSData *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>fromStdString</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromStdString</anchor>
            <arglist>(const std::string &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>last</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>last</anchor>
            <arglist>(qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>left</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(qsizetype len) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>mid</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(qsizetype pos, qsizetype len) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-6</anchor>
            <arglist>(double n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number</anchor>
            <arglist>(int n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-1</anchor>
            <arglist>(long n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-2</anchor>
            <arglist>(qlonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-3</anchor>
            <arglist>(qulonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-4</anchor>
            <arglist>(uint n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>number</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>number-5</anchor>
            <arglist>(ulong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator&quot;&quot;_ba</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-22-22_ba</anchor>
            <arglist>(const char *str, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator&quot;&quot;_qba</name>
            <anchorfile>qbytearray-obsolete.html</anchorfile>
            <anchor>operator-22-22_qba</anchor>
            <arglist>(const char *str, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator+</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QByteArrayView lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator+</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(char a1, const QByteArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator+</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-3</anchor>
            <arglist>(const QByteArray &amp;a1, char a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator+</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-4</anchor>
            <arglist>(const QByteArray &amp;a1, const QByteArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator+</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-5</anchor>
            <arglist>(const QByteArray &amp;a1, const char *a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator+</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-2</anchor>
            <arglist>(const QByteArray &amp;lhs, QByteArrayView rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator+</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-2b-6</anchor>
            <arglist>(const char *a1, const QByteArray &amp;a2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>qCompress</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qCompress</anchor>
            <arglist>(const QByteArray &amp;data, int compressionLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>qCompress</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qCompress-1</anchor>
            <arglist>(const uchar *data, qsizetype nbytes, int compressionLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>qUncompress</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qUncompress</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>qUncompress</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qUncompress-2</anchor>
            <arglist>(const uchar *data, qsizetype nbytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>right</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(qsizetype len) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sliced</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>sliced-2</anchor>
            <arglist>(qsizetype pos) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sliced</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(qsizetype pos, qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-1</anchor>
            <arglist>(QByteArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-2</anchor>
            <arglist>(const QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-3</anchor>
            <arglist>(const char *data, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-4</anchor>
            <arglist>(qsizetype size, Qt::Initialization)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArray-5</anchor>
            <arglist>(qsizetype size, char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray::FromBase64Result</type>
            <name>fromBase64Encoding</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromBase64Encoding</anchor>
            <arglist>(QByteArray &amp;&amp;base64, QByteArray::Base64Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray::FromBase64Result</type>
            <name>fromBase64Encoding</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>fromBase64Encoding-1</anchor>
            <arglist>(const QByteArray &amp;base64, QByteArray::Base64Options options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::iterator</type>
            <name>begin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::iterator</type>
            <name>end</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::iterator</type>
            <name>erase</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>erase-1</anchor>
            <arglist>(QByteArray::const_iterator first, QByteArray::const_iterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::iterator</type>
            <name>erase</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>erase-3</anchor>
            <arglist>(QByteArray::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayLiteral</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QByteArrayLiteral</anchor>
            <arglist>(ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(QDataStream &amp;out, const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(QDataStream &amp;in, QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_NO_CAST_FROM_BYTEARRAY</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QT_NO_CAST_FROM_BYTEARRAY</anchor>
            <arglist>QT_NO_CAST_FROM_BYTEARRAY</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_NO_QSNPRINTF</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>QT_NO_QSNPRINTF</anchor>
            <arglist>QT_NO_QSNPRINTF</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-not-eq-8</anchor>
            <arglist>(const QByteArray &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-not-eq-9</anchor>
            <arglist>(const QByteArray &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-not-eq-10</anchor>
            <arglist>(const char *const &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt-8</anchor>
            <arglist>(const QByteArray &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt-9</anchor>
            <arglist>(const QByteArray &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt-10</anchor>
            <arglist>(const char *const &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt-eq-8</anchor>
            <arglist>(const QByteArray &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt-eq-9</anchor>
            <arglist>(const QByteArray &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-lt-eq-10</anchor>
            <arglist>(const char *const &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq-eq-8</anchor>
            <arglist>(const QByteArray &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq-eq-9</anchor>
            <arglist>(const QByteArray &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-eq-eq-10</anchor>
            <arglist>(const char *const &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt-8</anchor>
            <arglist>(const QByteArray &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt-9</anchor>
            <arglist>(const QByteArray &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt-10</anchor>
            <arglist>(const char *const &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt-eq-8</anchor>
            <arglist>(const QByteArray &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt-eq-9</anchor>
            <arglist>(const QByteArray &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-gt-eq-10</anchor>
            <arglist>(const char *const &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char &amp;</type>
            <name>back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char &amp;</type>
            <name>front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char &amp;</type>
            <name>operator[]</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>data</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>qstrcpy</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstrcpy</anchor>
            <arglist>(char *dst, const char *src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>qstrdup</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstrdup</anchor>
            <arglist>(const char *src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>qstrncpy</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstrncpy</anchor>
            <arglist>(char *dst, const char *src, size_t len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>emscripten::val</type>
            <name>toEcmaUint8Array</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toEcmaUint8Array</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qsnprintf</name>
            <anchorfile>qbytearray-obsolete.html</anchorfile>
            <anchor>qsnprintf</anchor>
            <arglist>(char *str, size_t n, const char *fmt, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qstrcmp</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstrcmp</anchor>
            <arglist>(const char *str1, const char *str2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qstricmp</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstricmp</anchor>
            <arglist>(const char *str1, const char *str2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qstrncmp</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstrncmp</anchor>
            <arglist>(const char *str1, const char *str2, size_t len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qstrnicmp</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstrnicmp</anchor>
            <arglist>(const char *str1, const char *str2, size_t len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qvsnprintf</name>
            <anchorfile>qbytearray-obsolete.html</anchorfile>
            <anchor>qvsnprintf</anchor>
            <arglist>(char *str, size_t n, const char *fmt, va_list ap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QByteArray &amp;ba, const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>erase_if</anchor>
            <arglist>(QByteArray &amp;ba, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qsizetype</type>
            <name>maxSize</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>maxSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint16</type>
            <name>qChecksum</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qChecksum</anchor>
            <arglist>(QByteArrayView data, Qt::ChecksumType standard)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qstrlen</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstrlen</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qstrnlen</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>qstrnlen</anchor>
            <arglist>(const char *str, size_t maxlen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_back-1</anchor>
            <arglist>(QByteArrayView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_back-2</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_back-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_front-1</anchor>
            <arglist>(QByteArrayView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_front-2</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>push_front-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>resize-1</anchor>
            <arglist>(qsizetype newSize, char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeForOverwrite</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>resizeForOverwrite</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shrink_to_fit</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>shrink_to_fit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QByteArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QByteArray</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>dtor.QByteArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFDataRef</type>
            <name>toCFData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toCFData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFDataRef</type>
            <name>toRawCFData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toRawCFData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSData *</type>
            <name>toNSData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toNSData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSData *</type>
            <name>toRawNSData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toRawNSData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>chopped</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>chopped-1</anchor>
            <arglist>(qsizetype len) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>first</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>(qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>last</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>(qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>left</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>left-1</anchor>
            <arglist>(qsizetype len) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>leftJustified</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>leftJustified</anchor>
            <arglist>(qsizetype width, char fill, bool truncate) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>mid</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>mid-1</anchor>
            <arglist>(qsizetype pos, qsizetype len) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>percentDecoded</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>percentDecoded</anchor>
            <arglist>(char percent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>repeated</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>repeated</anchor>
            <arglist>(qsizetype times) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>right</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>right-1</anchor>
            <arglist>(qsizetype len) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>rightJustified</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>rightJustified</anchor>
            <arglist>(qsizetype width, char fill, bool truncate) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>simplified</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>simplified</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sliced</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>sliced-3</anchor>
            <arglist>(qsizetype pos) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>sliced</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(qsizetype pos, qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toBase64</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toBase64</anchor>
            <arglist>(QByteArray::Base64Options options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toHex</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toHex</anchor>
            <arglist>(char separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLower</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toLower</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toPercentEncoding</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toPercentEncoding</anchor>
            <arglist>(const QByteArray &amp;exclude, const QByteArray &amp;include, char percent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toUpper</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toUpper</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>trimmed</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>trimmed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_iterator</type>
            <name>begin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_iterator</type>
            <name>cend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_iterator</type>
            <name>end</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>rbegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>rend-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>split</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>split</anchor>
            <arglist>(char sep) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(char ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>endsWith-1</anchor>
            <arglist>(char ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLower</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>isLower</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUpper</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>isUpper</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValidUtf8</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>isValidUtf8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>startsWith-1</anchor>
            <arglist>(char ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>at</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>back</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>back-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>front</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>front-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>operator[]</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>constData</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>data</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>operator const char *</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-const-char--2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>operator const void *</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-const-void--2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(QByteArrayView bv, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capacity</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qbytearray-obsolete.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>(char ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QByteArrayView bv, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>indexOf-1</anchor>
            <arglist>(char ch, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>lastIndexOf-1</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(QByteArrayView bv, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(char ch, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::string</type>
            <name>toStdString</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toStdString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="typedef" type="QByteArray::Base64Option">
            <name>Base64Options</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>Base64Option-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QByteArray::FromBase64Result</name>
        <filename>qbytearray-frombase64result.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbytearray-frombase64result.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QByteArray::FromBase64Result &amp;lhs, const QByteArray::FromBase64Result &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbytearray-frombase64result.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QByteArray::FromBase64Result &amp;lhs, const QByteArray::FromBase64Result &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qbytearray-frombase64result.html</anchorfile>
            <anchor>qHash-16</anchor>
            <arglist>(const QByteArray::FromBase64Result &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>qbytearray-frombase64result.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QByteArray &amp;</type>
            <name>operator*</name>
            <anchorfile>qbytearray-frombase64result.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QByteArrayList</name>
        <filename>qbytearraylist.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>join</name>
            <anchorfile>qbytearraylist.html</anchorfile>
            <anchor>join</anchor>
            <arglist>(QByteArrayView separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>join</name>
            <anchorfile>qbytearraylist.html</anchorfile>
            <anchor>join-1</anchor>
            <arglist>(char separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>join</name>
            <anchorfile>qbytearraylist.html</anchorfile>
            <anchor>join-2</anchor>
            <arglist>(const QByteArray &amp;separator) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QByteArrayListIterator</name>
            <anchorfile>qbytearraylist.html</anchorfile>
            <anchor>QByteArrayListIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMutableByteArrayListIterator</name>
            <anchorfile>qbytearraylist.html</anchorfile>
            <anchor>QMutableByteArrayListIterator-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QByteArrayMatcher</name>
        <filename>qbytearraymatcher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayMatcher &amp;</type>
            <name>operator=</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QByteArrayMatcher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher-4</anchor>
            <arglist>(QByteArrayView pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher-1</anchor>
            <arglist>(const QByteArray &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher-2</anchor>
            <arglist>(const QByteArrayMatcher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>QByteArrayMatcher-3</anchor>
            <arglist>(const char *pattern, qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPattern</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>setPattern</anchor>
            <arglist>(const QByteArray &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QByteArrayMatcher</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>dtor.QByteArrayMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>pattern</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>indexIn-2</anchor>
            <arglist>(QByteArrayView data, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qbytearraymatcher.html</anchorfile>
            <anchor>indexIn</anchor>
            <arglist>(const char *str, qsizetype len, qsizetype from) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QByteArrayView</name>
        <filename>qbytearrayview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView &amp;</type>
            <name>slice</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>slice-1</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView &amp;</type>
            <name>slice</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>slice</anchor>
            <arglist>(qsizetype pos, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>fromArray</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>fromArray</anchor>
            <arglist>(const Byte (&amp;)[Size] data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView-1</anchor>
            <arglist>(const Byte (&amp;)[] data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView-2</anchor>
            <arglist>(const Byte *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView-8</anchor>
            <arglist>(const Byte *data, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView-7</anchor>
            <arglist>(const Byte *first, const Byte *last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView-3</anchor>
            <arglist>(const Container &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView-4</anchor>
            <arglist>(const QByteArray &amp;byteArray)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView-5</anchor>
            <arglist>(const char (&amp;)[Size] data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QByteArrayView</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>QByteArrayView-6</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QByteArrayView &amp;lhs, const QByteArrayView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QByteArrayView &amp;lhs, const QByteArrayView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QByteArrayView &amp;lhs, const QByteArrayView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QByteArrayView &amp;lhs, const QByteArrayView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QByteArrayView &amp;lhs, const QByteArrayView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QByteArrayView &amp;lhs, const QByteArrayView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qsizetype</type>
            <name>maxSize</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>maxSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toByteArray</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toByteArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>chopped</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>chopped</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>first</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>first</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>last</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>last</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>left</name>
            <anchorfile>qbytearrayview-obsolete.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>mid</name>
            <anchorfile>qbytearrayview-obsolete.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(qsizetype start, qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>right</name>
            <anchorfile>qbytearrayview-obsolete.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>sliced</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>sliced</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(qsizetype pos, qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>trimmed</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>trimmed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_iterator</type>
            <name>begin</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_iterator</type>
            <name>cend</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_iterator</type>
            <name>end</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_pointer</type>
            <name>constData</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_pointer</type>
            <name>data</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(char ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>endsWith-1</anchor>
            <arglist>(char ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValidUtf8</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>isValidUtf8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>startsWith-1</anchor>
            <arglist>(char ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>at</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>back</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>back</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>front</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>front</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>operator[]</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(QByteArrayView bv, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>(char ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QByteArrayView bv, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>indexOf-1</anchor>
            <arglist>(char ch, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(QByteArrayView bv) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(QByteArrayView bv, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>lastIndexOf-1</anchor>
            <arglist>(char ch, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::string_view</type>
            <name>operator std::string_view</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>operator-std-3a-3astring_view</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>storage_type</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>storage_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qbytearrayview.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCache</name>
        <filename>qcache.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCache</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>QCache</anchor>
            <arglist>(qsizetype maxCost)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>take</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>insert</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const Key &amp;key, T *object, qsizetype cost)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxCost</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>setMaxCost</anchor>
            <arglist>(qsizetype cost)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCache</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>dtor.QCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>object</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>object</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator[]</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>maxCost</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>maxCost</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>totalCost</name>
            <anchorfile>qcache.html</anchorfile>
            <anchor>totalCost</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCalendar</name>
        <filename>qcalendar.html</filename>
        <class>QCalendar::SystemId</class>
        <member kind="enumeration">
            <name>System</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>System-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Gregorian</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>System-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Julian</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>System-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Milankovic</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>System-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Jalali</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>System-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IslamicCivil</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>System-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Last</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>System-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>User</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>System-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCalendar</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>QCalendar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCalendar</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>QCalendar-1</anchor>
            <arglist>(QAnyStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCalendar</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>QCalendar-2</anchor>
            <arglist>(QCalendar::System system)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCalendar</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>QCalendar-3</anchor>
            <arglist>(QCalendar::SystemId id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableCalendars</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>availableCalendars</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCalendar::YearMonthDay</type>
            <name>partsFromDate</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>partsFromDate</anchor>
            <arglist>(QDate date) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>dateFromParts</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>dateFromParts</anchor>
            <arglist>(const QCalendar::YearMonthDay &amp;parts) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>dateFromParts</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>dateFromParts-1</anchor>
            <arglist>(int year, int month, int day) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>matchCenturyToWeekday</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>matchCenturyToWeekday</anchor>
            <arglist>(const QCalendar::YearMonthDay &amp;parts, int dow) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dateTimeToString</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>dateTimeToString</anchor>
            <arglist>(QStringView format, const QDateTime &amp;datetime, QDate dateOnly, QTime timeOnly, const QLocale &amp;locale) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>monthName</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>monthName</anchor>
            <arglist>(const QLocale &amp;locale, int month, int year, QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>standaloneMonthName</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>standaloneMonthName</anchor>
            <arglist>(const QLocale &amp;locale, int month, int year, QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>standaloneWeekDayName</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>standaloneWeekDayName</anchor>
            <arglist>(const QLocale &amp;locale, int day, QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>weekDayName</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>weekDayName</anchor>
            <arglist>(const QLocale &amp;locale, int day, QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasYearZero</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>hasYearZero</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDateValid</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>isDateValid</anchor>
            <arglist>(int year, int month, int day) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isGregorian</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>isGregorian</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLeapYear</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>isLeapYear</anchor>
            <arglist>(int year) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLunar</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>isLunar</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLuniSolar</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>isLuniSolar</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isProleptic</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>isProleptic</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSolar</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>isSolar</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dayOfWeek</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>dayOfWeek</anchor>
            <arglist>(QDate date) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daysInMonth</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>daysInMonth</anchor>
            <arglist>(int month, int year) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daysInYear</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>daysInYear</anchor>
            <arglist>(int year) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumDaysInMonth</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>maximumDaysInMonth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maximumMonthsInYear</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>maximumMonthsInYear</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minimumDaysInMonth</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>minimumDaysInMonth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>monthsInYear</name>
            <anchorfile>qcalendar.html</anchorfile>
            <anchor>monthsInYear</anchor>
            <arglist>(int year) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCalendar::SystemId</name>
        <filename>qcalendar-systemid.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcalendar-systemid.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCalendarPermission</name>
        <filename>qcalendarpermission.html</filename>
        <member kind="enumeration">
            <name>AccessMode</name>
            <anchorfile>qcalendarpermission.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qcalendarpermission.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qcalendarpermission.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessMode</name>
            <anchorfile>qcalendarpermission.html</anchorfile>
            <anchor>setAccessMode</anchor>
            <arglist>(QCalendarPermission::AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCalendarPermission::AccessMode</type>
            <name>accessMode</name>
            <anchorfile>qcalendarpermission.html</anchorfile>
            <anchor>accessMode</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCameraPermission</name>
        <filename>qcamerapermission.html</filename>
    </compound>
    <compound kind="class">
        <name>QCborArray</name>
        <filename>qcborarray.html</filename>
        <class>QCborArray::ConstIterator</class>
        <class>QCborArray::Iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QCborValue &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QCborValue &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCborArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborArray</type>
            <name>fromJsonArray</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>fromJsonArray-1</anchor>
            <arglist>(QJsonArray &amp;&amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborArray</type>
            <name>fromJsonArray</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>fromJsonArray</anchor>
            <arglist>(const QJsonArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborArray</type>
            <name>fromStringList</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>fromStringList</anchor>
            <arglist>(const QStringList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborArray</type>
            <name>fromVariantList</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>fromVariantList</anchor>
            <arglist>(const QVariantList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborArray</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>QCborArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborArray</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>QCborArray-1</anchor>
            <arglist>(const QCborArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborArray</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>QCborArray-2</anchor>
            <arglist>(std::initializer_list&lt;QCborValue&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::iterator</type>
            <name>begin</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::iterator</type>
            <name>end</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::iterator</type>
            <name>erase</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QCborArray::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::iterator</type>
            <name>erase</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>erase-1</anchor>
            <arglist>(QCborArray::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::iterator</type>
            <name>insert</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(QCborArray::const_iterator before, const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::iterator</type>
            <name>insert</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(QCborArray::iterator before, const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>extract</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>extract</anchor>
            <arglist>(QCborArray::ConstIterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>extract</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>extract-1</anchor>
            <arglist>(QCborArray::Iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>takeAt</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>takeFirst</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>takeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>takeLast</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>takeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>first</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>last</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QCborArray &amp;lhs, const QCborArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCborArray &amp;lhs, const QCborArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QCborArray &amp;lhs, const QCborArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QCborArray &amp;lhs, const QCborArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QCborArray &amp;lhs, const QCborArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QCborArray &amp;lhs, const QCborArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(QCborValue &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>append-1</anchor>
            <arglist>(const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(qsizetype i, QCborValue &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(qsizetype i, const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_front</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(QCborValue &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>prepend-1</anchor>
            <arglist>(const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const QCborValue &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const QCborValue &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAt</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCborArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCborArray</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>dtor.QCborArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray</type>
            <name>operator+</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QCborValue &amp;v) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::const_iterator</type>
            <name>begin</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::const_iterator</type>
            <name>cend</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::const_iterator</type>
            <name>end</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>at</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>first</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>last</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>toCborValue</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>toCborValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>toJsonArray</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>toJsonArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>toVariantList</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>toVariantList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QCborValue &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValue</type>
            <name>operator[]</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QCborArray &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qcborarray.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborArray::ConstIterator</name>
        <filename>qcborarray-constiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ConstIterator</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>ConstIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ConstIterator</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>ConstIterator-1</anchor>
            <arglist>(const QCborArray::ConstIterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCborArray::ConstIterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator</type>
            <name>operator++</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator</type>
            <name>operator--</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QCborArray::ConstIterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCborArray::ConstIterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QCborArray::ConstIterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QCborArray::ConstIterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QCborArray::ConstIterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QCborArray::ConstIterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator</type>
            <name>operator+</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::ConstIterator</type>
            <name>operator-</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueConstRef</type>
            <name>operator*</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueConstRef</type>
            <name>operator[]</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValueConstRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QCborArray::ConstIterator other) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qcborarray-constiterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborArray::Iterator</name>
        <filename>qcborarray-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Iterator</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>Iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Iterator</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>Iterator-1</anchor>
            <arglist>(const QCborArray::Iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCborArray::Iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator</type>
            <name>operator++</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator</type>
            <name>operator--</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-lt-1</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-lt-eq-1</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-gt-1</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-gt-eq-1</anchor>
            <arglist>(const QCborArray::Iterator &amp;lhs, const QCborArray::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator</type>
            <name>operator+</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray::Iterator</type>
            <name>operator-</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator*</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValueConstRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QCborArray::Iterator other) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qcborarray-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborError</name>
        <filename>qcborerror.html</filename>
        <member kind="enumeration">
            <name>Code</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AdvancePastEnd</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InputOutputError</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GarbageAtEnd</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EndOfFile</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnexpectedBreak</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownType</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalType</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalNumber</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalSimpleType</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidUtf8String</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataTooLarge</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NestingTooDeep</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnsupportedType</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>Code-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborError::Code</type>
            <name>operator QCborError::Code</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>operator-QCborError-3a-3aCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qcborerror.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborMap</name>
        <filename>qcbormap.html</filename>
        <class>QCborMap::ConstIterator</class>
        <class>QCborMap::Iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap &amp;</type>
            <name>operator=</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCborMap &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborMap</type>
            <name>fromJsonObject</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>fromJsonObject-1</anchor>
            <arglist>(QJsonObject &amp;&amp;obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborMap</type>
            <name>fromJsonObject</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>fromJsonObject</anchor>
            <arglist>(const QJsonObject &amp;obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborMap</type>
            <name>fromVariantHash</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>fromVariantHash</anchor>
            <arglist>(const QVariantHash &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborMap</type>
            <name>fromVariantMap</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>fromVariantMap</anchor>
            <arglist>(const QVariantMap &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborMap</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>QCborMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborMap</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>QCborMap-1</anchor>
            <arglist>(const QCborMap &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborMap</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>QCborMap-2</anchor>
            <arglist>(std::initializer_list&lt;QCborMap::value_type&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>begin</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>end</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>erase</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QCborMap::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>erase</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>erase-1</anchor>
            <arglist>(QCborMap::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>find</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>find</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>find-3</anchor>
            <arglist>(const QCborValue &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>find</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>find-4</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>find</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(qint64 key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>insert</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(QCborMap::value_type v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>insert</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(QLatin1StringView key, const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>insert</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(const QCborValue &amp;key, const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>insert</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(const QString &amp;key, const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::iterator</type>
            <name>insert</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(qint64 key, const QCborValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>extract</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>extract</anchor>
            <arglist>(QCborMap::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>extract</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>extract-1</anchor>
            <arglist>(QCborMap::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>take</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>take</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>take-1</anchor>
            <arglist>(const QCborValue &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>take</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>take-2</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>take</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>take-3</anchor>
            <arglist>(qint64 key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-5b-5d-4</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-5b-5d-5</anchor>
            <arglist>(const QCborValue &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-5b-5d-6</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qint64 key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QCborMap &amp;lhs, const QCborMap &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCborMap &amp;lhs, const QCborMap &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QCborMap &amp;lhs, const QCborMap &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QCborMap &amp;lhs, const QCborMap &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QCborMap &amp;lhs, const QCborMap &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QCborMap &amp;lhs, const QCborMap &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QCborValue &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>remove-3</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>remove-1</anchor>
            <arglist>(qint64 key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCborMap &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCborMap</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>dtor.QCborMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>begin</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>cend</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>constFind-1</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>constFind-2</anchor>
            <arglist>(const QCborValue &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>constFind-3</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(qint64 key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>end</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>find</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>find-5</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>find</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>find-6</anchor>
            <arglist>(const QCborValue &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>find</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>find-7</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::const_iterator</type>
            <name>find</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>find-1</anchor>
            <arglist>(qint64 key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>toCborValue</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>toCborValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>value</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>value-3</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>value</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QCborValue &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>value</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>value-4</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>value</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>(qint64 key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>toJsonObject</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>toJsonObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QCborValue&gt;</type>
            <name>keys</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantHash</type>
            <name>toVariantHash</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>toVariantHash</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>toVariantMap</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>toVariantMap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QCborValue &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(qint64 key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValue</type>
            <name>operator[]</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-5b-5d-7</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValue</type>
            <name>operator[]</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(const QCborValue &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValue</type>
            <name>operator[]</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-5b-5d-8</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValue</type>
            <name>operator[]</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(qint64 key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QCborMap &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>mapped_type</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>mapped_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qcbormap.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborMap::ConstIterator</name>
        <filename>qcbormap-constiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ConstIterator</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>ConstIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>ConstIterator</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>ConstIterator-1</anchor>
            <arglist>(const QCborMap::ConstIterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCborMap::ConstIterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator</type>
            <name>operator++</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator</type>
            <name>operator--</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QCborMap::ConstIterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCborMap::ConstIterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QCborMap::ConstIterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QCborMap::ConstIterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QCborMap::ConstIterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QCborMap::ConstIterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator</type>
            <name>operator+</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator</type>
            <name>operator-</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::ConstIterator::value_type</type>
            <name>operator*</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>key</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueConstRef</type>
            <name>value</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValueConstRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QCborMap::ConstIterator j) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qcbormap-constiterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborMap::Iterator</name>
        <filename>qcbormap-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Iterator</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>Iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Iterator</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>Iterator-1</anchor>
            <arglist>(const QCborMap::Iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCborMap::Iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator</type>
            <name>operator++</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator</type>
            <name>operator--</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-lt-1</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-lt-eq-1</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-gt-1</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::ConstIterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-gt-eq-1</anchor>
            <arglist>(const QCborMap::Iterator &amp;lhs, const QCborMap::Iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator</type>
            <name>operator+</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator</type>
            <name>operator-</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap::Iterator::value_type</type>
            <name>operator*</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>key</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>value</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValueConstRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QCborMap::Iterator j) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qcbormap-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborParserError</name>
        <filename>qcborparsererror.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qcborparsererror.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborStreamReader</name>
        <filename>qcborstreamreader.html</filename>
        <class>QCborStreamReader::StringResult</class>
        <member kind="enumeration">
            <name>StringResultCode</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>StringResultCode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>EndOfString</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>StringResultCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ok</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>StringResultCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>StringResultCode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnsignedInteger</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NegativeInteger</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ByteString</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ByteArray</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextString</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>String</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Array</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Map</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tag</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SimpleType</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HalfFloat</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float16</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Double</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readAllByteArray</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readAllByteArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readAllUtf8String</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readAllUtf8String</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborStreamReader</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>QCborStreamReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborStreamReader</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>QCborStreamReader-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborStreamReader</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>QCborStreamReader-3</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborStreamReader</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>QCborStreamReader-4</anchor>
            <arglist>(const char *data, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborStreamReader</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>QCborStreamReader-5</anchor>
            <arglist>(const quint8 *data, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborStreamReader::StringResult&lt;QByteArray&gt;</type>
            <name>readByteArray</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readByteArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborStreamReader::StringResult&lt;QByteArray&gt;</type>
            <name>readUtf8String</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readUtf8String</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborStreamReader::StringResult&lt;QString&gt;</type>
            <name>readString</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborStreamReader::StringResult&lt;qsizetype&gt;</type>
            <name>readStringChunk</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readStringChunk</anchor>
            <arglist>(char *ptr, qsizetype maxlen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readAllString</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readAllString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>enterContainer</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>enterContainer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>leaveContainer</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>leaveContainer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>next</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>next</anchor>
            <arglist>(int maxRecursion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>readAndAppendToByteArray</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readAndAppendToByteArray</anchor>
            <arglist>(QByteArray &amp;dst)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>readAndAppendToString</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readAndAppendToString</anchor>
            <arglist>(QString &amp;dst)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>readAndAppendToUtf8String</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>readAndAppendToUtf8String</anchor>
            <arglist>(QByteArray &amp;dst)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>addData</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>addData-1</anchor>
            <arglist>(const char *data, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>addData-2</anchor>
            <arglist>(const quint8 *data, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reparse</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>reparse</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCborStreamReader</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>dtor.QCborStreamReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborError</type>
            <name>lastError</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>lastError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborNegativeInteger</type>
            <name>toNegativeInteger</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toNegativeInteger</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborSimpleType</type>
            <name>toSimpleType</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toSimpleType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborStreamReader::Type</type>
            <name>parentContainerType</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>parentContainerType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborStreamReader::Type</type>
            <name>type</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborTag</type>
            <name>toTag</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toTag</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isArray</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBool</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isBool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isByteArray</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isByteArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isContainer</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isContainer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDouble</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isDouble</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFalse</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isFalse</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFloat</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isFloat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFloat16</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isFloat16</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInteger</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isInteger</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInvalid</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isInvalid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLengthKnown</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isLengthKnown</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMap</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isMap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNegativeInteger</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isNegativeInteger</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSimpleType</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isSimpleType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSimpleType</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isSimpleType-1</anchor>
            <arglist>(QCborSimpleType st) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isString</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTag</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isTag</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTrue</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isTrue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndefined</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isUndefined</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUnsignedInteger</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isUnsignedInteger</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toBool</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toBool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>containerDepth</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>containerDepth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qfloat16</type>
            <name>toFloat16</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toFloat16</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>currentOffset</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>currentOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>toInteger</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toInteger</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>currentStringChunkSize</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>currentStringChunkSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>length</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>toUnsignedInteger</name>
            <anchorfile>qcborstreamreader.html</anchorfile>
            <anchor>toUnsignedInteger</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborStreamReader::StringResult</name>
        <filename>qcborstreamreader-stringresult.html</filename>
    </compound>
    <compound kind="class">
        <name>QCborStreamWriter</name>
        <filename>qcborstreamwriter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborStreamWriter</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>QCborStreamWriter</anchor>
            <arglist>(QByteArray *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborStreamWriter</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>QCborStreamWriter-1</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endArray</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>endArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endMap</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>endMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(QCborKnownTags tag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-1</anchor>
            <arglist>(QCborNegativeInteger n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(QCborSimpleType st)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-3</anchor>
            <arglist>(QCborTag tag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-4</anchor>
            <arglist>(QLatin1StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-5</anchor>
            <arglist>(QStringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-6</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-7</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-14</anchor>
            <arglist>(const char *str, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-8</anchor>
            <arglist>(double d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-9</anchor>
            <arglist>(float f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-10</anchor>
            <arglist>(qfloat16 f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-11</anchor>
            <arglist>(qint64 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-12</anchor>
            <arglist>(quint64 u)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>append-13</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendByteString</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>appendByteString</anchor>
            <arglist>(const char *data, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendNull</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>appendNull</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendTextString</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>appendTextString</anchor>
            <arglist>(const char *utf8, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>appendUndefined</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>appendUndefined</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startArray</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>startArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startArray</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>startArray-1</anchor>
            <arglist>(quint64 count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startMap</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>startMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startMap</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>startMap-1</anchor>
            <arglist>(quint64 count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCborStreamWriter</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>dtor.QCborStreamWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qcborstreamwriter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCborValue</name>
        <filename>qcborvalue.html</filename>
        <member kind="enumeration">
            <name>DiagnosticNotationOption</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>DiagnosticNotationOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Compact</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>DiagnosticNotationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineWrapped</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>DiagnosticNotationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtendedFormat</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>DiagnosticNotationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>EncodingOption</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>EncodingOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SortKeysInMaps</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>EncodingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UseFloat</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>EncodingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UseFloat16</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>EncodingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UseIntegers</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>EncodingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoTransformation</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>EncodingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Integer</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ByteArray</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>String</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Array</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Map</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tag</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SimpleType</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>False</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>True</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Null</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Undefined</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Double</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DateTime</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Url</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RegularExpression</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uuid</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue &amp;</type>
            <name>operator=</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QCborValue &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue &amp;</type>
            <name>operator=</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QCborValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborValue</type>
            <name>fromCbor</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>fromCbor</anchor>
            <arglist>(QCborStreamReader &amp;reader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborValue</type>
            <name>fromCbor</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>fromCbor-1</anchor>
            <arglist>(const QByteArray &amp;ba, QCborParserError *error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborValue</type>
            <name>fromCbor</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>fromCbor-2</anchor>
            <arglist>(const char *data, qsizetype len, QCborParserError *error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborValue</type>
            <name>fromCbor</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>fromCbor-3</anchor>
            <arglist>(const quint8 *data, qsizetype len, QCborParserError *error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborValue</type>
            <name>fromJsonValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>fromJsonValue</anchor>
            <arglist>(const QJsonValue &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCborValue</type>
            <name>fromVariant</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>fromVariant</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-1</anchor>
            <arglist>(QCborArray &amp;&amp;a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-24</anchor>
            <arglist>(QCborKnownTags tag, const QCborValue &amp;tv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-2</anchor>
            <arglist>(QCborMap &amp;&amp;m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-3</anchor>
            <arglist>(QCborSimpleType st)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-19</anchor>
            <arglist>(QCborTag tag, const QCborValue &amp;tv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-22</anchor>
            <arglist>(QCborValue &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-4</anchor>
            <arglist>(QCborValue::Type t_)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-23</anchor>
            <arglist>(QLatin1StringView s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-5</anchor>
            <arglist>(QStringView s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-6</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-7</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-8</anchor>
            <arglist>(const QCborArray &amp;a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-9</anchor>
            <arglist>(const QCborMap &amp;m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-10</anchor>
            <arglist>(const QCborValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-11</anchor>
            <arglist>(const QDateTime &amp;dt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-12</anchor>
            <arglist>(const QRegularExpression &amp;rx)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-13</anchor>
            <arglist>(const QString &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-14</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-15</anchor>
            <arglist>(const QUuid &amp;uuid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-16</anchor>
            <arglist>(double d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-17</anchor>
            <arglist>(qint64 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>QCborValue-18</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValueRef</type>
            <name>operator[]</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-5b-5d-3</anchor>
            <arglist>(qint64 key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QCborValue &amp;lhs, const QCborValue &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCborValue &amp;lhs, const QCborValue &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QCborValue &amp;lhs, const QCborValue &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QCborValue &amp;lhs, const QCborValue &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QCborValue &amp;lhs, const QCborValue &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QCborValue &amp;lhs, const QCborValue &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCborValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCborValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>dtor.QCborValue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toByteArray</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toByteArray</anchor>
            <arglist>(const QByteArray &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toCbor</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toCbor</anchor>
            <arglist>(QCborValue::EncodingOptions opt) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray</type>
            <name>toArray</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborArray</type>
            <name>toArray</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toArray-1</anchor>
            <arglist>(const QCborArray &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap</type>
            <name>toMap</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toMap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborMap</type>
            <name>toMap</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toMap-1</anchor>
            <arglist>(const QCborMap &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborSimpleType</type>
            <name>toSimpleType</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toSimpleType</anchor>
            <arglist>(QCborSimpleType defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborTag</type>
            <name>tag</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>tag</anchor>
            <arglist>(QCborTag defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue</type>
            <name>taggedValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>taggedValue</anchor>
            <arglist>(const QCborValue &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCborValue::Type</type>
            <name>type</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toDateTime</anchor>
            <arglist>(const QDateTime &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>toJsonValue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toJsonValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>toRegularExpression</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toRegularExpression</anchor>
            <arglist>(const QRegularExpression &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toDiagnosticNotation</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toDiagnosticNotation</anchor>
            <arglist>(QCborValue::DiagnosticNotationOptions opts) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(const QString &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>toUrl</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toUrl</anchor>
            <arglist>(const QUrl &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid</type>
            <name>toUuid</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toUuid</anchor>
            <arglist>(const QUuid &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>toVariant</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isArray</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBool</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isBool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isByteArray</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isByteArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isContainer</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isContainer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDateTime</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isDateTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDouble</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isDouble</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFalse</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isFalse</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInteger</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isInteger</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInvalid</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isInvalid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMap</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isMap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRegularExpression</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isRegularExpression</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSimpleType</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isSimpleType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSimpleType</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isSimpleType-1</anchor>
            <arglist>(QCborSimpleType st) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isString</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTag</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isTag</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTrue</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isTrue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndefined</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isUndefined</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUrl</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isUrl</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUuid</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>isUuid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toBool</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toBool</anchor>
            <arglist>(bool defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValue</type>
            <name>operator[]</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-5b-5d-4</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValue</type>
            <name>operator[]</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QCborValue</type>
            <name>operator[]</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>operator-5b-5d-5</anchor>
            <arglist>(qint64 key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(double defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QCborValue &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>toInteger</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toInteger</anchor>
            <arglist>(qint64 defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toCbor</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>toCbor-1</anchor>
            <arglist>(QCborStreamWriter &amp;writer, QCborValue::EncodingOptions opt) const const</arglist>
        </member>
        <member kind="typedef" type="QCborValue::DiagnosticNotationOption">
            <name>DiagnosticNotationOptions</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>DiagnosticNotationOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QCborValue::EncodingOption">
            <name>EncodingOptions</name>
            <anchorfile>qcborvalue.html</anchorfile>
            <anchor>EncodingOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QChar</name>
        <filename>qchar.html</filename>
        <member kind="enumeration">
            <name>Category</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Mark_NonSpacing</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mark_SpacingCombining</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mark_Enclosing</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Number_DecimalDigit</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Number_Letter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Number_Other</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Separator_Space</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Separator_Line</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Separator_Paragraph</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Other_Control</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Other_Format</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Other_Surrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Other_PrivateUse</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Other_NotAssigned</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Letter_Uppercase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Letter_Lowercase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Letter_Titlecase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Letter_Modifier</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Letter_Other</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Punctuation_Connector</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Punctuation_Dash</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Punctuation_Open</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Punctuation_Close</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Punctuation_InitialQuote</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Punctuation_FinalQuote</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Punctuation_Other</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Symbol_Math</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Symbol_Currency</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Symbol_Modifier</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Symbol_Other</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Category-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Decomposition</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoDecomposition</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Canonical</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Font</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoBreak</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Initial</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Medial</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Final</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Isolated</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Circle</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Super</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sub</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vertical</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Wide</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Narrow</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Small</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Square</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Compat</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fraction</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Decomposition-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Direction</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DirL</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirR</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirEN</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirES</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirET</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirAN</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirCS</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirB</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirS</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirWS</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirON</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirLRE</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirLRO</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirAL</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirRLE</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirRLO</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirPDF</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirNSM</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirBN</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirLRI</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirRLI</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirFSI</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirPDI</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>JoiningType</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>JoiningType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Joining_None</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Joining_Causing</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Joining_Dual</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Joining_Right</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Joining_Left</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Joining_Transparent</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>JoiningType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Script</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Script_Unknown</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Inherited</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Common</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Latin</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Greek</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Cyrillic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Armenian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Hebrew</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Arabic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Syriac</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Thaana</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Devanagari</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Bengali</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Gurmukhi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Gujarati</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Oriya</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Tamil</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Telugu</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Kannada</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Malayalam</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Sinhala</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Thai</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Lao</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Tibetan</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Myanmar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Georgian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Hangul</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Ethiopic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Cherokee</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_CanadianAboriginal</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Ogham</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Runic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Khmer</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Mongolian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Hiragana</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Katakana</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Bopomofo</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Han</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Yi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldItalic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Gothic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Deseret</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Tagalog</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Hanunoo</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Buhid</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Tagbanwa</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Coptic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Limbu</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_TaiLe</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_LinearB</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Ugaritic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Shavian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Osmanya</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Cypriot</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Braille</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Buginese</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_NewTaiLue</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Glagolitic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Tifinagh</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_SylotiNagri</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldPersian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Kharoshthi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Balinese</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Cuneiform</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Phoenician</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_PhagsPa</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Nko</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Sundanese</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Lepcha</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OlChiki</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Vai</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Saurashtra</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_KayahLi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Rejang</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Lycian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Carian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Lydian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Cham</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_TaiTham</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_TaiViet</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Avestan</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_EgyptianHieroglyphs</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Samaritan</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Lisu</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Bamum</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Javanese</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_MeeteiMayek</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_ImperialAramaic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldSouthArabian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_InscriptionalParthian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_InscriptionalPahlavi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldTurkic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Kaithi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Batak</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Brahmi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Mandaic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Chakma</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_MeroiticCursive</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_MeroiticHieroglyphs</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Miao</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Sharada</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_SoraSompeng</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Takri</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_CaucasianAlbanian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_BassaVah</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Duployan</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Elbasan</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Grantha</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_PahawhHmong</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Khojki</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_LinearA</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Mahajani</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Manichaean</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_MendeKikakui</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Modi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Mro</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldNorthArabian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Nabataean</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Palmyrene</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_PauCinHau</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldPermic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_PsalterPahlavi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Siddham</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Khudawadi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Tirhuta</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_WarangCiti</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Ahom</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_AnatolianHieroglyphs</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Hatran</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Multani</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldHungarian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_SignWriting</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Adlam</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Bhaiksuki</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Marchen</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Newa</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Osage</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Tangut</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_MasaramGondi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Nushu</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Soyombo</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_ZanabazarSquare</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Dogra</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_GunjalaGondi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_HanifiRohingya</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Makasar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Medefaidrin</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldSogdian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Sogdian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Elymaic</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Nandinagari</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_NyiakengPuachueHmong</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Wancho</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Chorasmian</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_DivesAkuru</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_KhitanSmallScript</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Yezidi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_CyproMinoan</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OldUyghur</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Tangsa</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Toto</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Vithkuqi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Kawi</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_NagMundari</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Garay</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_GurungKhema</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_KiratRai</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_OlOnal</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Sunuwar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_Todhri</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Script_TuluTigalari</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScriptCount</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SpecialCharacter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Null</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tabulation</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineFeed</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FormFeed</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CarriageReturn</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Space</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nbsp</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SoftHyphen</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReplacementCharacter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ObjectReplacementCharacter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ByteOrderMark</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ByteOrderSwapped</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParagraphSeparator</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineSeparator</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VisualTabCharacter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastValidCodePoint</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>SpecialCharacter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UnicodeVersion</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Unicode_Unassigned</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_1_1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_2_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_2_1_2</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_3_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_3_1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_3_2</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_4_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_4_1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_5_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_5_1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_5_2</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_6_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_6_1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_6_2</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_6_3</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_7_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_8_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_9_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_10_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_11_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_12_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_12_1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_13_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_14_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_15_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_15_1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unicode_16_0</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>UnicodeVersion-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>fromLatin1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>fromLatin1</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>fromUcs2</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>fromUcs2</anchor>
            <arglist>(char16_t c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-1</anchor>
            <arglist>(QChar::SpecialCharacter ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-2</anchor>
            <arglist>(QLatin1Char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-3</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-4</anchor>
            <arglist>(char16_t ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-5</anchor>
            <arglist>(char32_t code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-6</anchor>
            <arglist>(int code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-7</anchor>
            <arglist>(short code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-12</anchor>
            <arglist>(uchar cell, uchar row)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-8</anchor>
            <arglist>(uchar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-9</anchor>
            <arglist>(uint code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-10</anchor>
            <arglist>(ushort code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>QChar-11</anchor>
            <arglist>(wchar_t ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar::Category</type>
            <name>category</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>category-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar::Decomposition</type>
            <name>decompositionTag</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>decompositionTag-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar::Direction</type>
            <name>direction</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>direction-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar::JoiningType</type>
            <name>joiningType</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>joiningType-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar::Script</type>
            <name>script</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>script-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar::UnicodeVersion</type>
            <name>currentUnicodeVersion</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>currentUnicodeVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar::UnicodeVersion</type>
            <name>unicodeVersion</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>unicodeVersion-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;out, QChar chr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>operator-gt-gt-2</anchor>
            <arglist>(QDataStream &amp;in, QChar &amp;chr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>decomposition</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>decomposition-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>R</type>
            <name>fromUcs4</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>fromUcs4</anchor>
            <arglist>(char32_t c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasMirrored</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>hasMirrored-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isDigit</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isDigit-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isHighSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isHighSurrogate-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLetter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLetter-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLetterOrNumber</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLetterOrNumber-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLowSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLowSurrogate-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLower</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLower-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isMark</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isMark-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isNonCharacter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNonCharacter-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isNumber</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNumber-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isPrint</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isPrint-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isPunct</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isPunct-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSpace</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSpace-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSurrogate-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSymbol</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSymbol-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTitleCase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isTitleCase-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isUpper</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isUpper-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QChar &amp;c1, const QChar &amp;c2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QChar &amp;c1, const QChar &amp;c2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QChar &amp;c1, const QChar &amp;c2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QChar &amp;c1, const QChar &amp;c2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QChar &amp;c1, const QChar &amp;c2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QChar &amp;c1, const QChar &amp;c2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>requiresSurrogates</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>requiresSurrogates</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char16_t &amp;</type>
            <name>unicode</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>unicode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char16_t</type>
            <name>highSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>highSurrogate</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char16_t</type>
            <name>lowSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>lowSurrogate</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char32_t</type>
            <name>mirroredChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>mirroredChar-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char32_t</type>
            <name>surrogateToUcs4</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>surrogateToUcs4-1</anchor>
            <arglist>(QChar high, QChar low)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char32_t</type>
            <name>surrogateToUcs4</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>surrogateToUcs4</anchor>
            <arglist>(char16_t high, char16_t low)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char32_t</type>
            <name>toCaseFolded</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toCaseFolded-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char32_t</type>
            <name>toLower</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toLower-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char32_t</type>
            <name>toTitleCase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toTitleCase-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char32_t</type>
            <name>toUpper</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toUpper-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>digitValue</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>digitValue-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>unsigned char</type>
            <name>combiningClass</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>combiningClass-1</anchor>
            <arglist>(char32_t ucs4)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>mirroredChar</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>mirroredChar</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toCaseFolded</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toCaseFolded</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toLower</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toLower</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toTitleCase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toTitleCase</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toUpper</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toUpper</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar::Category</type>
            <name>category</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>category</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar::Decomposition</type>
            <name>decompositionTag</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>decompositionTag</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar::Direction</type>
            <name>direction</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>direction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar::JoiningType</type>
            <name>joiningType</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>joiningType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar::Script</type>
            <name>script</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>script</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar::UnicodeVersion</type>
            <name>unicodeVersion</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>unicodeVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>decomposition</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>decomposition</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasMirrored</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>hasMirrored</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDigit</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isDigit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHighSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isHighSurrogate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLetter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLetter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLetterOrNumber</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLetterOrNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLowSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLowSurrogate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLower</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isLower</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMark</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isMark</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNonCharacter</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNonCharacter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNumber</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPrint</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isPrint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPunct</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isPunct</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSpace</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSpace</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSurrogate</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSurrogate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSymbol</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isSymbol</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTitleCase</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isTitleCase</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUpper</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>isUpper</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>toLatin1</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>toLatin1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char16_t</type>
            <name>unicode</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>unicode-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>digitValue</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>digitValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>cell</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>cell</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar</type>
            <name>row</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>unsigned char</type>
            <name>combiningClass</name>
            <anchorfile>qchar.html</anchorfile>
            <anchor>combiningClass</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QChildEvent</name>
        <filename>qchildevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChildEvent</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>QChildEvent</anchor>
            <arglist>(QEvent::Type type, QObject *child)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>child</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>child</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>added</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>added</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>polished</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>polished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removed</name>
            <anchorfile>qchildevent.html</anchorfile>
            <anchor>removed</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QChronoTimer</name>
        <filename>qchronotimer.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;Qt::TimerType&gt;</type>
            <name>bindableTimerType</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;bool&gt;</type>
            <name>bindableActive</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;bool&gt;</type>
            <name>bindableSingleShot</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;std::chrono::nanoseconds&gt;</type>
            <name>bindableInterval</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChronoTimer</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>QChronoTimer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QChronoTimer</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>QChronoTimer-1</anchor>
            <arglist>(std::chrono::nanoseconds nsec, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>callOnTimeout</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>callOnTimeout</anchor>
            <arglist>(const QObject *context, Functor &amp;&amp;slot, Qt::ConnectionType connectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterval</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>(std::chrono::nanoseconds nsec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSingleShot</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist>(bool singleShot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimerType</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist>(Qt::TimerType atype)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeout</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>timeout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QChronoTimer</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>dtor.QChronoTimer</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerId</type>
            <name>id</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerType</type>
            <name>timerType</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSingleShot</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::nanoseconds</type>
            <name>interval</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::nanoseconds</type>
            <name>remainingTime</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>remainingTime-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="std::chrono::nanoseconds">
            <name>interval</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="std::chrono::nanoseconds">
            <name>remainingTime</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>remainingTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>singleShot</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TimerType">
            <name>timerType</name>
            <anchorfile>qchronotimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCollator</name>
        <filename>qcollator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollator &amp;</type>
            <name>operator=</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QCollator &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollator &amp;</type>
            <name>operator=</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QCollator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>QCollator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>QCollator-1</anchor>
            <arglist>(QCollator &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>QCollator-2</anchor>
            <arglist>(const QCollator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>QCollator-3</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCollatorSortKey</type>
            <name>defaultSortKey</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>defaultSortKey</anchor>
            <arglist>(QStringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>defaultCompare</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>defaultCompare</anchor>
            <arglist>(QStringView s1, QStringView s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIgnorePunctuation</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>setIgnorePunctuation</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumericMode</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>setNumericMode</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCollator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCollator</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>dtor.QCollator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollatorSortKey</type>
            <name>sortKey</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>sortKey</anchor>
            <arglist>(const QString &amp;string) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>ignorePunctuation</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>ignorePunctuation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>numericMode</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>numericMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator()</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()(QStringView s1, QStringView s2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator()</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>operator-28-29-1</anchor>
            <arglist>()(const QString &amp;s1, const QString &amp;s2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(QStringView s1, QStringView s2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>compare-2</anchor>
            <arglist>(const QChar *s1, qsizetype len1, const QChar *s2, qsizetype len2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcollator.html</anchorfile>
            <anchor>compare-1</anchor>
            <arglist>(const QString &amp;s1, const QString &amp;s2) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCollatorSortKey</name>
        <filename>qcollatorsortkey.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollatorSortKey &amp;</type>
            <name>operator=</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QCollatorSortKey &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCollatorSortKey &amp;</type>
            <name>operator=</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QCollatorSortKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollatorSortKey</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>QCollatorSortKey</anchor>
            <arglist>(QCollatorSortKey &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCollatorSortKey</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>QCollatorSortKey-1</anchor>
            <arglist>(const QCollatorSortKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QCollatorSortKey &amp;lhs, const QCollatorSortKey &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCollatorSortKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCollatorSortKey</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>dtor.QCollatorSortKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qcollatorsortkey.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QCollatorSortKey &amp;otherKey) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCommandLineOption</name>
        <filename>qcommandlineoption.html</filename>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>HiddenFromHelp</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShortOptionStyle</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IgnoreOptionsAfter</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption &amp;</type>
            <name>operator=</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QCommandLineOption &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption &amp;</type>
            <name>operator=</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QCommandLineOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption</anchor>
            <arglist>(const QCommandLineOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption-3</anchor>
            <arglist>(const QString &amp;name, const QString &amp;description, const QString &amp;valueName, const QString &amp;defaultValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption-2</anchor>
            <arglist>(const QStringList &amp;names)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>QCommandLineOption-4</anchor>
            <arglist>(const QStringList &amp;names, const QString &amp;description, const QString &amp;valueName, const QString &amp;defaultValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultValue</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setDefaultValue</anchor>
            <arglist>(const QString &amp;defaultValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDefaultValues</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setDefaultValues</anchor>
            <arglist>(const QStringList &amp;defaultValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QCommandLineOption::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueName</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>setValueName</anchor>
            <arglist>(const QString &amp;valueName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCommandLineOption &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCommandLineOption</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>dtor.QCommandLineOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption::Flags</type>
            <name>flags</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>valueName</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>valueName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>defaultValues</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>defaultValues</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>names</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>names</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QCommandLineOption::Flag">
            <name>Flags</name>
            <anchorfile>qcommandlineoption.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCommandLineParser</name>
        <filename>qcommandlineparser.html</filename>
        <member kind="enumeration">
            <name>MessageType</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>MessageType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Information</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>MessageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Error</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>MessageType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>OptionsAfterPositionalArgumentsMode</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>OptionsAfterPositionalArgumentsMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ParseAsOptions</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>OptionsAfterPositionalArgumentsMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParseAsPositionalArguments</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>OptionsAfterPositionalArgumentsMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SingleDashWordOptionMode</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>SingleDashWordOptionMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ParseAsCompactedShortOptions</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>SingleDashWordOptionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParseAsLongOptions</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>SingleDashWordOptionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption</type>
            <name>addHelpOption</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addHelpOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCommandLineOption</type>
            <name>addVersionOption</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addVersionOption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCommandLineParser</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>QCommandLineParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addOption</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addOption</anchor>
            <arglist>(const QCommandLineOption &amp;option)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addOptions</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addOptions</anchor>
            <arglist>(const QList&lt;QCommandLineOption&gt; &amp;options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>parse</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>parse</anchor>
            <arglist>(const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addPositionalArgument</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>addPositionalArgument</anchor>
            <arglist>(const QString &amp;name, const QString &amp;description, const QString &amp;syntax)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearPositionalArguments</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>clearPositionalArguments</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>process</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>process-1</anchor>
            <arglist>(const QCoreApplication &amp;app)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>process</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>process</anchor>
            <arglist>(const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setApplicationDescription</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>setApplicationDescription</anchor>
            <arglist>(const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOptionsAfterPositionalArgumentsMode</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>setOptionsAfterPositionalArgumentsMode</anchor>
            <arglist>(QCommandLineParser::OptionsAfterPositionalArgumentsMode parsingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSingleDashWordOptionMode</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>setSingleDashWordOptionMode</anchor>
            <arglist>(QCommandLineParser::SingleDashWordOptionMode singleDashWordOptionMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showHelp</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>showHelp</anchor>
            <arglist>(int exitCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>showMessageAndExit</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>showMessageAndExit</anchor>
            <arglist>(QCommandLineParser::MessageType type, const QString &amp;message, int exitCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>showVersion</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>showVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCommandLineParser</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>dtor.QCommandLineParser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>applicationDescription</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>applicationDescription</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorText</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>errorText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>helpText</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>helpText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>(const QCommandLineOption &amp;option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;optionName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>optionNames</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>optionNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>positionalArguments</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>positionalArguments</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>unknownOptionNames</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>unknownOptionNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>values</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>values-1</anchor>
            <arglist>(const QCommandLineOption &amp;option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>values</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>values</anchor>
            <arglist>(const QString &amp;optionName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSet</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>isSet-1</anchor>
            <arglist>(const QCommandLineOption &amp;option) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSet</name>
            <anchorfile>qcommandlineparser.html</anchorfile>
            <anchor>isSet</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QConcatenateTablesProxyModel</name>
        <filename>qconcatenatetablesproxymodel.html</filename>
        <base>QAbstractItemModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConcatenateTablesProxyModel</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>QConcatenateTablesProxyModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex, const QMap&lt;int, QVariant&gt; &amp;roles) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addSourceModel</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>addSourceModel</anchor>
            <arglist>(QAbstractItemModel *sourceModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeSourceModel</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>removeSourceModel</anchor>
            <arglist>(QAbstractItemModel *sourceModel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QConcatenateTablesProxyModel</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>dtor.QConcatenateTablesProxyModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QHash&lt;int, QByteArray&gt;</type>
            <name>roleNames</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>roleNames</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QAbstractItemModel *&gt;</type>
            <name>sourceModels</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>sourceModels</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>mapFromSource</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>mapFromSource</anchor>
            <arglist>(const QModelIndex &amp;sourceIndex) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>mapToSource</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>mapToSource</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>span</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canDropMimeData</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>canDropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qconcatenatetablesproxymodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QConstIterator</name>
        <filename>qconstiterator.html</filename>
        <base>QBaseIterator</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QConstIterator</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>QConstIterator</anchor>
            <arglist>(const QIterable&lt;Container&gt; *iterable, void *iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt; &amp;</type>
            <name>operator++</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt; &amp;</type>
            <name>operator--</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt;</type>
            <name>operator++</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt;</type>
            <name>operator--</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt;</type>
            <name>operator+</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt;</type>
            <name>operator-</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QConstIterator&lt;Container&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QConstIterator&lt;Container&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qconstiterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QConstIterator&lt;Container&gt; &amp;j) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContactsPermission</name>
        <filename>qcontactspermission.html</filename>
        <member kind="enumeration">
            <name>AccessMode</name>
            <anchorfile>qcontactspermission.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qcontactspermission.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qcontactspermission.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccessMode</name>
            <anchorfile>qcontactspermission.html</anchorfile>
            <anchor>setAccessMode</anchor>
            <arglist>(QContactsPermission::AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContactsPermission::AccessMode</type>
            <name>accessMode</name>
            <anchorfile>qcontactspermission.html</anchorfile>
            <anchor>accessMode</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QContiguousCache</name>
        <filename>qcontiguouscache.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContiguousCache</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>QContiguousCache</anchor>
            <arglist>(const QContiguousCache&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QContiguousCache</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>QContiguousCache-1</anchor>
            <arglist>(qsizetype capacity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContiguousCache&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QContiguousCache&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QContiguousCache&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QContiguousCache&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeFirst</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>takeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeLast</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>takeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(qsizetype i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>normalizeIndexes</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>normalizeIndexes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCapacity</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>setCapacity</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QContiguousCache&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QContiguousCache</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>dtor.QContiguousCache</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>areIndexesValid</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>areIndexesValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>containsIndex</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>containsIndex</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFull</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>isFull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QContiguousCache&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QContiguousCache&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>at</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>available</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>available</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capacity</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>firstIndex</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>firstIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndex</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>lastIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qcontiguouscache.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCoreApplication</name>
        <filename>qcoreapplication.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QAbstractEventDispatcher *</type>
            <name>eventDispatcher</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>eventDispatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QCoreApplication *</type>
            <name>instance</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCoreApplication</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>QCoreApplication</anchor>
            <arglist>(int &amp;argc, char **argv)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationDirPath</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationDirPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationFilePath</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationFilePath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>applicationVersion</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationVersion-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>organizationDomain</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationDomain-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>organizationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>translate</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const char *context, const char *sourceText, const char *disambiguation, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>arguments</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>arguments</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>libraryPaths</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>libraryPaths</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_COREAPP_STARTUP_FUNCTION</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>Q_COREAPP_STARTUP_FUNCTION</anchor>
            <arglist>(QtStartUpFunction ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_TR_FUNCTIONS</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>Q_DECLARE_TR_FUNCTIONS</anchor>
            <arglist>(context)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PermissionStatus</type>
            <name>checkPermission</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>checkPermission</anchor>
            <arglist>(const QPermission &amp;permission)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>closingDown</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>closingDown</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>installTranslator</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>installTranslator</anchor>
            <arglist>(QTranslator *translationFile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isQuitLockEnabled</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>quitLockEnabled-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSetuidAllowed</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>isSetuidAllowed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>notify</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>notify</anchor>
            <arglist>(QObject *receiver, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>removeTranslator</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>removeTranslator</anchor>
            <arglist>(QTranslator *translationFile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>sendEvent</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>sendEvent</anchor>
            <arglist>(QObject *receiver, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>startingUp</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>startingUp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>testAttribute</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>testAttribute</anchor>
            <arglist>(Qt::ApplicationAttribute attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qint64</type>
            <name>applicationPid</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationPid</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToQuit</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>aboutToQuit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addLibraryPath</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>addLibraryPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>applicationNameChanged</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>applicationVersionChanged</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationVersion-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>exit</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>exit</anchor>
            <arglist>(int returnCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installNativeEventFilter</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>installNativeEventFilter</anchor>
            <arglist>(QAbstractNativeEventFilter *filterObj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>organizationDomainChanged</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationDomain-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>organizationNameChanged</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>postEvent</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>postEvent</anchor>
            <arglist>(QObject *receiver, QEvent *event, int priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>processEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>processEvents</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>processEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>processEvents-1</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags, QDeadlineTimer deadline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>processEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>processEvents-2</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags, int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qAddPostRoutine</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>qAddPostRoutine</anchor>
            <arglist>(QtCleanUpFunction ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qRemovePostRoutine</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>qRemovePostRoutine</anchor>
            <arglist>(QtCleanUpFunction ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>quit</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>quit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removeLibraryPath</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>removeLibraryPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeNativeEventFilter</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>removeNativeEventFilter</anchor>
            <arglist>(QAbstractNativeEventFilter *filterObject)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>removePostedEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>removePostedEvents</anchor>
            <arglist>(QObject *receiver, int eventType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestPermission</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>requestPermission</anchor>
            <arglist>(const QPermission &amp;permission, Functor &amp;&amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestPermission</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>requestPermission-1</anchor>
            <arglist>(const QPermission &amp;permission, const QObject *context, Functor functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>sendPostedEvents</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>sendPostedEvents</anchor>
            <arglist>(QObject *receiver, int event_type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationName-prop</anchor>
            <arglist>(const QString &amp;application)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setApplicationVersion</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationVersion-prop</anchor>
            <arglist>(const QString &amp;version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setAttribute</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>setAttribute</anchor>
            <arglist>(Qt::ApplicationAttribute attribute, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setEventDispatcher</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>setEventDispatcher</anchor>
            <arglist>(QAbstractEventDispatcher *eventDispatcher)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setLibraryPaths</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>setLibraryPaths</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setOrganizationDomain</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationDomain-prop</anchor>
            <arglist>(const QString &amp;orgDomain)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setOrganizationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationName-prop</anchor>
            <arglist>(const QString &amp;orgName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setQuitLockEnabled</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>quitLockEnabled-prop</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setSetuidAllowed</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>setSetuidAllowed</anchor>
            <arglist>(bool allow)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QCoreApplication</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>dtor.QCoreApplication</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="property" type="QString">
            <name>applicationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>applicationVersion</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>applicationVersion-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>organizationDomain</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationDomain-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>organizationName</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>organizationName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>quitLockEnabled</name>
            <anchorfile>qcoreapplication.html</anchorfile>
            <anchor>quitLockEnabled-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QCryptographicHash</name>
        <filename>qcryptographichash.html</filename>
        <member kind="enumeration">
            <name>Algorithm</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Md4</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Md5</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha1</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha224</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha256</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha384</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha512</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Keccak_224</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Keccak_256</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Keccak_384</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Keccak_512</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RealSha3_224</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RealSha3_256</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RealSha3_384</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RealSha3_512</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha3_224</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha3_256</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha3_384</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha3_512</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blake2b_160</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blake2b_256</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blake2b_384</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blake2b_512</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blake2s_128</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blake2s_160</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blake2s_224</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blake2s_256</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NumAlgorithms</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>Algorithm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>hash</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hash</anchor>
            <arglist>(QByteArrayView data, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hashInto</anchor>
            <arglist>(QSpan&lt;char&gt; buffer, QByteArrayView data, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hashInto-1</anchor>
            <arglist>(QSpan&lt;char&gt; buffer, QSpan&lt;const QByteArrayView&gt; data, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hashInto-2</anchor>
            <arglist>(QSpan&lt;std::byte&gt; buffer, QByteArrayView data, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hashInto-3</anchor>
            <arglist>(QSpan&lt;std::byte&gt; buffer, QSpan&lt;const QByteArrayView&gt; data, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hashInto-4</anchor>
            <arglist>(QSpan&lt;uchar&gt; buffer, QByteArrayView data, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hashInto-5</anchor>
            <arglist>(QSpan&lt;uchar&gt; buffer, QSpan&lt;const QByteArrayView&gt; data, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCryptographicHash &amp;</type>
            <name>operator=</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QCryptographicHash &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCryptographicHash</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>QCryptographicHash</anchor>
            <arglist>(QCryptographicHash &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QCryptographicHash</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>QCryptographicHash-1</anchor>
            <arglist>(QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addData</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>addData-1</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsAlgorithm</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>supportsAlgorithm</anchor>
            <arglist>(QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>hashLength</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>hashLength</anchor>
            <arglist>(QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>addData</anchor>
            <arglist>(QByteArrayView bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qcryptographichash-obsolete.html</anchorfile>
            <anchor>addData-2</anchor>
            <arglist>(const char *data, qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QCryptographicHash &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QCryptographicHash</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>dtor.QCryptographicHash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>result</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>resultView</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>resultView</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QCryptographicHash::Algorithm</type>
            <name>algorithm</name>
            <anchorfile>qcryptographichash.html</anchorfile>
            <anchor>algorithm</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDataStream</name>
        <filename>qdatastream.html</filename>
        <base>QIODeviceBase</base>
        <member kind="enumeration">
            <name>ByteOrder</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>ByteOrder-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BigEndian</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>ByteOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LittleEndian</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>ByteOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FloatingPointPrecision</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>FloatingPointPrecision-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SinglePrecision</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>FloatingPointPrecision-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DoublePrecision</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>FloatingPointPrecision-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Ok</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadPastEnd</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadCorruptData</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteFailed</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeLimitExceeded</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Version</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Qt_1_0</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_2_0</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_2_1</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_3_0</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_3_1</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_3_3</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_0</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_1</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_2</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_3</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_4</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_5</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_6</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_7</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_8</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_4_9</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_0</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_1</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_2</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_3</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_4</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_5</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_6</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_7</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_8</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_9</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_10</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_11</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_12</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_13</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_14</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_5_15</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_0</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_1</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_2</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_3</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_4</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_5</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_6</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_7</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_8</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_6_9</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qt_DefaultCompiledVersion</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-16</anchor>
            <arglist>(QDataStream &amp;out, const std::pair&lt;T1, T2&gt; &amp;pair)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(bool i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(char16_t c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(char32_t c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(const char *s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-6</anchor>
            <arglist>(double f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-7</anchor>
            <arglist>(float f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-8</anchor>
            <arglist>(qint16 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-9</anchor>
            <arglist>(qint32 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-10</anchor>
            <arglist>(qint64 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(qint8 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-11</anchor>
            <arglist>(quint16 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-12</anchor>
            <arglist>(quint32 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-13</anchor>
            <arglist>(quint64 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-14</anchor>
            <arglist>(quint8 i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-lt-lt-15</anchor>
            <arglist>(std::nullptr_t ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-16</anchor>
            <arglist>(QDataStream &amp;in, std::pair&lt;T1, T2&gt; &amp;pair)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(bool &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-3</anchor>
            <arglist>(char *&amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-4</anchor>
            <arglist>(char16_t &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-5</anchor>
            <arglist>(char32_t &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-6</anchor>
            <arglist>(double &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-7</anchor>
            <arglist>(float &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-8</anchor>
            <arglist>(qint16 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-9</anchor>
            <arglist>(qint32 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-10</anchor>
            <arglist>(qint64 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(qint8 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-11</anchor>
            <arglist>(quint16 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-12</anchor>
            <arglist>(quint32 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-13</anchor>
            <arglist>(quint64 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-14</anchor>
            <arglist>(quint8 &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>operator-gt-gt-15</anchor>
            <arglist>(std::nullptr_t &amp;ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>readBytes</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>readBytes</anchor>
            <arglist>(char *&amp;s, qint64 &amp;l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>readBytes</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>readBytes-1</anchor>
            <arglist>(char *&amp;s, uint &amp;l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>writeBytes</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>writeBytes</anchor>
            <arglist>(const char *s, qint64 len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>QDataStream</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>QDataStream-3</anchor>
            <arglist>(QByteArray *a, QIODeviceBase::OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>QDataStream-1</anchor>
            <arglist>(QIODevice *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>QDataStream-2</anchor>
            <arglist>(const QByteArray &amp;a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>commitTransaction</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>commitTransaction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readRawData</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>readRawData</anchor>
            <arglist>(char *s, qint64 len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>skipRawData</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>skipRawData</anchor>
            <arglist>(qint64 len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>writeRawData</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>writeRawData</anchor>
            <arglist>(const char *s, qint64 len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>abortTransaction</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>abortTransaction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetStatus</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>resetStatus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rollbackTransaction</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>rollbackTransaction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setByteOrder</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setByteOrder</anchor>
            <arglist>(QDataStream::ByteOrder bo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFloatingPointPrecision</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setFloatingPointPrecision</anchor>
            <arglist>(QDataStream::FloatingPointPrecision precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(QDataStream::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVersion</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>setVersion</anchor>
            <arglist>(int v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startTransaction</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>startTransaction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDataStream</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>dtor.QDataStream</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream::ByteOrder</type>
            <name>byteOrder</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>byteOrder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream::FloatingPointPrecision</type>
            <name>floatingPointPrecision</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>floatingPointPrecision</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream::Status</type>
            <name>status</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>version</name>
            <anchorfile>qdatastream.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDate</name>
        <filename>qdate.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDataStream &amp;out, QDate date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(QDataStream &amp;in, QDate &amp;date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>currentDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>currentDate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromJulianDay</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromJulianDay</anchor>
            <arglist>(qint64 jd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromStdSysDays</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromStdSysDays</anchor>
            <arglist>(const std::chrono::sys_days &amp;days)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-3</anchor>
            <arglist>(QStringView string, QStringView format, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-4</anchor>
            <arglist>(QStringView string, QStringView format, int baseYear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-9</anchor>
            <arglist>(QStringView string, QStringView format, int baseYear, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-2</anchor>
            <arglist>(QStringView string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-5</anchor>
            <arglist>(const QString &amp;string, QStringView format, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-6</anchor>
            <arglist>(const QString &amp;string, QStringView format, int baseYear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-10</anchor>
            <arglist>(const QString &amp;string, QStringView format, int baseYear, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-7</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-8</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, int baseYear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDate</type>
            <name>fromString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>fromString-1</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, int baseYear, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>QDate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>QDate-5</anchor>
            <arglist>(int y, int m, int d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>QDate-1</anchor>
            <arglist>(std::chrono::year_month_day date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>QDate-2</anchor>
            <arglist>(std::chrono::year_month_day_last date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>QDate-3</anchor>
            <arglist>(std::chrono::year_month_weekday date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>QDate-4</anchor>
            <arglist>(std::chrono::year_month_weekday_last date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLeapYear</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>isLeapYear</anchor>
            <arglist>(int year)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>isValid-1</anchor>
            <arglist>(int year, int month, int day)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QDate &amp;lhs, const QDate &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QDate &amp;lhs, const QDate &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QDate &amp;lhs, const QDate &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QDate &amp;lhs, const QDate &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QDate &amp;lhs, const QDate &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QDate &amp;lhs, const QDate &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>setDate</anchor>
            <arglist>(int year, int month, int day)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>setDate-1</anchor>
            <arglist>(int year, int month, int day, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addDays</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addDays</anchor>
            <arglist>(qint64 ndays) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addDuration</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addDuration</anchor>
            <arglist>(std::chrono::days ndays) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addMonths</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addMonths-1</anchor>
            <arglist>(int nmonths) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addMonths</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addMonths</anchor>
            <arglist>(int nmonths, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addYears</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addYears-1</anchor>
            <arglist>(int nyears) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>addYears</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>addYears</anchor>
            <arglist>(int nyears, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>endOfDay</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>endOfDay-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>endOfDay</name>
            <anchorfile>qdate-obsolete.html</anchorfile>
            <anchor>endOfDay-2</anchor>
            <arglist>(Qt::TimeSpec spec, int offsetSeconds) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>endOfDay</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>endOfDay</anchor>
            <arglist>(const QTimeZone &amp;zone) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>startOfDay</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>startOfDay-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>startOfDay</name>
            <anchorfile>qdate-obsolete.html</anchorfile>
            <anchor>startOfDay-2</anchor>
            <arglist>(Qt::TimeSpec spec, int offsetSeconds) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>startOfDay</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>startOfDay</anchor>
            <arglist>(const QTimeZone &amp;zone) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toString-2</anchor>
            <arglist>(QStringView format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QStringView format, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toString-3</anchor>
            <arglist>(Qt::DateFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toString-4</anchor>
            <arglist>(const QString &amp;format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toString-1</anchor>
            <arglist>(const QString &amp;format, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>day</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>day-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>day</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>day</anchor>
            <arglist>(QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dayOfWeek</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>dayOfWeek-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dayOfWeek</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>dayOfWeek</anchor>
            <arglist>(QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dayOfYear</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>dayOfYear-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dayOfYear</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>dayOfYear</anchor>
            <arglist>(QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daysInMonth</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>daysInMonth-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daysInMonth</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>daysInMonth</anchor>
            <arglist>(QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daysInYear</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>daysInYear-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daysInYear</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>daysInYear</anchor>
            <arglist>(QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>month</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>month-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>month</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>month</anchor>
            <arglist>(QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>weekNumber</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>weekNumber</anchor>
            <arglist>(int *yearNumber) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>year</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>year-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>year</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>year</anchor>
            <arglist>(QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>daysTo</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>daysTo</anchor>
            <arglist>(QDate d) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>toJulianDay</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toJulianDay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::sys_days</type>
            <name>toStdSysDays</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>toStdSysDays</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getDate</name>
            <anchorfile>qdate.html</anchorfile>
            <anchor>getDate</anchor>
            <arglist>(int *year, int *month, int *day) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDateTime</name>
        <filename>qdatetime.html</filename>
        <member kind="enumeration">
            <name>TransitionResolution</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Reject</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RelativeToBefore</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RelativeToAfter</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferBefore</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferAfter</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferStandard</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferDaylightSaving</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LegacyBehavior</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>TransitionResolution-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>YearRange</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>YearRange-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>First</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>YearRange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Last</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>YearRange-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDataStream &amp;out, const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(QDataStream &amp;in, QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime &amp;</type>
            <name>operator+=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(std::chrono::milliseconds duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime &amp;</type>
            <name>operator-=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(std::chrono::milliseconds duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime &amp;</type>
            <name>operator=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDateTime &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>currentDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>currentDateTime-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>currentDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>currentDateTime</anchor>
            <arglist>(const QTimeZone &amp;zone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>currentDateTimeUtc</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>currentDateTimeUtc</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromCFDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromCFDate</anchor>
            <arglist>(CFDateRef date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromMSecsSinceEpoch-1</anchor>
            <arglist>(qint64 msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromMSecsSinceEpoch</name>
            <anchorfile>qdatetime-obsolete.html</anchorfile>
            <anchor>fromMSecsSinceEpoch-2</anchor>
            <arglist>(qint64 msecs, Qt::TimeSpec spec, int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromMSecsSinceEpoch</anchor>
            <arglist>(qint64 msecs, const QTimeZone &amp;timeZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromNSDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromNSDate</anchor>
            <arglist>(const NSDate *date)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromSecsSinceEpoch-1</anchor>
            <arglist>(qint64 secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromSecsSinceEpoch</name>
            <anchorfile>qdatetime-obsolete.html</anchorfile>
            <anchor>fromSecsSinceEpoch-2</anchor>
            <arglist>(qint64 secs, Qt::TimeSpec spec, int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromSecsSinceEpoch</anchor>
            <arglist>(qint64 secs, const QTimeZone &amp;timeZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromStdLocalTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromStdLocalTime</anchor>
            <arglist>(const std::chrono::local_time&lt;std::chrono::milliseconds&gt; &amp;time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromStdTimePoint</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromStdTimePoint</anchor>
            <arglist>(const std::chrono::local_time&lt;std::chrono::milliseconds&gt; &amp;time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromStdTimePoint</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromStdTimePoint-1</anchor>
            <arglist>(const std::chrono::time_point&lt;Clock, Duration&gt; &amp;time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromStdTimePoint</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromStdTimePoint-2</anchor>
            <arglist>(std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::milliseconds&gt; time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromStdZonedTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromStdZonedTime</anchor>
            <arglist>(const int &amp;time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-3</anchor>
            <arglist>(QStringView string, QStringView format, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-4</anchor>
            <arglist>(QStringView string, QStringView format, int baseYear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-9</anchor>
            <arglist>(QStringView string, QStringView format, int baseYear, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-2</anchor>
            <arglist>(QStringView string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-5</anchor>
            <arglist>(const QString &amp;string, QStringView format, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-6</anchor>
            <arglist>(const QString &amp;string, QStringView format, int baseYear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-10</anchor>
            <arglist>(const QString &amp;string, QStringView format, int baseYear, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-7</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-8</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, int baseYear)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDateTime</type>
            <name>fromString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>fromString-1</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, int baseYear, QCalendar cal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>operator+</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QDateTime &amp;dateTime, std::chrono::milliseconds duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>operator+</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(std::chrono::milliseconds duration, const QDateTime &amp;dateTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>operator-</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QDateTime &amp;dateTime, std::chrono::milliseconds duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-5</anchor>
            <arglist>(QDate date, QTime time, QDateTime::TransitionResolution resolve)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime-obsolete.html</anchorfile>
            <anchor>QDateTime-3</anchor>
            <arglist>(QDate date, QTime time, Qt::TimeSpec spec, int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-4</anchor>
            <arglist>(QDate date, QTime time, const QTimeZone &amp;timeZone, QDateTime::TransitionResolution resolve)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-1</anchor>
            <arglist>(QDateTime &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>QDateTime-2</anchor>
            <arglist>(const QDateTime &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QDateTime &amp;lhs, const QDateTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QDateTime &amp;lhs, const QDateTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QDateTime &amp;lhs, const QDateTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QDateTime &amp;lhs, const QDateTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QDateTime &amp;lhs, const QDateTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QDateTime &amp;lhs, const QDateTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qint64</type>
            <name>currentMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>currentMSecsSinceEpoch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qint64</type>
            <name>currentSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>currentSecsSinceEpoch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::milliseconds</type>
            <name>operator-</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QDateTime &amp;lhs, const QDateTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setDate</anchor>
            <arglist>(QDate date, QDateTime::TransitionResolution resolve)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setMSecsSinceEpoch</anchor>
            <arglist>(qint64 msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffsetFromUtc</name>
            <anchorfile>qdatetime-obsolete.html</anchorfile>
            <anchor>setOffsetFromUtc</anchor>
            <arglist>(int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setSecsSinceEpoch</anchor>
            <arglist>(qint64 secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setTime</anchor>
            <arglist>(QTime time, QDateTime::TransitionResolution resolve)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeSpec</name>
            <anchorfile>qdatetime-obsolete.html</anchorfile>
            <anchor>setTimeSpec</anchor>
            <arglist>(Qt::TimeSpec spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimeZone</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>setTimeZone</anchor>
            <arglist>(const QTimeZone &amp;toZone, QDateTime::TransitionResolution resolve)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDateTime &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDateTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>dtor.QDateTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFDateRef</type>
            <name>toCFDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toCFDate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSDate *</type>
            <name>toNSDate</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toNSDate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>date</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>date</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addDays</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addDays</anchor>
            <arglist>(qint64 ndays) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addDuration</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addDuration</anchor>
            <arglist>(std::chrono::milliseconds msecs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addMSecs</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addMSecs</anchor>
            <arglist>(qint64 msecs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addMonths</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addMonths</anchor>
            <arglist>(int nmonths) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addSecs</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addSecs</anchor>
            <arglist>(qint64 s) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>addYears</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>addYears</anchor>
            <arglist>(int nyears) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toLocalTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toLocalTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toOffsetFromUtc</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toOffsetFromUtc</anchor>
            <arglist>(int offsetSeconds) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toTimeSpec</name>
            <anchorfile>qdatetime-obsolete.html</anchorfile>
            <anchor>toTimeSpec</anchor>
            <arglist>(Qt::TimeSpec spec) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toTimeZone</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toTimeZone</anchor>
            <arglist>(const QTimeZone &amp;timeZone) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toUTC</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toUTC</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>timeZoneAbbreviation</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>timeZoneAbbreviation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toString-2</anchor>
            <arglist>(QStringView format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QStringView format, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toString-3</anchor>
            <arglist>(Qt::DateFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toString-4</anchor>
            <arglist>(const QString &amp;format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toString-1</anchor>
            <arglist>(const QString &amp;format, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>time</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>time</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone</type>
            <name>timeRepresentation</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>timeRepresentation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone</type>
            <name>timeZone</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>timeZone</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimeSpec</type>
            <name>timeSpec</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>timeSpec</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDaylightTime</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>isDaylightTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>offsetFromUtc</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>offsetFromUtc</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>daysTo</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>daysTo</anchor>
            <arglist>(const QDateTime &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>msecsTo</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>msecsTo</anchor>
            <arglist>(const QDateTime &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>secsTo</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>secsTo</anchor>
            <arglist>(const QDateTime &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>toMSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toMSecsSinceEpoch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>toSecsSinceEpoch</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toSecsSinceEpoch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::sys_seconds</type>
            <name>toStdSysSeconds</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toStdSysSeconds</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::sys_time&lt;std::chrono::milliseconds&gt;</type>
            <name>toStdSysMilliseconds</name>
            <anchorfile>qdatetime.html</anchorfile>
            <anchor>toStdSysMilliseconds</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDeadlineTimer</name>
        <filename>qdeadlinetimer.html</filename>
        <member kind="enumeration">
            <name>ForeverConstant</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>ForeverConstant-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Forever</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>ForeverConstant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer &amp;</type>
            <name>operator+=</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qint64 msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer &amp;</type>
            <name>operator-=</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qint64 msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer &amp;</type>
            <name>operator=</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(std::chrono::duration&lt;Rep, Period&gt; remaining)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer &amp;</type>
            <name>operator=</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(std::chrono::time_point&lt;Clock, Duration&gt; deadline_)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDeadlineTimer</type>
            <name>addNSecs</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>addNSecs</anchor>
            <arglist>(QDeadlineTimer dt, qint64 nsecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDeadlineTimer</type>
            <name>current</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>current</anchor>
            <arglist>(Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer</type>
            <name>operator+</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QDeadlineTimer dt, qint64 msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer</type>
            <name>operator+</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(qint64 msecs, QDeadlineTimer dt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDeadlineTimer</type>
            <name>operator-</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QDeadlineTimer dt, qint64 msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDeadlineTimer</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>QDeadlineTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDeadlineTimer</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>QDeadlineTimer-2</anchor>
            <arglist>(QDeadlineTimer::ForeverConstant, Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDeadlineTimer</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>QDeadlineTimer-1</anchor>
            <arglist>(Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDeadlineTimer</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>QDeadlineTimer-3</anchor>
            <arglist>(qint64 msecs, Qt::TimerType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDeadlineTimer</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>QDeadlineTimer-4</anchor>
            <arglist>(std::chrono::duration&lt;Rep, Period&gt; remaining, Qt::TimerType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDeadlineTimer</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>QDeadlineTimer-5</anchor>
            <arglist>(std::chrono::time_point&lt;Clock, Duration&gt; deadline, Qt::TimerType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QDeadlineTimer &amp;lhs, const QDeadlineTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QDeadlineTimer &amp;lhs, const QDeadlineTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QDeadlineTimer &amp;lhs, const QDeadlineTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QDeadlineTimer &amp;lhs, const QDeadlineTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QDeadlineTimer &amp;lhs, const QDeadlineTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QDeadlineTimer &amp;lhs, const QDeadlineTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeadline</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>setDeadline</anchor>
            <arglist>(qint64 msecs, Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDeadline</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>setDeadline-1</anchor>
            <arglist>(std::chrono::time_point&lt;Clock, Duration&gt; deadline, Qt::TimerType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreciseDeadline</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>setPreciseDeadline</anchor>
            <arglist>(qint64 secs, qint64 nsecs, Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPreciseRemainingTime</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>setPreciseRemainingTime</anchor>
            <arglist>(qint64 secs, qint64 nsecs, Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRemainingTime</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>setRemainingTime</anchor>
            <arglist>(qint64 msecs, Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRemainingTime</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>setRemainingTime-1</anchor>
            <arglist>(std::chrono::duration&lt;Rep, Period&gt; remaining, Qt::TimerType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimerType</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>setTimerType</anchor>
            <arglist>(Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDeadlineTimer &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerType</type>
            <name>timerType</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>timerType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasExpired</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>hasExpired</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isForever</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>isForever</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>deadline</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>deadline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>deadlineNSecs</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>deadlineNSecs</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>remainingTime</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>remainingTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>remainingTimeNSecs</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>remainingTimeNSecs</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::nanoseconds</type>
            <name>remainingTimeAsDuration</name>
            <anchorfile>qdeadlinetimer.html</anchorfile>
            <anchor>remainingTimeAsDuration</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDebug</name>
        <filename>qdebug.html</filename>
        <base>QIODeviceBase</base>
        <member kind="enumeration">
            <name>VerbosityLevel</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>VerbosityLevel-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MinimumVerbosity</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>VerbosityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DefaultVerbosity</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>VerbosityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaximumVerbosity</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>VerbosityLevel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>toBytes</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>toBytes</anchor>
            <arglist>(const T &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>maybeQuote</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>maybeQuote</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>maybeSpace</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>maybeSpace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>noquote</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>noquote</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>nospace</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>nospace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QByteArrayView t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QChar t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QLatin1StringView t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(QStringView s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(QUtf8StringView s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-6</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-7</anchor>
            <arglist>(bool t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-8</anchor>
            <arglist>(char t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-9</anchor>
            <arglist>(char16_t t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-10</anchor>
            <arglist>(char32_t t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-11</anchor>
            <arglist>(const QByteArray &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-12</anchor>
            <arglist>(const QString &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-13</anchor>
            <arglist>(const char *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-14</anchor>
            <arglist>(const char16_t *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-15</anchor>
            <arglist>(const std::basic_string&lt;Char, Args...&gt; &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-16</anchor>
            <arglist>(const std::optional&lt;T&gt; &amp;opt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-17</anchor>
            <arglist>(const std::tuple&lt;Ts...&gt; &amp;tuple)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-18</anchor>
            <arglist>(const void *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-19</anchor>
            <arglist>(double t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-20</anchor>
            <arglist>(float t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-21</anchor>
            <arglist>(int t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-22</anchor>
            <arglist>(long t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-23</anchor>
            <arglist>(qint64 t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-24</anchor>
            <arglist>(quint64 t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-25</anchor>
            <arglist>(short t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-26</anchor>
            <arglist>(std::basic_string_view&lt;Char, Args...&gt; s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-27</anchor>
            <arglist>(std::chrono::duration&lt;Rep, Period&gt; duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-28</anchor>
            <arglist>(std::nullopt_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-29</anchor>
            <arglist>(unsigned int t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-30</anchor>
            <arglist>(unsigned long t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-31</anchor>
            <arglist>(unsigned short t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>operator=</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QDebug &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>quote</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>quote</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>resetFormat</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>resetFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>space</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>space</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug &amp;</type>
            <name>verbosity</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>verbosity-1</anchor>
            <arglist>(int verbosityLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-32</anchor>
            <arglist>(QDebug debug, T t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-37</anchor>
            <arglist>(QDebug debug, const QContiguousCache&lt;T&gt; &amp;cache)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-38</anchor>
            <arglist>(QDebug debug, const QFlags&lt;T&gt; &amp;flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-39</anchor>
            <arglist>(QDebug debug, const QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-40</anchor>
            <arglist>(QDebug debug, const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-41</anchor>
            <arglist>(QDebug debug, const QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-42</anchor>
            <arglist>(QDebug debug, const QMultiHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-43</anchor>
            <arglist>(QDebug debug, const QMultiMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-44</anchor>
            <arglist>(QDebug debug, const QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-45</anchor>
            <arglist>(QDebug debug, const QVarLengthArray&lt;T, P&gt; &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-46</anchor>
            <arglist>(QDebug debug, const std::array&lt;T, N&gt; &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-47</anchor>
            <arglist>(QDebug debug, const std::list&lt;T, Alloc&gt; &amp;vec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-48</anchor>
            <arglist>(QDebug debug, const std::map&lt;Key, T, Compare, Alloc&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-49</anchor>
            <arglist>(QDebug debug, const std::multimap&lt;Key, T, Compare, Alloc&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-50</anchor>
            <arglist>(QDebug debug, const std::multiset&lt;Key, Compare, Alloc&gt; &amp;multiset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-51</anchor>
            <arglist>(QDebug debug, const std::pair&lt;T1, T2&gt; &amp;pair)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-52</anchor>
            <arglist>(QDebug debug, const std::set&lt;Key, Compare, Alloc&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-53</anchor>
            <arglist>(QDebug debug, const std::unordered_map&lt;Key, T, Hash, KeyEqual, Alloc&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-54</anchor>
            <arglist>(QDebug debug, const std::unordered_set&lt;Key, Hash, KeyEqual, Alloc&gt; &amp;unordered_set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>operator-lt-lt-55</anchor>
            <arglist>(QDebug debug, const std::vector&lt;T, Alloc&gt; &amp;vec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>QDebug</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>QDebug-1</anchor>
            <arglist>(QString *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>QDebug-2</anchor>
            <arglist>(QtMsgType t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>QDebug-3</anchor>
            <arglist>(const QDebug &amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(const T &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoInsertSpaces</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>setAutoInsertSpaces</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuoteStrings</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>setQuoteStrings</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVerbosity</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>setVerbosity</anchor>
            <arglist>(int verbosityLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDebug &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDebug</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>dtor.QDebug</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoInsertSpaces</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>autoInsertSpaces</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>quoteStrings</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>quoteStrings</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>verbosity</name>
            <anchorfile>qdebug.html</anchorfile>
            <anchor>verbosity</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDebugStateSaver</name>
        <filename>qdebugstatesaver.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDebugStateSaver</name>
            <anchorfile>qdebugstatesaver.html</anchorfile>
            <anchor>QDebugStateSaver</anchor>
            <arglist>(QDebug &amp;dbg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDebugStateSaver</name>
            <anchorfile>qdebugstatesaver.html</anchorfile>
            <anchor>dtor.QDebugStateSaver</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDir</name>
        <filename>qdir.html</filename>
        <member kind="enumeration">
            <name>Filter</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Dirs</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Files</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Drives</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoSymLinks</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllEntries</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TypeMask</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Readable</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Writable</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Executable</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PermissionMask</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Modified</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hidden</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>System</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AccessMask</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllDirs</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CaseSensitive</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoDot</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoDotDot</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoDotAndDotDot</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoFilter</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SortFlag</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Name</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Time</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Size</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unsorted</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SortByMask</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirsFirst</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Reversed</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IgnoreCase</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirsLast</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LocaleAware</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Type</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoSort</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>listSeparator</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>listSeparator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QChar</type>
            <name>separator</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>separator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir &amp;</type>
            <name>operator=</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QDir &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir &amp;</type>
            <name>operator=</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QDir &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDir</type>
            <name>current</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>current</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDir</type>
            <name>home</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>home</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDir</type>
            <name>root</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>root</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QDir</type>
            <name>temp</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>temp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>QDir</anchor>
            <arglist>(const QDir &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>QDir-1</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>QDir-3</anchor>
            <arglist>(const QString &amp;path, const QString &amp;nameFilter, QDir::SortFlags sort, QDir::Filters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>QDir-2</anchor>
            <arglist>(const std::filesystem::path &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>QDir-4</anchor>
            <arglist>(const std::filesystem::path &amp;path, const QString &amp;nameFilter, QDir::SortFlags sort, QDir::Filters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFileInfoList</type>
            <name>drives</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>drives</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>cleanPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>cleanPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>currentPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>currentPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromNativeSeparators</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>fromNativeSeparators</anchor>
            <arglist>(const QString &amp;pathName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>homePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>homePath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>rootPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>rootPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>tempPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>tempPath</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>toNativeSeparators</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>toNativeSeparators</anchor>
            <arglist>(const QString &amp;pathName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>searchPaths</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>searchPaths</anchor>
            <arglist>(const QString &amp;prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cd</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>cd</anchor>
            <arglist>(const QString &amp;dirName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cdUp</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>cdUp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isAbsolutePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isAbsolutePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isRelativePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isRelativePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>makeAbsolute</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>makeAbsolute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>match</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QString &amp;filter, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>match</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>match-1</anchor>
            <arglist>(const QStringList &amp;filters, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QDir &amp;lhs, const QDir &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QDir &amp;lhs, const QDir &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeRecursively</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>removeRecursively</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>rename</anchor>
            <arglist>(const QString &amp;oldName, const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>setCurrent</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setCurrent</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addSearchPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>addSearchPath</anchor>
            <arglist>(const QString &amp;prefix, const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>addSearchPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>addSearchPath-1</anchor>
            <arglist>(const QString &amp;prefix, const std::filesystem::path &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilter</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setFilter</anchor>
            <arglist>(QDir::Filters filters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNameFilters</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setNameFilters</anchor>
            <arglist>(const QStringList &amp;nameFilters)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setPath-1</anchor>
            <arglist>(const std::filesystem::path &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setSearchPaths</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setSearchPaths</anchor>
            <arglist>(const QString &amp;prefix, const QStringList &amp;searchPaths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSorting</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>setSorting</anchor>
            <arglist>(QDir::SortFlags sort)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QDir &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>dtor.QDir</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir::Filters</type>
            <name>filter</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir::SortFlags</type>
            <name>sorting</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>sorting</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfoList</type>
            <name>entryInfoList</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>entryInfoList-1</anchor>
            <arglist>(QDir::Filters filters, QDir::SortFlags sort) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfoList</type>
            <name>entryInfoList</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>entryInfoList</anchor>
            <arglist>(const QStringList &amp;nameFilters, QDir::Filters filters, QDir::SortFlags sort) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absoluteFilePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>absoluteFilePath</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absolutePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>absolutePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>canonicalPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>canonicalPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dirName</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>dirName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator[]</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>relativeFilePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>relativeFilePath</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>entryList</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>entryList-1</anchor>
            <arglist>(QDir::Filters filters, QDir::SortFlags sort) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>entryList</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>entryList</anchor>
            <arglist>(const QStringList &amp;nameFilters, QDir::Filters filters, QDir::SortFlags sort) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>nameFilters</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>nameFilters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>exists-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAbsolute</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isAbsolute</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>(QDir::Filters filters) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRelative</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isRelative</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoot</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>isRoot</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mkdir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>mkdir-1</anchor>
            <arglist>(const QString &amp;dirName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mkdir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>mkdir</anchor>
            <arglist>(const QString &amp;dirName, QFileDevice::Permissions permissions) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>mkpath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>mkpath</anchor>
            <arglist>(const QString &amp;dirPath) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rmdir</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>rmdir</anchor>
            <arglist>(const QString &amp;dirName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rmpath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>rmpath</anchor>
            <arglist>(const QString &amp;dirPath) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemAbsolutePath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>filesystemAbsolutePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemCanonicalPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>filesystemCanonicalPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemPath</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>filesystemPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refresh</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>refresh</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QDir::Filter">
            <name>Filters</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QDir::SortFlag">
            <name>SortFlags</name>
            <anchorfile>qdir.html</anchorfile>
            <anchor>SortFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDirIterator</name>
        <filename>qdiriterator.html</filename>
        <member kind="enumeration">
            <name>IteratorFlag</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoIteratorFlags</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FollowSymlinks</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Subdirectories</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>QDirIterator</anchor>
            <arglist>(const QDir &amp;dir, QDirIterator::IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>QDirIterator-2</anchor>
            <arglist>(const QString &amp;path, QDir::Filters filters, QDirIterator::IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>QDirIterator-1</anchor>
            <arglist>(const QString &amp;path, QDirIterator::IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>QDirIterator-3</anchor>
            <arglist>(const QString &amp;path, const QStringList &amp;nameFilters, QDir::Filters filters, QDirIterator::IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo</type>
            <name>nextFileInfo</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>nextFileInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>next</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDirIterator</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>dtor.QDirIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo</type>
            <name>fileInfo</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>fileInfo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QDirIterator::IteratorFlag">
            <name>IteratorFlags</name>
            <anchorfile>qdiriterator.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDirListing</name>
        <filename>qdirlisting.html</filename>
        <class>QDirListing::DirEntry</class>
        <class>QDirListing::const_iterator</class>
        <class>QDirListing::sentinel</class>
        <member kind="enumeration">
            <name>IteratorFlag</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Default</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExcludeFiles</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExcludeDirs</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExcludeSpecial</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ResolveSymlinks</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FilesOnly</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirsOnly</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IncludeHidden</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IncludeDotAndDotDot</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CaseSensitive</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Recursive</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FollowDirSymlinks</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing &amp;</type>
            <name>operator=</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QDirListing &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirListing</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>QDirListing</anchor>
            <arglist>(QDirListing &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirListing</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>QDirListing-1</anchor>
            <arglist>(const QString &amp;path, QDirListing::IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDirListing</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>QDirListing-2</anchor>
            <arglist>(const QString &amp;path, const QStringList &amp;nameFilters, QDirListing::IteratorFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QDirListing</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>dtor.QDirListing</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing::IteratorFlags</type>
            <name>iteratorFlags</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>iteratorFlags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing::const_iterator</type>
            <name>begin</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing::sentinel</type>
            <name>cend</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing::sentinel</type>
            <name>end</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>iteratorPath</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>iteratorPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>nameFilters</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>nameFilters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QDirListing::IteratorFlag">
            <name>IteratorFlags</name>
            <anchorfile>qdirlisting.html</anchorfile>
            <anchor>IteratorFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDirListing::DirEntry</name>
        <filename>qdirlisting-direntry.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>birthTime</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>birthTime</anchor>
            <arglist>(const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>fileTime</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>fileTime</anchor>
            <arglist>(QFileDevice::FileTime type, const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastModified</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>lastModified</anchor>
            <arglist>(const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastRead</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>lastRead</anchor>
            <arglist>(const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>metadataChangeTime</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>metadataChangeTime</anchor>
            <arglist>(const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo</type>
            <name>fileInfo</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>fileInfo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absoluteFilePath</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>absoluteFilePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absolutePath</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>absolutePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>baseName</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>baseName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>bundleName</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>bundleName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>canonicalFilePath</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>canonicalFilePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>completeBaseName</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>completeBaseName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>completeSuffix</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>completeSuffix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>suffix</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>suffix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDir</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>isDir</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExecutable</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>isExecutable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFile</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>isFile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHidden</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>isHidden</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSymLink</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>isSymLink</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>size</name>
            <anchorfile>qdirlisting-direntry.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDirListing::const_iterator</name>
        <filename>qdirlisting-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qdirlisting-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>operator++</name>
            <anchorfile>qdirlisting-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing::const_iterator::pointer</type>
            <name>operator-&gt;</name>
            <anchorfile>qdirlisting-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDirListing::const_iterator::reference</type>
            <name>operator*</name>
            <anchorfile>qdirlisting-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qdirlisting-const-iterator.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qdirlisting-const-iterator.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QDirListing::sentinel</name>
        <filename>qdirlisting-sentinel.html</filename>
    </compound>
    <compound kind="class">
        <name>QDynamicPropertyChangeEvent</name>
        <filename>qdynamicpropertychangeevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QDynamicPropertyChangeEvent</name>
            <anchorfile>qdynamicpropertychangeevent.html</anchorfile>
            <anchor>QDynamicPropertyChangeEvent</anchor>
            <arglist>(const QByteArray &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>propertyName</name>
            <anchorfile>qdynamicpropertychangeevent.html</anchorfile>
            <anchor>propertyName</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEasingCurve</name>
        <filename>qeasingcurve.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Linear</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InQuad</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutQuad</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutQuad</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInQuad</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InCubic</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutCubic</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutCubic</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInCubic</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InQuart</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutQuart</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutQuart</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInQuart</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InQuint</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutQuint</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutQuint</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInQuint</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InSine</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutSine</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutSine</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInSine</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InExpo</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutExpo</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutExpo</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInExpo</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InCirc</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutCirc</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutCirc</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInCirc</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InElastic</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutElastic</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutElastic</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInElastic</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InBack</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutBack</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutBack</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInBack</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InBounce</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutBounce</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InOutBounce</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutInBounce</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SineCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CosineCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BezierSpline</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TCBSpline</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Custom</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NCurveTypes</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDataStream &amp;stream, const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(QDataStream &amp;stream, QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve &amp;</type>
            <name>operator=</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QEasingCurve &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve &amp;</type>
            <name>operator=</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QEasingCurve &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEasingCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>QEasingCurve</anchor>
            <arglist>(QEasingCurve &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEasingCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>QEasingCurve-1</anchor>
            <arglist>(QEasingCurve::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEasingCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>QEasingCurve-2</anchor>
            <arglist>(const QEasingCurve &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QEasingCurve &amp;lhs, const QEasingCurve &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QEasingCurve &amp;lhs, const QEasingCurve &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCubicBezierSegment</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>addCubicBezierSegment</anchor>
            <arglist>(const QPointF &amp;c1, const QPointF &amp;c2, const QPointF &amp;endPoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addTCBSegment</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>addTCBSegment</anchor>
            <arglist>(const QPointF &amp;nextPoint, qreal t, qreal c, qreal b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAmplitude</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setAmplitude</anchor>
            <arglist>(qreal amplitude)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCustomType</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setCustomType</anchor>
            <arglist>(QEasingCurve::EasingFunction func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOvershoot</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setOvershoot</anchor>
            <arglist>(qreal overshoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPeriod</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setPeriod</anchor>
            <arglist>(qreal period)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(QEasingCurve::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QEasingCurve &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEasingCurve</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>dtor.QEasingCurve</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve::EasingFunction</type>
            <name>customType</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>customType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve::Type</type>
            <name>type</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QPointF&gt;</type>
            <name>toCubicSpline</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>toCubicSpline</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>amplitude</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>amplitude</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>overshoot</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>overshoot</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>period</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>period</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>valueForProgress</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>valueForProgress</anchor>
            <arglist>(qreal progress) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>EasingFunction</name>
            <anchorfile>qeasingcurve.html</anchorfile>
            <anchor>EasingFunction-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QElapsedTimer</name>
        <filename>qelapsedtimer.html</filename>
        <member kind="enumeration">
            <name>ClockType</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>ClockType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SystemTime</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MonotonicClock</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TickCounter</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MachAbsoluteTime</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PerformanceCounter</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>ClockType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QElapsedTimer</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>QElapsedTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QElapsedTimer::ClockType</type>
            <name>clockType</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>clockType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isMonotonic</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>isMonotonic</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QElapsedTimer &amp;lhs, const QElapsedTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QElapsedTimer &amp;lhs, const QElapsedTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QElapsedTimer &amp;lhs, const QElapsedTimer &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>restart</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>restart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QElapsedTimer::Duration</type>
            <name>durationElapsed</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>durationElapsed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QElapsedTimer::Duration</type>
            <name>durationTo</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>durationTo</anchor>
            <arglist>(const QElapsedTimer &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasExpired</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>hasExpired</anchor>
            <arglist>(qint64 timeout) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>elapsed</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>elapsed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>msecsSinceReference</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>msecsSinceReference</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>msecsTo</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>msecsTo</anchor>
            <arglist>(const QElapsedTimer &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>nsecsElapsed</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>nsecsElapsed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>secsTo</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>secsTo</anchor>
            <arglist>(const QElapsedTimer &amp;other) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Duration</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>Duration-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>TimePoint</name>
            <anchorfile>qelapsedtimer.html</anchorfile>
            <anchor>TimePoint-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEnableSharedFromThis</name>
        <filename>qenablesharedfromthis.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>sharedFromThis</name>
            <anchorfile>qenablesharedfromthis.html</anchorfile>
            <anchor>sharedFromThis</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;const T&gt;</type>
            <name>sharedFromThis</name>
            <anchorfile>qenablesharedfromthis.html</anchorfile>
            <anchor>sharedFromThis-1</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEvent</name>
        <filename>qevent.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Timer</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseButtonPress</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseButtonRelease</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseButtonDblClick</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeyPress</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeyRelease</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FocusIn</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FocusOut</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FocusAboutToChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Enter</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Leave</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Paint</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Move</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Resize</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Create</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Destroy</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Show</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hide</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Close</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Quit</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParentChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParentAboutToChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ThreadChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowActivate</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowDeactivate</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShowToParent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HideToParent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Wheel</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowTitleChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowIconChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationWindowIconChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationFontChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationLayoutDirectionChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationPaletteChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PaletteChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Clipboard</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Speech</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MetaCall</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SockAct</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WinEventAct</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeferredDelete</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragEnter</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragLeave</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Drop</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragResponse</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChildAdded</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChildPolished</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChildRemoved</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShowWindowRequest</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PolishRequest</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Polish</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LayoutRequest</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UpdateRequest</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UpdateLater</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EmbeddingControl</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActivateControl</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeactivateControl</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContextMenu</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InputMethod</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabletMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LocaleChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LanguageChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LayoutDirectionChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Style</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabletPress</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabletRelease</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OkRequest</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HelpRequest</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IconDrag</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnabledChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActivationChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StyleChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IconTextChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ModifiedChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseTrackingChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowBlocked</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowUnblocked</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowStateChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadOnlyChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolTip</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhatsThis</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StatusTip</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActionChanged</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActionAdded</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActionRemoved</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FileOpen</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Shortcut</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShortcutOverride</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhatsThisClicked</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolBarChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationActivate</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationActivated</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationDeactivate</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationDeactivated</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QueryWhatsThis</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterWhatsThisMode</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LeaveWhatsThisMode</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZOrderChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HoverEnter</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HoverLeave</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HoverMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterEditFocus</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LeaveEditFocus</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AcceptDropsChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZeroTimerEvent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneMouseMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneMousePress</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneMouseRelease</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneMouseDoubleClick</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneContextMenu</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneHoverEnter</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneHoverMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneHoverLeave</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneHelp</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneDragEnter</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneDragMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneDragLeave</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneDrop</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneWheel</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneLeave</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeyboardLayoutChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DynamicPropertyChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabletEnterProximity</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabletLeaveProximity</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NonClientAreaMouseMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NonClientAreaMouseButtonPress</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NonClientAreaMouseButtonRelease</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NonClientAreaMouseButtonDblClick</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MacSizeChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContentsRectChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MacGLWindowChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FutureCallOut</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneResize</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GraphicsSceneMove</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CursorChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolTipChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NetworkReplyUpdated</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GrabMouse</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UngrabMouse</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GrabKeyboard</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UngrabKeyboard</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StateMachineSignal</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StateMachineWrapped</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchBegin</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchUpdate</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchEnd</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NativeGesture</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RequestSoftwareInputPanel</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CloseSoftwareInputPanel</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WinIdChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gesture</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GestureOverride</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollPrepare</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Scroll</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Expose</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InputMethodQuery</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OrientationChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchCancel</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ThemeChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SockClose</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PlatformPanel</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StyleAnimationUpdate</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationStateChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowChangeInternal</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScreenChangeInternal</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PlatformSurface</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pointer</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabletTrackingChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowAboutToChangeInternal</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DevicePixelRatioChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChildWindowAdded</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChildWindowRemoved</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParentWindowAboutToChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ParentWindowChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SafeAreaMarginsChange</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>User</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaxUser</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEvent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>QEvent</anchor>
            <arglist>(QEvent::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>registerEventType</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>registerEventType</anchor>
            <arglist>(int hint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>accept</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>accept</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ignore</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>ignore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setAccepted</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>(bool accepted)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QEvent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>dtor.QEvent</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QEvent *</type>
            <name>clone</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEvent::Type</type>
            <name>type</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAccepted</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInputEvent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>isInputEvent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPointerEvent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>isPointerEvent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSinglePointEvent</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>isSinglePointEvent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>spontaneous</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>spontaneous</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="bool">
            <name>accepted</name>
            <anchorfile>qevent.html</anchorfile>
            <anchor>accepted-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEventLoop</name>
        <filename>qeventloop.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>ProcessEventsFlag</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AllEvents</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExcludeUserInputEvents</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExcludeSocketNotifiers</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WaitForMoreEvents</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>X11ExcludeTimers</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EventLoopExec</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DialogExec</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationExec</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoop</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>QEventLoop</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>processEvents</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>processEvents</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exit</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>exit</anchor>
            <arglist>(int returnCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>processEvents</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>processEvents-1</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags, QDeadlineTimer deadline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>processEvents</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>processEvents-2</anchor>
            <arglist>(QEventLoop::ProcessEventsFlags flags, int maxTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quit</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>quit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wakeUp</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>wakeUp</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QEventLoop</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>dtor.QEventLoop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QEventLoop::ProcessEventsFlag">
            <name>ProcessEventsFlags</name>
            <anchorfile>qeventloop.html</anchorfile>
            <anchor>ProcessEventsFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QEventLoopLocker</name>
        <filename>qeventlooplocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEventLoopLocker &amp;</type>
            <name>operator=</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QEventLoopLocker &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>QEventLoopLocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>QEventLoopLocker-1</anchor>
            <arglist>(QEventLoop *loop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>QEventLoopLocker-2</anchor>
            <arglist>(QEventLoopLocker &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>QEventLoopLocker-3</anchor>
            <arglist>(QThread *thread)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>swap-1</anchor>
            <arglist>(QEventLoopLocker &amp;lhs, QEventLoopLocker &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QEventLoopLocker &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QEventLoopLocker</name>
            <anchorfile>qeventlooplocker.html</anchorfile>
            <anchor>dtor.QEventLoopLocker</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QException</name>
        <filename>qexception.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QException &amp;</type>
            <name>operator=</name>
            <anchorfile>qexception.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QException &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QException</name>
            <anchorfile>qexception.html</anchorfile>
            <anchor>QException</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QException</name>
            <anchorfile>qexception.html</anchorfile>
            <anchor>QException-1</anchor>
            <arglist>(const QException &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QException</name>
            <anchorfile>qexception.html</anchorfile>
            <anchor>dtor.QException</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QException *</type>
            <name>clone</name>
            <anchorfile>qexception.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>raise</name>
            <anchorfile>qexception.html</anchorfile>
            <anchor>raise</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QExplicitlySharedDataPointer</name>
        <filename>qexplicitlyshareddatapointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer-1</anchor>
            <arglist>(QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer-2</anchor>
            <arglist>(T *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer-3</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;T&gt; &amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>QExplicitlySharedDataPointer-4</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;X&gt; &amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QExplicitlySharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QExplicitlySharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(T *o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QExplicitlySharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;T&gt; &amp;o)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>T *</type>
            <name>clone</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>take</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>take</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;T&gt; &amp;lhs, const QExplicitlySharedDataPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const T *const &amp;lhs, const QExplicitlySharedDataPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QExplicitlySharedDataPointer&lt;T&gt; &amp;lhs, const QExplicitlySharedDataPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const T *const &amp;lhs, const QExplicitlySharedDataPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>detach</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>detach</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>(T *ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QExplicitlySharedDataPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QExplicitlySharedDataPointer</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>dtor.QExplicitlySharedDataPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>get</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>get</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator--gt-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Type</name>
            <anchorfile>qexplicitlyshareddatapointer.html</anchorfile>
            <anchor>Type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFile</name>
        <filename>qfile.html</filename>
        <base>QFileDevice</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>encodeName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>encodeName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile-1</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile-2</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile-4</anchor>
            <arglist>(const QString &amp;name, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile-3</anchor>
            <arglist>(const std::filesystem::path &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>QFile-5</anchor>
            <arglist>(const std::filesystem::path &amp;name, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFileDevice::Permissions</type>
            <name>permissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>permissions-1</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFileDevice::Permissions</type>
            <name>permissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>permissions-2</anchor>
            <arglist>(const std::filesystem::path &amp;filename)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>decodeName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>decodeName</anchor>
            <arglist>(const QByteArray &amp;localFileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>decodeName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>decodeName-1</anchor>
            <arglist>(const char *localFileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>symLinkTarget</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>symLinkTarget</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>copy</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>copy-3</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>copy</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>copy</anchor>
            <arglist>(const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>copy</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>copy-2</anchor>
            <arglist>(const std::filesystem::path &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>link</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>link-3</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;linkName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>link</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>link</anchor>
            <arglist>(const QString &amp;linkName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>link</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>link-2</anchor>
            <arglist>(const std::filesystem::path &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>moveToTrash</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>moveToTrash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>moveToTrash</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>moveToTrash-2</anchor>
            <arglist>(const QString &amp;fileName, QString *pathInTrash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>open</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>open-2</anchor>
            <arglist>(FILE *fh, QIODeviceBase::OpenMode mode, QFileDevice::FileHandleFlags handleFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QIODeviceBase::OpenMode mode) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>open</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>open-1</anchor>
            <arglist>(QIODeviceBase::OpenMode mode, QFileDevice::Permissions permissions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>open</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>open-3</anchor>
            <arglist>(int fd, QIODeviceBase::OpenMode mode, QFileDevice::FileHandleFlags handleFlags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>rename</anchor>
            <arglist>(const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>rename-3</anchor>
            <arglist>(const QString &amp;oldName, const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>rename-2</anchor>
            <arglist>(const std::filesystem::path &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>resize</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>resize-1</anchor>
            <arglist>(const QString &amp;fileName, qint64 sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>resize</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qint64 sz) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setPermissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>setPermissions</anchor>
            <arglist>(QFileDevice::Permissions permissions) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>setPermissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>setPermissions-1</anchor>
            <arglist>(const QString &amp;fileName, QFileDevice::Permissions permissions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>setPermissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>setPermissions-2</anchor>
            <arglist>(const std::filesystem::path &amp;filename, QFileDevice::Permissions permissionSpec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>supportsMoveToTrash</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>supportsMoveToTrash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::filesystem::path</type>
            <name>filesystemSymLinkTarget</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>filesystemSymLinkTarget-1</anchor>
            <arglist>(const std::filesystem::path &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>setFileName-1</anchor>
            <arglist>(const std::filesystem::path &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFile</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>dtor.QFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QFileDevice::Permissions</type>
            <name>permissions</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>permissions</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>fileName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>symLinkTarget</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>symLinkTarget-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>exists-2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>size</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemFileName</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>filesystemFileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemSymLinkTarget</name>
            <anchorfile>qfile.html</anchorfile>
            <anchor>filesystemSymLinkTarget</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileDevice</name>
        <filename>qfiledevice.html</filename>
        <base>QIODevice</base>
        <member kind="enumeration">
            <name>FileError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FatalError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ResourceError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AbortError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TimeOutError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnspecifiedError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoveError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RenameError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PositionError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ResizeError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PermissionsError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CopyError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FileHandleFlag</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileHandleFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AutoCloseHandle</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileHandleFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontCloseHandle</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileHandleFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FileTime</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileTime-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FileAccessTime</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileTime-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FileBirthTime</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileTime-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FileMetadataChangeTime</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileTime-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FileModificationTime</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileTime-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MemoryMapFlag</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>MemoryMapFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoOptions</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>MemoryMapFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MapPrivateOption</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>MemoryMapFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Permission</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOwner</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteOwner</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExeOwner</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadUser</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteUser</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExeUser</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadGroup</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteGroup</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExeGroup</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadOther</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteOther</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExeOther</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_NO_USE_NODISCARD_FILE_OPEN</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>QT_NO_USE_NODISCARD_FILE_OPEN</anchor>
            <arglist>QT_NO_USE_NODISCARD_FILE_OPEN</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_USE_NODISCARD_FILE_OPEN</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>QT_USE_NODISCARD_FILE_OPEN</anchor>
            <arglist>QT_USE_NODISCARD_FILE_OPEN</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>flush</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>resize</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qint64 sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>seek</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>seek</anchor>
            <arglist>(qint64 pos) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setFileTime</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>setFileTime</anchor>
            <arglist>(const QDateTime &amp;newDate, QFileDevice::FileTime fileTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setPermissions</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>setPermissions</anchor>
            <arglist>(QFileDevice::Permissions permissions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unmap</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>unmap</anchor>
            <arglist>(uchar *address)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 len) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readLineData</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>readLineData</anchor>
            <arglist>(char *data, qint64 maxlen) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uchar *</type>
            <name>map</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>map</anchor>
            <arglist>(qint64 offset, qint64 size, QFileDevice::MemoryMapFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unsetError</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>unsetError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFileDevice</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>dtor.QFileDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>fileTime</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>fileTime</anchor>
            <arglist>(QFileDevice::FileTime time) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileDevice::FileError</type>
            <name>error</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QFileDevice::Permissions</type>
            <name>permissions</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>permissions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>fileName</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>handle</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>pos</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>size</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="typedef" type="QFileDevice::FileHandleFlag">
            <name>FileHandleFlags</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>FileHandleFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QFileDevice::MemoryMapFlag">
            <name>MemoryMapFlags</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>MemoryMapFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QFileDevice::Permission">
            <name>Permissions</name>
            <anchorfile>qfiledevice.html</anchorfile>
            <anchor>Permission-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileInfo</name>
        <filename>qfileinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QFileInfo &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QFileInfo &amp;fileinfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-5</anchor>
            <arglist>(const QDir &amp;dir, const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-6</anchor>
            <arglist>(const QDir &amp;dir, const std::filesystem::path &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-1</anchor>
            <arglist>(const QFileDevice &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-2</anchor>
            <arglist>(const QFileInfo &amp;fileinfo)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-3</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfo-4</anchor>
            <arglist>(const std::filesystem::path &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_IMPLICIT_QFILEINFO_CONSTRUCTION</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QT_IMPLICIT_QFILEINFO_CONSTRUCTION</anchor>
            <arglist>QT_IMPLICIT_QFILEINFO_CONSTRUCTION</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>exists-1</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>makeAbsolute</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>makeAbsolute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QFileInfo &amp;lhs, const QFileInfo &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QFileInfo &amp;lhs, const QFileInfo &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refresh</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>refresh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaching</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setCaching</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setFile-3</anchor>
            <arglist>(const QDir &amp;dir, const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setFile-2</anchor>
            <arglist>(const QFileDevice &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setFile</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>setFile-1</anchor>
            <arglist>(const std::filesystem::path &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stat</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>stat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QFileInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFileInfo</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>dtor.QFileInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>birthTime</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>birthTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>birthTime</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>birthTime-1</anchor>
            <arglist>(const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>fileTime</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>fileTime</anchor>
            <arglist>(QFileDevice::FileTime time) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>fileTime</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>fileTime-1</anchor>
            <arglist>(QFileDevice::FileTime time, const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastModified</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>lastModified</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastModified</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>lastModified-1</anchor>
            <arglist>(const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastRead</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>lastRead</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastRead</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>lastRead-1</anchor>
            <arglist>(const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>metadataChangeTime</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>metadataChangeTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>metadataChangeTime</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>metadataChangeTime-1</anchor>
            <arglist>(const QTimeZone &amp;tz) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir</type>
            <name>absoluteDir</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>absoluteDir</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDir</type>
            <name>dir</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>dir</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFileDevice::Permissions</type>
            <name>permissions</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>permissions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absoluteFilePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>absoluteFilePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absolutePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>absolutePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>baseName</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>baseName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>bundleName</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>bundleName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>canonicalFilePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>canonicalFilePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>canonicalPath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>canonicalPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>completeBaseName</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>completeBaseName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>completeSuffix</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>completeSuffix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>group</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>junctionTarget</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>junctionTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>owner</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>owner</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readSymLink</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>readSymLink</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>suffix</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>suffix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>symLinkTarget</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>symLinkTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>caching</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>caching</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAbsolute</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isAbsolute</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAlias</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isAlias</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBundle</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isBundle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDir</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isDir</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isExecutable</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isExecutable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFile</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isFile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isHidden</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isHidden</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isJunction</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isJunction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNativePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isNativePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRelative</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isRelative</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoot</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isRoot</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isShortcut</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isShortcut</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSymLink</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isSymLink</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSymbolicLink</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isSymbolicLink</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>permission</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>permission</anchor>
            <arglist>(QFileDevice::Permissions permissions) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>size</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemAbsoluteFilePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemAbsoluteFilePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemAbsolutePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemAbsolutePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemCanonicalFilePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemCanonicalFilePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemCanonicalPath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemCanonicalPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemFilePath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemFilePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemJunctionTarget</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemJunctionTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemPath</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemReadSymLink</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemReadSymLink</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::filesystem::path</type>
            <name>filesystemSymLinkTarget</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>filesystemSymLinkTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>groupId</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>groupId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>ownerId</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>ownerId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QFileInfoList</name>
            <anchorfile>qfileinfo.html</anchorfile>
            <anchor>QFileInfoList-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileSelector</name>
        <filename>qfileselector.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileSelector</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>QFileSelector</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExtraSelectors</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>setExtraSelectors</anchor>
            <arglist>(const QStringList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFileSelector</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>dtor.QFileSelector</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>select</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>select</anchor>
            <arglist>(const QString &amp;filePath) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allSelectors</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>allSelectors</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>extraSelectors</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>extraSelectors</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>select</name>
            <anchorfile>qfileselector.html</anchorfile>
            <anchor>select-1</anchor>
            <arglist>(const QUrl &amp;filePath) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFileSystemWatcher</name>
        <filename>qfilesystemwatcher.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileSystemWatcher</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>QFileSystemWatcher</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFileSystemWatcher</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>QFileSystemWatcher-1</anchor>
            <arglist>(const QStringList &amp;paths, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>addPaths</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>addPaths</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>removePaths</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>removePaths</anchor>
            <arglist>(const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addPath</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>addPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removePath</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>removePath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>directoryChanged</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>directoryChanged</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fileChanged</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>fileChanged</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFileSystemWatcher</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>dtor.QFileSystemWatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>directories</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>directories</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>files</name>
            <anchorfile>qfilesystemwatcher.html</anchorfile>
            <anchor>files</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFlag</name>
        <filename>qflag.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlag</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>QFlag</anchor>
            <arglist>(int value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlag</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>QFlag-1</anchor>
            <arglist>(short value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlag</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>QFlag-2</anchor>
            <arglist>(uint value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlag</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>QFlag-3</anchor>
            <arglist>(ushort value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator int</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>operator-int</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>operator uint</name>
            <anchorfile>qflag.html</anchorfile>
            <anchor>operator-uint</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFlags</name>
        <filename>qflags.html</filename>
        <base>QFlagsStorageHelper</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-1</anchor>
            <arglist>(Enum flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-2</anchor>
            <arglist>(QFlag flag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-3</anchor>
            <arglist>(const QFlags&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-5</anchor>
            <arglist>(std::in_place_t, QFlags&lt;T&gt;::Int flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>QFlags-4</anchor>
            <arglist>(std::initializer_list&lt;Enum&gt; flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-eq-1</anchor>
            <arglist>(Enum mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-eq-2</anchor>
            <arglist>(QFlags&lt;T&gt; mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(int mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-eq-3</anchor>
            <arglist>(uint mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>operator^=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-5e-eq-1</anchor>
            <arglist>(Enum other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>operator^=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(QFlags&lt;T&gt; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>operator|=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7c-eq-1</anchor>
            <arglist>(Enum other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>operator|=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(QFlags&lt;T&gt; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt; &amp;</type>
            <name>setFlag</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>setFlag</anchor>
            <arglist>(Enum flag, bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFlags&lt;T&gt;</type>
            <name>fromInt</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>fromInt</anchor>
            <arglist>(QFlags&lt;T&gt;::Int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_FLAGS</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>Q_DECLARE_FLAGS</anchor>
            <arglist>(Flags, Enum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_OPERATORS_FOR_FLAGS</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>Q_DECLARE_OPERATORS_FOR_FLAGS</anchor>
            <arglist>(Flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(Enum lhs, QFlags&lt;T&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(QFlags&lt;T&gt; lhs, Enum rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(QFlags&lt;T&gt; lhs, QFlags&lt;T&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(Enum lhs, QFlags&lt;T&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(QFlags&lt;T&gt; lhs, Enum rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(QFlags&lt;T&gt; lhs, QFlags&lt;T&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>operator=</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFlags&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>qHash-2</anchor>
            <arglist>(QFlags&lt;Enum&gt; key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator&amp;</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-1</anchor>
            <arglist>(Enum mask) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator&amp;</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-2</anchor>
            <arglist>(QFlags&lt;T&gt; mask) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator&amp;</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(int mask) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator&amp;</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-and-3</anchor>
            <arglist>(uint mask) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator^</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-5e-1</anchor>
            <arglist>(Enum other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator^</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-5e</anchor>
            <arglist>(QFlags&lt;T&gt; other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator|</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7c-1</anchor>
            <arglist>(Enum other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator|</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(QFlags&lt;T&gt; other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;</type>
            <name>operator~</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-7e</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;::Int</type>
            <name>operator QFlags&lt;T&gt;::Int</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-QFlags-ltT-gt-3a-3aInt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFlags&lt;T&gt;::Int</type>
            <name>toInt</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAnyFlag</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>testAnyFlag</anchor>
            <arglist>(Enum flag) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testAnyFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>testAnyFlags</anchor>
            <arglist>(QFlags&lt;T&gt; flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testFlag</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>testFlag</anchor>
            <arglist>(Enum flag) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>testFlags</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>testFlags</anchor>
            <arglist>(QFlags&lt;T&gt; flags) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>enum_type</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>enum_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Int</name>
            <anchorfile>qflags.html</anchorfile>
            <anchor>Int-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFuture</name>
        <filename>qfuture.html</filename>
        <class>QFuture::const_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFuture</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>QFuture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFuture</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>QFuture-1</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QFuture&lt;T&gt;::ResultType&lt;Function&gt;&gt;</type>
            <name>then</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>then</anchor>
            <arglist>(Function &amp;&amp;function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QFuture&lt;T&gt;::ResultType&lt;Function&gt;&gt;</type>
            <name>then</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>then-1</anchor>
            <arglist>(QObject *context, Function &amp;&amp;function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QFuture&lt;T&gt;::ResultType&lt;Function&gt;&gt;</type>
            <name>then</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>then-2</anchor>
            <arglist>(QThreadPool *pool, Function &amp;&amp;function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QFuture&lt;T&gt;::ResultType&lt;Function&gt;&gt;</type>
            <name>then</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>then-3</anchor>
            <arglist>(QtFuture::Launch policy, Function &amp;&amp;function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>onCanceled</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>onCanceled</anchor>
            <arglist>(Function &amp;&amp;handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>onCanceled</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>onCanceled-1</anchor>
            <arglist>(QObject *context, Function &amp;&amp;handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>onFailed</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>onFailed</anchor>
            <arglist>(Function &amp;&amp;handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>onFailed</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>onFailed-1</anchor>
            <arglist>(QObject *context, Function &amp;&amp;handler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;U&gt;</type>
            <name>unwrap</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>unwrap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeResult</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>takeResult</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qfuture-obsolete.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qfuture-obsolete.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSuspended</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>setSuspended</anchor>
            <arglist>(bool suspend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>suspend</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>suspend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>togglePaused</name>
            <anchorfile>qfuture-obsolete.html</anchorfile>
            <anchor>togglePaused</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggleSuspended</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>toggleSuspended</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForFinished</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFuture</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>dtor.QFuture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>results</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>results</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>progressText</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>progressText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>result</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>resultAt</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>resultAt</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCanceled</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isCanceled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPaused</name>
            <anchorfile>qfuture-obsolete.html</anchorfile>
            <anchor>isPaused</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResultReadyAt</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isResultReadyAt</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStarted</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isStarted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSuspended</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isSuspended</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSuspending</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isSuspending</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressMaximum</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>progressMaximum</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressMinimum</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>progressMinimum</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressValue</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>progressValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>resultCount</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>resultCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qfuture.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFuture::const_iterator</name>
        <filename>qfuture-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(int j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFuture&lt;T&gt;::const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator</type>
            <name>operator++</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator</type>
            <name>operator--</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QFuture&lt;T&gt;::const_iterator &amp;lhs, const QFuture&lt;T&gt;::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QFuture&lt;T&gt;::const_iterator &amp;lhs, const QFuture&lt;T&gt;::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>const_iterator-1</anchor>
            <arglist>(const QFuture&lt;T&gt;::const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator</type>
            <name>operator+</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(int j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;::const_iterator</type>
            <name>operator-</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(int j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qfuture-const-iterator.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFutureIterator</name>
        <filename>qfutureiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFutureIterator</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>QFutureIterator</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFutureIterator&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>previous</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qfutureiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFutureSynchronizer</name>
        <filename>qfuturesynchronizer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFutureSynchronizer</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>QFutureSynchronizer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFutureSynchronizer</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>QFutureSynchronizer-1</anchor>
            <arglist>(QFuture&lt;T&gt; future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addFuture</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>addFuture</anchor>
            <arglist>(QFuture&lt;T&gt; future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearFutures</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>clearFutures</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCancelOnWait</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>setCancelOnWait</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFuture</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>setFuture</anchor>
            <arglist>(QFuture&lt;T&gt; future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForFinished</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QFutureSynchronizer</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>dtor.QFutureSynchronizer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QFuture&lt;T&gt;&gt;</type>
            <name>futures</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>futures</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>cancelOnWait</name>
            <anchorfile>qfuturesynchronizer.html</anchorfile>
            <anchor>cancelOnWait</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QFutureWatcher</name>
        <filename>qfuturewatcher.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QFutureWatcher</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>QFutureWatcher</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancel</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>canceled</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>canceled</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pause</name>
            <anchorfile>qfuturewatcher-obsolete.html</anchorfile>
            <anchor>pause</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>paused</name>
            <anchorfile>qfuturewatcher-obsolete.html</anchorfile>
            <anchor>paused</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressRangeChanged</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressRangeChanged</anchor>
            <arglist>(int minimum, int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressTextChanged</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressTextChanged</anchor>
            <arglist>(const QString &amp;progressText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>progressValueChanged</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressValueChanged</anchor>
            <arglist>(int progressValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultReadyAt</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resultReadyAt</anchor>
            <arglist>(int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resultsReadyAt</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resultsReadyAt</anchor>
            <arglist>(int beginIndex, int endIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resumed</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resumed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFuture</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>setFuture</anchor>
            <arglist>(const QFuture&lt;T&gt; &amp;future)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qfuturewatcher-obsolete.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPendingResultsLimit</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>setPendingResultsLimit</anchor>
            <arglist>(int limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSuspended</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>setSuspended</anchor>
            <arglist>(bool suspend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>suspend</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>suspend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>suspended</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>suspended</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>suspending</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>suspending</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>togglePaused</name>
            <anchorfile>qfuturewatcher-obsolete.html</anchorfile>
            <anchor>togglePaused</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggleSuspended</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>toggleSuspended</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>waitForFinished</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QFutureWatcher</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>dtor.QFutureWatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>future</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>future</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>progressText</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>result</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>resultAt</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>resultAt</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCanceled</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isCanceled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPaused</name>
            <anchorfile>qfuturewatcher-obsolete.html</anchorfile>
            <anchor>isPaused</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStarted</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isStarted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSuspended</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isSuspended</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSuspending</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>isSuspending</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressMaximum</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressMaximum</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressMinimum</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressMinimum</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>progressValue</name>
            <anchorfile>qfuturewatcher.html</anchorfile>
            <anchor>progressValue</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericArgument</name>
        <filename>qgenericargument.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericArgument</name>
            <anchorfile>qgenericargument.html</anchorfile>
            <anchor>QGenericArgument</anchor>
            <arglist>(const char *name, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qgenericargument.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>data</name>
            <anchorfile>qgenericargument.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGenericReturnArgument</name>
        <filename>qgenericreturnargument.html</filename>
        <base>QGenericArgument</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QGenericReturnArgument</name>
            <anchorfile>qgenericreturnargument.html</anchorfile>
            <anchor>QGenericReturnArgument</anchor>
            <arglist>(const char *name, void *data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGlobalStatic</name>
        <filename>qglobalstatic.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGlobalStatic&lt;Holder&gt;::Type &amp;</type>
            <name>operator*</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGlobalStatic&lt;Holder&gt;::Type *</type>
            <name>operator QGlobalStatic&lt;Holder&gt;::Type *</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>operator-QGlobalStatic-ltHolder-gt-3a-3aType--2a</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGlobalStatic&lt;Holder&gt;::Type *</type>
            <name>operator()</name>
            <anchorfile>qglobalstatic-obsolete.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QGlobalStatic&lt;Holder&gt;::Type *</type>
            <name>operator-&gt;</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_GLOBAL_STATIC</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>Q_GLOBAL_STATIC</anchor>
            <arglist>(Type, variableName, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_GLOBAL_STATIC_WITH_ARGS</name>
            <anchorfile>qglobalstatic-obsolete.html</anchorfile>
            <anchor>Q_GLOBAL_STATIC_WITH_ARGS</anchor>
            <arglist>(Type, variableName, Arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>exists</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>exists</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDestroyed</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>isDestroyed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Type</name>
            <anchorfile>qglobalstatic.html</anchorfile>
            <anchor>Type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QGregorianCalendar</name>
        <filename>qgregoriancalendar.html</filename>
        <base>QRomanCalendar</base>
    </compound>
    <compound kind="class">
        <name>QHash</name>
        <filename>qhash.html</filename>
        <class>QHash::TryEmplaceResult</class>
        <class>QHash::const_iterator</class>
        <class>QHash::iterator</class>
        <class>QHash::key_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-lt-lt-8</anchor>
            <arglist>(QDataStream &amp;out, const QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-gt-gt-6</anchor>
            <arglist>(QDataStream &amp;in, QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash-4</anchor>
            <arglist>(InputIterator begin, InputIterator end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash-1</anchor>
            <arglist>(QHash&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash-2</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>QHash-3</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QHash&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::TryEmplaceResult</type>
            <name>insertOrAssign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insertOrAssign</anchor>
            <arglist>(K &amp;&amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::TryEmplaceResult</type>
            <name>insertOrAssign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insertOrAssign-1</anchor>
            <arglist>(Key &amp;&amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::TryEmplaceResult</type>
            <name>insertOrAssign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insertOrAssign-2</anchor>
            <arglist>(const Key &amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::TryEmplaceResult</type>
            <name>tryEmplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>tryEmplace</anchor>
            <arglist>(K &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::TryEmplaceResult</type>
            <name>tryEmplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>tryEmplace-1</anchor>
            <arglist>(Key &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::TryEmplaceResult</type>
            <name>tryEmplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>tryEmplace-2</anchor>
            <arglist>(const Key &amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::TryEmplaceResult</type>
            <name>tryInsert</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>tryInsert</anchor>
            <arglist>(K &amp;&amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::TryEmplaceResult</type>
            <name>tryInsert</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>tryInsert-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>emplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>emplace</anchor>
            <arglist>(Key &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>emplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>emplace-1</anchor>
            <arglist>(const Key &amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QHash&lt;Key, T&gt;::const_iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>find</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>insert_or_assign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert_or_assign-3</anchor>
            <arglist>(QHash&lt;Key, T&gt;::const_iterator hint, K &amp;&amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>insert_or_assign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert_or_assign-4</anchor>
            <arglist>(QHash&lt;Key, T&gt;::const_iterator hint, Key &amp;&amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>insert_or_assign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert_or_assign-5</anchor>
            <arglist>(QHash&lt;Key, T&gt;::const_iterator hint, const Key &amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>keyValueBegin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keyValueBegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>keyValueEnd</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keyValueEnd</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>try_emplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>try_emplace-3</anchor>
            <arglist>(QHash&lt;Key, T&gt;::const_iterator hint, K &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>try_emplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>try_emplace-4</anchor>
            <arglist>(QHash&lt;Key, T&gt;::const_iterator hint, Key &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>try_emplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>try_emplace-5</anchor>
            <arglist>(QHash&lt;Key, T&gt;::const_iterator hint, const Key &amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>take</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>asKeyValueRange-1</anchor>
            <arglist>() &amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>asKeyValueRange</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;lhs, const QHash&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;lhs, const QHash&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qGlobalQHashSeed</name>
            <anchorfile>qhash-obsolete.html</anchorfile>
            <anchor>qGlobalQHashSeed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>erase_if-1</anchor>
            <arglist>(QHash&lt;Key, T&gt; &amp;hash, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>removeIf</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(Enum key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-1</anchor>
            <arglist>(QDate key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-2</anchor>
            <arglist>(QLatin1StringView key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-3</anchor>
            <arglist>(QPoint key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-4</anchor>
            <arglist>(QTime key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-5</anchor>
            <arglist>(T key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-6</anchor>
            <arglist>(char key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-7</anchor>
            <arglist>(char16_t key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-8</anchor>
            <arglist>(char32_t key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-9</anchor>
            <arglist>(char8_t key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-10</anchor>
            <arglist>(const QBitArray &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-11</anchor>
            <arglist>(const QByteArray &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-12</anchor>
            <arglist>(const QChar key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-13</anchor>
            <arglist>(const QDateTime &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-14</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-15</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-16</anchor>
            <arglist>(const QString &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-17</anchor>
            <arglist>(const QTypeRevision &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-18</anchor>
            <arglist>(const QUrl &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-19</anchor>
            <arglist>(const QVersionNumber &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-20</anchor>
            <arglist>(const T *key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-21</anchor>
            <arglist>(const std::pair&lt;T1, T2&gt; &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-22</anchor>
            <arglist>(double key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-23</anchor>
            <arglist>(float key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-24</anchor>
            <arglist>(int key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-26</anchor>
            <arglist>(long double key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-25</anchor>
            <arglist>(long key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-27</anchor>
            <arglist>(qint128 key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-28</anchor>
            <arglist>(qint64 key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-29</anchor>
            <arglist>(quint128 key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-30</anchor>
            <arglist>(quint64 key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-31</anchor>
            <arglist>(short key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-32</anchor>
            <arglist>(signed char key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-33</anchor>
            <arglist>(std::nullptr_t key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-34</anchor>
            <arglist>(uchar key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-35</anchor>
            <arglist>(uint key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-36</anchor>
            <arglist>(ulong key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-37</anchor>
            <arglist>(ushort key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHash-38</anchor>
            <arglist>(wchar_t key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHashBits</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHashBits</anchor>
            <arglist>(const void *p, size_t len, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHashMulti</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHashMulti</anchor>
            <arglist>(size_t seed, const T &amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHashMultiCommutative</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHashMultiCommutative</anchor>
            <arglist>(size_t seed, const T &amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHashRange</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHashRange</anchor>
            <arglist>(InputIterator first, InputIterator last, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHashRangeCommutative</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>qHashRangeCommutative</anchor>
            <arglist>(InputIterator first, InputIterator last, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QHash&lt;Key, T&gt;::key_value_iterator, bool&gt;</type>
            <name>insert_or_assign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert_or_assign</anchor>
            <arglist>(K &amp;&amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QHash&lt;Key, T&gt;::key_value_iterator, bool&gt;</type>
            <name>insert_or_assign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert_or_assign-1</anchor>
            <arglist>(Key &amp;&amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QHash&lt;Key, T&gt;::key_value_iterator, bool&gt;</type>
            <name>insert_or_assign</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert_or_assign-2</anchor>
            <arglist>(const Key &amp;key, Value &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QHash&lt;Key, T&gt;::key_value_iterator, bool&gt;</type>
            <name>try_emplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>try_emplace</anchor>
            <arglist>(K &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QHash&lt;Key, T&gt;::key_value_iterator, bool&gt;</type>
            <name>try_emplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>try_emplace-1</anchor>
            <arglist>(Key &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QHash&lt;Key, T&gt;::key_value_iterator, bool&gt;</type>
            <name>try_emplace</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>try_emplace-2</anchor>
            <arglist>(const Key &amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qSetGlobalQHashSeed</name>
            <anchorfile>qhash-obsolete.html</anchorfile>
            <anchor>qSetGlobalQHashSeed</anchor>
            <arglist>(int newSeed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QHash</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>dtor.QHash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Key</type>
            <name>key</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>key</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Key</type>
            <name>key</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>key-1</anchor>
            <arglist>(const T &amp;value, const Key &amp;defaultKey) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>find</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>find-3</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>constKeyValueBegin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>constKeyValueBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>constKeyValueEnd</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>constKeyValueEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>keyValueBegin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keyValueBegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>keyValueEnd</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keyValueEnd-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_iterator</type>
            <name>keyBegin</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keyBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_iterator</type>
            <name>keyEnd</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keyEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>keys-1</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>value-3</anchor>
            <arglist>(const Key &amp;key, const T &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>asKeyValueRange-3</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>asKeyValueRange-2</anchor>
            <arglist>() const &amp;&amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T</type>
            <name>operator[]</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>operator-5b-5d-3</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>load_factor</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>load_factor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capacity</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_key_value_iterator</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>const_key_value_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_value_iterator</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>key_value_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>mapped_type</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>mapped_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qhash.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHash::TryEmplaceResult</name>
        <filename>qhash-tryemplaceresult.html</filename>
    </compound>
    <compound kind="class">
        <name>QHash::const_iterator</name>
        <filename>qhash-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>operator++</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>const_iterator-1</anchor>
            <arglist>(const QHash&lt;Key, T&gt;::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QHash&lt;Key, T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QHash&lt;Key, T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qhash-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHash::iterator</name>
        <filename>qhash-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::iterator</type>
            <name>operator++</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QHash&lt;Key, T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QHash&lt;Key, T&gt;::iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QHash&lt;Key, T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QHash&lt;Key, T&gt;::iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qhash-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHash::key_iterator</name>
        <filename>qhash-key-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qhash-key-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::key_iterator</type>
            <name>operator++</name>
            <anchorfile>qhash-key-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;Key, T&gt;::const_iterator</type>
            <name>base</name>
            <anchorfile>qhash-key-iterator.html</anchorfile>
            <anchor>base</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qhash-key-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QHash&lt;Key, T&gt;::key_iterator other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qhash-key-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QHash&lt;Key, T&gt;::key_iterator other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>operator*</name>
            <anchorfile>qhash-key-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key *</type>
            <name>operator-&gt;</name>
            <anchorfile>qhash-key-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHashIterator</name>
        <filename>qhashiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHashIterator</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>QHashIterator</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHashIterator&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHashIterator&lt;Key, T&gt;::Item</type>
            <name>next</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHashIterator&lt;Key, T&gt;::Item</type>
            <name>peekNext</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qhashiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QHashSeed</name>
        <filename>qhashseed.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QHashSeed</type>
            <name>globalSeed</name>
            <anchorfile>qhashseed.html</anchorfile>
            <anchor>globalSeed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QHashSeed</name>
            <anchorfile>qhashseed.html</anchorfile>
            <anchor>QHashSeed</anchor>
            <arglist>(size_t data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>resetRandomGlobalSeed</name>
            <anchorfile>qhashseed.html</anchorfile>
            <anchor>resetRandomGlobalSeed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDeterministicGlobalSeed</name>
            <anchorfile>qhashseed.html</anchorfile>
            <anchor>setDeterministicGlobalSeed</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>operator size_t</name>
            <anchorfile>qhashseed.html</anchorfile>
            <anchor>operator-size_t</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIODevice</name>
        <filename>qiodevice.html</filename>
        <base>QObject</base>
        <base>QIODeviceBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>peek</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>peek-1</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>read</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>read-1</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readAll</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readLine</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLine-1</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>readLineInto</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLineInto</anchor>
            <arglist>(QSpan&lt;char&gt; buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>readLineInto</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLineInto-1</anchor>
            <arglist>(QSpan&lt;std::byte&gt; buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>readLineInto</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLineInto-2</anchor>
            <arglist>(QSpan&lt;uchar&gt; buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIODevice</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>QIODevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIODevice</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>QIODevice-1</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>getChar</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>getChar</anchor>
            <arglist>(char *c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QIODeviceBase::OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>putChar</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>putChar</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>readLineInto</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLineInto-3</anchor>
            <arglist>(QByteArray *line, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>reset</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>seek</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>seek</anchor>
            <arglist>(qint64 pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>peek</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>peek</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>read</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxSize) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>readLine</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLine</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readLineData</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readLineData</anchor>
            <arglist>(char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>skip</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>skip</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>skipData</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>skipData</anchor>
            <arglist>(qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>write</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>write-1</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>write</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>write-2</anchor>
            <arglist>(const char *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>write</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(const char *data, qint64 maxSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="pure" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 maxSize) = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>aboutToClose</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>aboutToClose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>bytesWritten</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>bytesWritten</anchor>
            <arglist>(qint64 bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>channelBytesWritten</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>channelBytesWritten</anchor>
            <arglist>(int channel, qint64 bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>channelReadyRead</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>channelReadyRead</anchor>
            <arglist>(int channel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>close</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commitTransaction</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>commitTransaction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readChannelFinished</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readChannelFinished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readyRead</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readyRead</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>rollbackTransaction</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>rollbackTransaction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentReadChannel</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>setCurrentReadChannel</anchor>
            <arglist>(int channel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentWriteChannel</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>setCurrentWriteChannel</anchor>
            <arglist>(int channel)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setErrorString</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>setErrorString</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setOpenMode</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>setOpenMode</anchor>
            <arglist>(QIODeviceBase::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextModeEnabled</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>setTextModeEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startTransaction</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>startTransaction</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>ungetChar</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>ungetChar</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QIODevice</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>dtor.QIODevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODeviceBase::OpenMode</type>
            <name>openMode</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>openMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>atEnd</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canReadLine</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>canReadLine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOpen</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isOpen</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTextModeEnabled</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isTextModeEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTransactionStarted</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isTransactionStarted</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentReadChannel</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>currentReadChannel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentWriteChannel</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>currentWriteChannel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>readChannelCount</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>readChannelCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>writeChannelCount</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>writeChannelCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>pos</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>size</name>
            <anchorfile>qiodevice.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIODeviceBase</name>
        <filename>qiodevicebase.html</filename>
        <member kind="enumeration">
            <name>OpenModeFlag</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotOpen</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteOnly</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Append</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Truncate</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Text</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Unbuffered</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NewOnly</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExistingOnly</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QIODeviceBase::OpenModeFlag">
            <name>OpenMode</name>
            <anchorfile>qiodevicebase.html</anchorfile>
            <anchor>OpenModeFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIdentityProxyModel</name>
        <filename>qidentityproxymodel.html</filename>
        <base>QAbstractProxyModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIdentityProxyModel</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>QIdentityProxyModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveColumns</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>moveColumns</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceColumn, int count, const QModelIndex &amp;destinationParent, int destinationChild) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveRows</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>moveRows</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceRow, int count, const QModelIndex &amp;destinationParent, int destinationChild) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setHandleSourceDataChanges</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>setHandleSourceDataChanges</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setHandleSourceLayoutChanges</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>setHandleSourceLayoutChanges</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSourceModel</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>setSourceModel</anchor>
            <arglist>(QAbstractItemModel *newSourceModel) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QIdentityProxyModel</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>dtor.QIdentityProxyModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionFromSource</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>mapSelectionFromSource</anchor>
            <arglist>(const QItemSelection &amp;selection) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionToSource</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>mapSelectionToSource</anchor>
            <arglist>(const QItemSelection &amp;selection) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapFromSource</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>mapFromSource</anchor>
            <arglist>(const QModelIndex &amp;sourceIndex) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapToSource</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>mapToSource</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;child) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>match</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>handleSourceDataChanges</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>handleSourceDataChanges</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>handleSourceLayoutChanges</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>handleSourceLayoutChanges</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qidentityproxymodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemSelection</name>
        <filename>qitemselection.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelection</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>QItemSelection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelection</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>QItemSelection-1</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>merge</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>merge</anchor>
            <arglist>(const QItemSelection &amp;other, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>select</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>select</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>split</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>split</anchor>
            <arglist>(const QItemSelectionRange &amp;range, const QItemSelectionRange &amp;other, QItemSelection *result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>indexes</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>indexes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qitemselection.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QModelIndex &amp;index) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemSelectionModel</name>
        <filename>qitemselectionmodel.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>SelectionFlag</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoUpdate</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Clear</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Select</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Deselect</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Toggle</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Current</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rows</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Columns</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SelectCurrent</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToggleCurrent</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClearAndSelect</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>model</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionModel</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>QItemSelectionModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionModel</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>QItemSelectionModel-1</anchor>
            <arglist>(QAbstractItemModel *model, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clear</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>clearCurrentIndex</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>clearCurrentIndex</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearSelection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>clearSelection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>currentChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentColumnChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>currentColumnChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentRowChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>currentRowChanged</anchor>
            <arglist>(const QModelIndex &amp;current, const QModelIndex &amp;previous)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>emitSelectionChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>emitSelectionChanged</anchor>
            <arglist>(const QItemSelection &amp;newSelection, const QItemSelection &amp;oldSelection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>modelChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>modelChanged</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>reset</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>select</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>select</anchor>
            <arglist>(const QItemSelection &amp;selection, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>select</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>select-1</anchor>
            <arglist>(const QModelIndex &amp;index, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>selectionChanged</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectionChanged</anchor>
            <arglist>(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setCurrentIndex</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>setCurrentIndex</anchor>
            <arglist>(const QModelIndex &amp;index, QItemSelectionModel::SelectionFlags command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setModel</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>setModel</anchor>
            <arglist>(QAbstractItemModel *model)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QItemSelectionModel</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>dtor.QItemSelectionModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>currentIndex</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>currentIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>selectedColumns</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedColumns</anchor>
            <arglist>(int row) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>selectedIndexes</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedIndexes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>selectedRows</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedRows</anchor>
            <arglist>(int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>columnIntersectsSelection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>columnIntersectsSelection</anchor>
            <arglist>(int column, const QModelIndex &amp;parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSelection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>hasSelection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isColumnSelected</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>isColumnSelected</anchor>
            <arglist>(int column, const QModelIndex &amp;parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRowSelected</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>isRowSelected</anchor>
            <arglist>(int row, const QModelIndex &amp;parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSelected</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>isSelected</anchor>
            <arglist>(const QModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rowIntersectsSelection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>rowIntersectsSelection</anchor>
            <arglist>(int row, const QModelIndex &amp;parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>model-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QItemSelection</type>
            <name>selection</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QItemSelectionModel::SelectionFlag">
            <name>SelectionFlags</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>SelectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QModelIndexList">
            <name>selectedIndexes</name>
            <anchorfile>qitemselectionmodel.html</anchorfile>
            <anchor>selectedIndexes-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QItemSelectionRange</name>
        <filename>qitemselectionrange.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionRange</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>QItemSelectionRange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionRange</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>QItemSelectionRange-1</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QItemSelectionRange</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>QItemSelectionRange-2</anchor>
            <arglist>(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QItemSelectionRange &amp;lhs, const QItemSelectionRange &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QItemSelectionRange &amp;lhs, const QItemSelectionRange &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QItemSelectionRange &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QItemSelectionRange</type>
            <name>intersected</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QItemSelectionRange &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>parent</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndexList</type>
            <name>indexes</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>indexes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QModelIndex &amp;index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parentIndex) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QItemSelectionRange &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPersistentModelIndex &amp;</type>
            <name>bottomRight</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>bottomRight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QPersistentModelIndex &amp;</type>
            <name>topLeft</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>topLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>right</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>top</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qitemselectionrange.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIterable</name>
        <filename>qiterable.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt;</type>
            <name>mutableBegin</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>mutableBegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt;</type>
            <name>mutableEnd</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>mutableEnd</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt;</type>
            <name>constBegin</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QConstIterator&lt;Container&gt;</type>
            <name>constEnd</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canForwardIterate</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>canForwardIterate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canInputIterate</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>canInputIterate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canRandomAccessIterate</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>canRandomAccessIterate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canReverseIterate</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>canReverseIterate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qiterable.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QIterator</name>
        <filename>qiterator.html</filename>
        <base>QBaseIterator</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QIterator</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>QIterator</anchor>
            <arglist>(QIterable&lt;Container&gt; *iterable, void *iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt; &amp;</type>
            <name>operator++</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt; &amp;</type>
            <name>operator--</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt;</type>
            <name>operator+</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(qsizetype j, const QIterator&lt;Container&gt; &amp;k)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt;</type>
            <name>operator++</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt;</type>
            <name>operator--</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt;</type>
            <name>operator+</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIterator&lt;Container&gt;</type>
            <name>operator-</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QIterator&lt;Container&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QIterator&lt;Container&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qiterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QIterator&lt;Container&gt; &amp;j) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJalaliCalendar</name>
        <filename>qjalalicalendar.html</filename>
    </compound>
    <compound kind="class">
        <name>QJniArray</name>
        <filename>qjniarray.html</filename>
        <base>QJniArrayBase</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray-1</anchor>
            <arglist>(Container &amp;&amp;container)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray-2</anchor>
            <arglist>(QJniArray&lt;Other&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray-3</anchor>
            <arglist>(QJniArrayBase::size_type size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray-4</anchor>
            <arglist>(QJniObject &amp;&amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray-5</anchor>
            <arglist>(const QJniArray&lt;Other&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray-6</anchor>
            <arglist>(const QJniObject &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray-7</anchor>
            <arglist>(jarray array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>QJniArray-8</anchor>
            <arglist>(std::initializer_list&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QJniArray&lt;Other&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QJniArray&lt;Other&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::reference</type>
            <name>operator[]</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(QJniArrayBase::size_type i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJniArray</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>dtor.QJniArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Container</type>
            <name>toContainer</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>toContainer</anchor>
            <arglist>(Container &amp;&amp;container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_reference</type>
            <name>at</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(QJniArrayBase::size_type i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_reference</type>
            <name>operator[]</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(QJniArrayBase::size_type i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>rbegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArray&lt;T&gt;::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>rend-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>arrayObject</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>arrayObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qjniarray.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJniArrayBase</name>
        <filename>qjniarraybase.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>fromContainer</name>
            <anchorfile>qjniarraybase.html</anchorfile>
            <anchor>fromContainer</anchor>
            <arglist>(Container &amp;&amp;container)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qjniarraybase.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QJniArrayBase &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniArrayBase::size_type</type>
            <name>size</name>
            <anchorfile>qjniarraybase.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>operator QJniObject</name>
            <anchorfile>qjniarraybase.html</anchorfile>
            <anchor>operator-QJniObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>object</name>
            <anchorfile>qjniarraybase.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qjniarraybase.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qjniarraybase.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qjniarraybase.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJniEnvironment</name>
        <filename>qjnienvironment.html</filename>
        <member kind="enumeration">
            <name>OutputMode</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>OutputMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Silent</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>OutputMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Verbose</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>OutputMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>JNIEnv *</type>
            <name>getJniEnv</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>getJniEnv</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>JavaVM *</type>
            <name>javaVM</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>javaVM</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniEnvironment</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>QJniEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>checkAndClearExceptions</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>checkAndClearExceptions-1</anchor>
            <arglist>(JNIEnv *env, QJniEnvironment::OutputMode outputMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>checkAndClearExceptions</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>checkAndClearExceptions</anchor>
            <arglist>(QJniEnvironment::OutputMode outputMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerNativeMethods</name>
            <anchorfile>qjnienvironment-obsolete.html</anchorfile>
            <anchor>registerNativeMethods-3</anchor>
            <arglist>(const char *className, JNINativeMethod[] methods, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerNativeMethods</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>registerNativeMethods-4</anchor>
            <arglist>(const char *className, const JNINativeMethod[] methods, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerNativeMethods</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>registerNativeMethods-1</anchor>
            <arglist>(const char *className, std::initializer_list&lt;JNINativeMethod&gt; methods)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerNativeMethods</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>registerNativeMethods-5</anchor>
            <arglist>(jclass clazz, const JNINativeMethod[] methods, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerNativeMethods</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>registerNativeMethods-2</anchor>
            <arglist>(jclass clazz, std::initializer_list&lt;JNINativeMethod&gt; methods)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>registerNativeMethods</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>registerNativeMethods</anchor>
            <arglist>(std::initializer_list&lt;JNINativeMethod&gt; methods)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jclass</type>
            <name>findClass</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findClass</anchor>
            <arglist>(const char *className)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jfieldID</type>
            <name>findField</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findField</anchor>
            <arglist>(jclass clazz, const char *fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jfieldID</type>
            <name>findField</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findField-1</anchor>
            <arglist>(jclass clazz, const char *fieldName, const char *signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jfieldID</type>
            <name>findStaticField</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findStaticField</anchor>
            <arglist>(jclass clazz, const char *fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jfieldID</type>
            <name>findStaticField</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findStaticField-1</anchor>
            <arglist>(jclass clazz, const char *fieldName, const char *signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jmethodID</type>
            <name>findMethod</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findMethod</anchor>
            <arglist>(jclass clazz, const char *methodName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jmethodID</type>
            <name>findMethod</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findMethod-1</anchor>
            <arglist>(jclass clazz, const char *methodName, const char *signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jmethodID</type>
            <name>findStaticMethod</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findStaticMethod</anchor>
            <arglist>(jclass clazz, const char *methodName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jmethodID</type>
            <name>findStaticMethod</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>findStaticMethod-1</anchor>
            <arglist>(jclass clazz, const char *methodName, const char *signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJniEnvironment</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>dtor.QJniEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>JNIEnv &amp;</type>
            <name>operator*</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>JNIEnv *</type>
            <name>jniEnv</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>jniEnv</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>JNIEnv *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qjnienvironment.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJniObject</name>
        <filename>qjniobject.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject &amp;</type>
            <name>operator=</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(T object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>callStaticObjectMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticObjectMethod</anchor>
            <arglist>(const char *className, const char *methodName, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>callStaticObjectMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticObjectMethod-3</anchor>
            <arglist>(const char *className, const char *methodName, const char *signature, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>callStaticObjectMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticObjectMethod-1</anchor>
            <arglist>(jclass clazz, const char *methodName, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>callStaticObjectMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticObjectMethod-4</anchor>
            <arglist>(jclass clazz, const char *methodName, const char *signature, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>callStaticObjectMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticObjectMethod-2</anchor>
            <arglist>(jclass clazz, jmethodID methodId, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>construct</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>construct</anchor>
            <arglist>(Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>fromLocalRef</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>fromLocalRef</anchor>
            <arglist>(jobject localRef)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>fromString</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>getStaticObjectField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getStaticObjectField</anchor>
            <arglist>(const char *className, const char *fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>getStaticObjectField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getStaticObjectField-2</anchor>
            <arglist>(const char *className, const char *fieldName, const char *signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>getStaticObjectField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getStaticObjectField-1</anchor>
            <arglist>(jclass clazz, const char *fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>getStaticObjectField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getStaticObjectField-3</anchor>
            <arglist>(jclass clazz, const char *fieldName, const char *signature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>QJniObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>QJniObject-1</anchor>
            <arglist>(const char *className)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>QJniObject-4</anchor>
            <arglist>(const char *className, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>QJniObject-6</anchor>
            <arglist>(const char *className, const char *signature, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>QJniObject-2</anchor>
            <arglist>(jclass clazz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>QJniObject-5</anchor>
            <arglist>(jclass clazz, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>QJniObject-7</anchor>
            <arglist>(jclass clazz, const char *signature, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>QJniObject-3</anchor>
            <arglist>(jobject object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>callStaticMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticMethod-1</anchor>
            <arglist>(const char *className, const char *methodName, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>callStaticMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticMethod-4</anchor>
            <arglist>(const char *className, const char *methodName, const char *signature, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>callStaticMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticMethod</anchor>
            <arglist>(const char *methodName, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>callStaticMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticMethod-2</anchor>
            <arglist>(jclass clazz, const char *methodName, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>callStaticMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticMethod-5</anchor>
            <arglist>(jclass clazz, const char *methodName, const char *signature, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>callStaticMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callStaticMethod-3</anchor>
            <arglist>(jclass clazz, jmethodID methodId, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>getStaticField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getStaticField-1</anchor>
            <arglist>(const char *className, const char *fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>getStaticField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getStaticField</anchor>
            <arglist>(const char *fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>auto</type>
            <name>getStaticField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getStaticField-2</anchor>
            <arglist>(jclass clazz, const char *fieldName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isClassAvailable</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>isClassAvailable</anchor>
            <arglist>(const char *className)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJniObject &amp;o1, const QJniObject &amp;o2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJniObject &amp;o1, const QJniObject &amp;o2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>setField</anchor>
            <arglist>(const char *fieldName, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>setField-1</anchor>
            <arglist>(const char *fieldName, const char *signature, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStaticField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>setStaticField-1</anchor>
            <arglist>(const char *className, const char *fieldName, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStaticField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>setStaticField-3</anchor>
            <arglist>(const char *className, const char *fieldName, const char *signature, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStaticField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>setStaticField</anchor>
            <arglist>(const char *fieldName, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStaticField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>setStaticField-2</anchor>
            <arglist>(jclass clazz, const char *fieldName, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setStaticField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>setStaticField-4</anchor>
            <arglist>(jclass clazz, const char *fieldName, const char *signature, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QJniObject &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJniObject</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>dtor.QJniObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>className</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>className</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>callObjectMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callObjectMethod</anchor>
            <arglist>(const char *methodName, Args &amp;&amp;... args) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>callObjectMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callObjectMethod-1</anchor>
            <arglist>(const char *methodName, const char *signature, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>getObjectField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getObjectField</anchor>
            <arglist>(const char *fieldName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJniObject</type>
            <name>getObjectField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getObjectField-1</anchor>
            <arglist>(const char *fieldName, const char *signature) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>object</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>object-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>callMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callMethod</anchor>
            <arglist>(const char *methodName, Args &amp;&amp;... args) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>callMethod</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>callMethod-1</anchor>
            <arglist>(const char *methodName, const char *signature, Args &amp;&amp;... args) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>getField</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>getField</anchor>
            <arglist>(const char *fieldName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jclass</type>
            <name>objectClass</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>objectClass</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>jobject</type>
            <name>object</name>
            <anchorfile>qjniobject.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonArray</name>
        <filename>qjsonarray.html</filename>
        <class>QJsonArray::const_iterator</class>
        <class>QJsonArray::iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QJsonArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QJsonArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonArray</type>
            <name>fromStringList</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>fromStringList</anchor>
            <arglist>(const QStringList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonArray</type>
            <name>fromVariantList</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>fromVariantList</anchor>
            <arglist>(const QVariantList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>QJsonArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>QJsonArray-1</anchor>
            <arglist>(QJsonArray &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>QJsonArray-2</anchor>
            <arglist>(const QJsonArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>QJsonArray-3</anchor>
            <arglist>(std::initializer_list&lt;QJsonValue&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator</type>
            <name>begin</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator</type>
            <name>end</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator</type>
            <name>erase</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QJsonArray::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator</type>
            <name>insert</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(QJsonArray::iterator before, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>takeAt</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonArray &amp;lhs, const QJsonArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonArray &amp;lhs, const QJsonArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(qsizetype i, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_front</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAt</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(qsizetype i, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QJsonArray &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJsonArray</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>dtor.QJsonArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>operator+</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QJsonValue &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>begin</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>cend</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>end</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>at</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>first</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>first</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>last</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>last</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantList</type>
            <name>toVariantList</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>toVariantList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QJsonValue &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qjsonarray.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonArray::const_iterator</name>
        <filename>qjsonarray-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>operator++</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>operator--</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonArray::const_iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QJsonArray::const_iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QJsonArray::const_iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonArray::const_iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QJsonArray::const_iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QJsonArray::const_iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>const_iterator-1</anchor>
            <arglist>(const QJsonArray::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>operator+</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::const_iterator</type>
            <name>operator-</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueConstRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValueConstRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValueConstRef</type>
            <name>operator*</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QJsonArray::const_iterator other) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qjsonarray-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonArray::iterator</name>
        <filename>qjsonarray-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator</type>
            <name>operator++</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator</type>
            <name>operator--</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-lt-1</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-lt-eq-1</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-gt-1</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-gt-eq-1</anchor>
            <arglist>(const QJsonArray::iterator &amp;lhs, const QJsonArray::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator</type>
            <name>operator+</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray::iterator</type>
            <name>operator-</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator*</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValueConstRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QJsonArray::iterator other) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qjsonarray-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonDocument</name>
        <filename>qjsondocument.html</filename>
        <member kind="enumeration">
            <name>JsonFormat</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>JsonFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Indented</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>JsonFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Compact</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>JsonFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonDocument &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QJsonDocument &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonDocument &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QJsonDocument &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonDocument</type>
            <name>fromJson</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>fromJson</anchor>
            <arglist>(const QByteArray &amp;json, QJsonParseError *error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonDocument</type>
            <name>fromVariant</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>fromVariant</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument-1</anchor>
            <arglist>(QJsonDocument &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument-2</anchor>
            <arglist>(const QJsonArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument-3</anchor>
            <arglist>(const QJsonDocument &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>QJsonDocument-4</anchor>
            <arglist>(const QJsonObject &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonDocument &amp;lhs, const QJsonDocument &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonDocument &amp;lhs, const QJsonDocument &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArray</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>setArray</anchor>
            <arglist>(const QJsonArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObject</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>setObject</anchor>
            <arglist>(const QJsonObject &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QJsonDocument &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJsonDocument</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>dtor.QJsonDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toJson</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>toJson</anchor>
            <arglist>(QJsonDocument::JsonFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>array</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>array</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>object</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>object</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>toVariant</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>toVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isArray</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>isArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isObject</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>isObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-5b-5d-3</anchor>
            <arglist>(QStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsondocument.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonObject</name>
        <filename>qjsonobject.html</filename>
        <class>QJsonObject::const_iterator</class>
        <class>QJsonObject::iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QJsonObject &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QJsonObject &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonObject</type>
            <name>fromVariantHash</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>fromVariantHash</anchor>
            <arglist>(const QVariantHash &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonObject</type>
            <name>fromVariantMap</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>fromVariantMap</anchor>
            <arglist>(const QVariantMap &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>QJsonObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>QJsonObject-1</anchor>
            <arglist>(QJsonObject &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>QJsonObject-2</anchor>
            <arglist>(const QJsonObject &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>QJsonObject-3</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;QString, QJsonValue&gt;&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>begin</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>end</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>erase</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QJsonObject::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>find</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>find-1</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>find</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(QStringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>find</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>insert</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(QLatin1StringView key, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>insert</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(QStringView key, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>insert</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp;key, const QJsonValue &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>take</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>take-1</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>take</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>take-2</anchor>
            <arglist>(QStringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>take</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-5b-5d-3</anchor>
            <arglist>(QStringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonObject &amp;lhs, const QJsonObject &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonObject &amp;lhs, const QJsonObject &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>remove-1</anchor>
            <arglist>(QLatin1StringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(QStringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QJsonObject &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJsonObject</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>dtor.QJsonObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>begin</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>constFind-1</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>constFind-2</anchor>
            <arglist>(QStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>end</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>find</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>find-3</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>find</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>find-4</anchor>
            <arglist>(QStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>find</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>find-5</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-5b-5d-4</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-5b-5d-5</anchor>
            <arglist>(QStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>value</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>value</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>value-2</anchor>
            <arglist>(QStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>value</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>keys</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantHash</type>
            <name>toVariantHash</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>toVariantHash</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantMap</type>
            <name>toVariantMap</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>toVariantMap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(QStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>mapped_type</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>mapped_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qjsonobject.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonObject::const_iterator</name>
        <filename>qjsonobject-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>operator++</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>operator--</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonObject::const_iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QJsonObject::const_iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QJsonObject::const_iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonObject::const_iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QJsonObject::const_iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QJsonObject::const_iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>const_iterator-1</anchor>
            <arglist>(const QJsonObject::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>operator+</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::const_iterator</type>
            <name>operator-</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueConstRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueConstRef</type>
            <name>value</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValueConstRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValueConstRef</type>
            <name>operator*</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QJsonObject::const_iterator other) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qjsonobject-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonObject::iterator</name>
        <filename>qjsonobject-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>operator++</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>operator--</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-lt-1</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-lt-eq-1</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-gt-1</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-gt-eq-1</anchor>
            <arglist>(const QJsonObject::iterator &amp;lhs, const QJsonObject::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>operator+</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject::iterator</type>
            <name>operator-</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator*</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>operator[]</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValueRef</type>
            <name>value</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValueConstRef *</type>
            <name>operator-&gt;</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator--gt-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QJsonObject::iterator other) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qjsonobject-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonParseError</name>
        <filename>qjsonparseerror.html</filename>
        <member kind="enumeration">
            <name>ParseError</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnterminatedObject</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MissingNameSeparator</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnterminatedArray</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MissingValueSeparator</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalValue</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TerminationByNumber</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalNumber</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalEscapeSequence</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IllegalUTF8String</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnterminatedString</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MissingObject</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeepNesting</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentTooLarge</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GarbageAtEnd</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>ParseError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qjsonparseerror.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJsonValue</name>
        <filename>qjsonvalue.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Null</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bool</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Double</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>String</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Array</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Object</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Undefined</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QJsonValue &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue &amp;</type>
            <name>operator=</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QJsonValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonValue</type>
            <name>fromJson</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>fromJson</anchor>
            <arglist>(QByteArrayView json, QJsonParseError *error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJsonValue</type>
            <name>fromVariant</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>fromVariant</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-11</anchor>
            <arglist>(QJsonArray &amp;&amp;a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-12</anchor>
            <arglist>(QJsonObject &amp;&amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue</anchor>
            <arglist>(QJsonValue &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-1</anchor>
            <arglist>(QJsonValue::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-2</anchor>
            <arglist>(QLatin1StringView s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-3</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-4</anchor>
            <arglist>(const QJsonArray &amp;a)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-5</anchor>
            <arglist>(const QJsonObject &amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-6</anchor>
            <arglist>(const QJsonValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-7</anchor>
            <arglist>(const QString &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-8</anchor>
            <arglist>(const char *s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-9</anchor>
            <arglist>(double v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-13</anchor>
            <arglist>(int v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>QJsonValue-14</anchor>
            <arglist>(qint64 v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QJsonValue &amp;lhs, const QJsonValue &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QJsonValue &amp;lhs, const QJsonValue &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QJsonValue &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QJsonValue</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>dtor.QJsonValue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toJson</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toJson</anchor>
            <arglist>(QJsonValue::JsonFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>toArray</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toArray-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>toArray</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toArray</anchor>
            <arglist>(const QJsonArray &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>toObject</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toObject-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>toObject</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toObject</anchor>
            <arglist>(const QJsonObject &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue::Type</type>
            <name>type</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toString-1</anchor>
            <arglist>(const QString &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>toVariant</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isArray</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBool</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isBool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDouble</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isDouble</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isObject</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isString</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUndefined</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>isUndefined</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toBool</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toBool</anchor>
            <arglist>(bool defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-5b-5d-2</anchor>
            <arglist>(QLatin1StringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-5b-5d-3</anchor>
            <arglist>(QStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QJsonValue</type>
            <name>operator[]</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(double defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(int defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>toInteger</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>toInteger</anchor>
            <arglist>(qint64 defaultValue) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>JsonFormat</name>
            <anchorfile>qjsonvalue.html</anchorfile>
            <anchor>JsonFormat-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QJulianCalendar</name>
        <filename>qjuliancalendar.html</filename>
        <base>QRomanCalendar</base>
    </compound>
    <compound kind="class">
        <name>QKeyCombination</name>
        <filename>qkeycombination.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;out, QKeyCombination combination)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-gt-gt-7</anchor>
            <arglist>(QDataStream &amp;in, QKeyCombination &amp;combination)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDebug debug, QKeyCombination combination)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QKeyCombination</type>
            <name>fromCombined</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>fromCombined</anchor>
            <arglist>(int combined)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(Qt::Key key, Qt::KeyboardModifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(Qt::Key key, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-2</anchor>
            <arglist>(Qt::Key key, Qt::Modifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-3</anchor>
            <arglist>(Qt::Key key, Qt::Modifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-4</anchor>
            <arglist>(Qt::KeyboardModifier modifier, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-5</anchor>
            <arglist>(Qt::KeyboardModifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-6</anchor>
            <arglist>(Qt::Modifier modifier, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-7</anchor>
            <arglist>(Qt::Modifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(Qt::Key key, Qt::KeyboardModifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-1</anchor>
            <arglist>(Qt::Key key, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-2</anchor>
            <arglist>(Qt::Key key, Qt::Modifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-3</anchor>
            <arglist>(Qt::Key key, Qt::Modifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-4</anchor>
            <arglist>(Qt::KeyboardModifier modifier, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-5</anchor>
            <arglist>(Qt::KeyboardModifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-6</anchor>
            <arglist>(Qt::Modifier modifier, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-7</anchor>
            <arglist>(Qt::Modifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyCombination</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>QKeyCombination</anchor>
            <arglist>(Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyCombination</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>QKeyCombination-1</anchor>
            <arglist>(Qt::KeyboardModifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyCombination</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>QKeyCombination-2</anchor>
            <arglist>(Qt::Modifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QKeyCombination &amp;lhs, const QKeyCombination &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QKeyCombination &amp;lhs, const QKeyCombination &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>qHash-3</anchor>
            <arglist>(QKeyCombination key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::Key</type>
            <name>key</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::KeyboardModifiers</type>
            <name>keyboardModifiers</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>keyboardModifiers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>operator int</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-int</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toCombined</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>toCombined</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QKeyValueIterator</name>
        <filename>qkeyvalueiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyValueIterator</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>QKeyValueIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QKeyValueIterator</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>QKeyValueIterator-1</anchor>
            <arglist>(Iterator o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyValueIterator&lt;Key, T, Iterator&gt; &amp;</type>
            <name>operator++</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyValueIterator&lt;Key, T, Iterator&gt; &amp;</type>
            <name>operator--</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyValueIterator&lt;Key, T, Iterator&gt;</type>
            <name>operator++</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyValueIterator&lt;Key, T, Iterator&gt;</type>
            <name>operator--</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QKeyValueIterator&lt;Key, T, Iterator&gt; lhs, QKeyValueIterator&lt;Key, T, Iterator&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QKeyValueIterator&lt;Key, T, Iterator&gt; lhs, QKeyValueIterator&lt;Key, T, Iterator&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Iterator</type>
            <name>base</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>base</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyValueIterator&lt;Key, T, Iterator&gt;::pointer</type>
            <name>operator-&gt;</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;Key, T&gt;</type>
            <name>operator*</name>
            <anchorfile>qkeyvalueiterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLEInteger</name>
        <filename>qleinteger.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLEInteger</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>QLEInteger</anchor>
            <arglist>(T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator%=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-25-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator*=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator++</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator--</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator/=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-lt-lt-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator&gt;&gt;=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-gt-gt-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator^=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-5e-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt; &amp;</type>
            <name>operator|=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(T i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLEInteger&lt;T&gt;</type>
            <name>max</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>max</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLEInteger&lt;T&gt;</type>
            <name>min</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>min</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt;</type>
            <name>operator++</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLEInteger&lt;T&gt;</type>
            <name>operator--</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator T</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-T</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QLEInteger&lt;T&gt; other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qleinteger.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QLEInteger&lt;T&gt; other) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLatin1Char</name>
        <filename>qlatin1char.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1Char</type>
            <name>operator&quot;&quot;_L1</name>
            <anchorfile>qlatin1char.html</anchorfile>
            <anchor>operator-22-22_L1</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1Char</name>
            <anchorfile>qlatin1char.html</anchorfile>
            <anchor>QLatin1Char</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char</type>
            <name>toLatin1</name>
            <anchorfile>qlatin1char.html</anchorfile>
            <anchor>toLatin1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char16_t</type>
            <name>unicode</name>
            <anchorfile>qlatin1char.html</anchorfile>
            <anchor>unicode</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLatin1String</name>
        <filename>qlatin1string.html</filename>
    </compound>
    <compound kind="class">
        <name>QLatin1StringMatcher</name>
        <filename>qlatin1stringmatcher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringMatcher</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>QLatin1StringMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringMatcher</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>QLatin1StringMatcher-1</anchor>
            <arglist>(QLatin1StringView pattern, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPattern</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>setPattern</anchor>
            <arglist>(QLatin1StringView pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLatin1StringMatcher</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>dtor.QLatin1StringMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>pattern</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>indexIn</anchor>
            <arglist>(QLatin1StringView haystack, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qlatin1stringmatcher.html</anchorfile>
            <anchor>indexIn-1</anchor>
            <arglist>(QStringView haystack, qsizetype from) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLatin1StringView</name>
        <filename>qlatin1stringview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView &amp;</type>
            <name>slice</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>slice</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView &amp;</type>
            <name>slice</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>slice-1</anchor>
            <arglist>(qsizetype pos, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>operator&quot;&quot;_L1</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-22-22_L1-1</anchor>
            <arglist>(const char *str, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringView</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>QLatin1StringView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringView</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>QLatin1StringView-1</anchor>
            <arglist>(QByteArrayView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringView</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>QLatin1StringView-2</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringView</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>QLatin1StringView-5</anchor>
            <arglist>(const char *first, const char *last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringView</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>QLatin1StringView-3</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringView</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>QLatin1StringView-6</anchor>
            <arglist>(const char *str, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLatin1StringView</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>QLatin1StringView-4</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QChar &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-not-eq-10</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QChar &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-not-eq-3</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-not-eq-4</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-not-eq-5</anchor>
            <arglist>(const QStringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-not-eq-6</anchor>
            <arglist>(const char *const &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QChar &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-10</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-1</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QChar &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-2</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-3</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-4</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-5</anchor>
            <arglist>(const QStringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-6</anchor>
            <arglist>(const char *const &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QChar &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-eq-10</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-eq-1</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QChar &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-eq-2</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-eq-3</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-eq-4</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-eq-5</anchor>
            <arglist>(const QStringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-lt-eq-6</anchor>
            <arglist>(const char *const &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QChar &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-eq-eq-10</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QChar &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-eq-eq-3</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-eq-eq-4</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-eq-eq-5</anchor>
            <arglist>(const QStringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-eq-eq-6</anchor>
            <arglist>(const char *const &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QChar &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-10</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-1</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QChar &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-2</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-3</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-4</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-5</anchor>
            <arglist>(const QStringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-6</anchor>
            <arglist>(const char *const &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QChar &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-eq-10</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-eq-1</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QChar &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-eq-2</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-eq-3</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-eq-4</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-eq-5</anchor>
            <arglist>(const QStringView &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-gt-eq-6</anchor>
            <arglist>(const char *const &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qsizetype</type>
            <name>maxSize</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>maxSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toUtf8</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toUtf8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1Char</type>
            <name>at</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1Char</type>
            <name>back</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>back</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1Char</type>
            <name>first</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>first</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1Char</type>
            <name>front</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>front</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1Char</type>
            <name>last</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>last</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1Char</type>
            <name>operator[]</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>chopped</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>chopped</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>first</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>last</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>left</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>mid</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(qsizetype start, qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>right</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>sliced</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>sliced</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(qsizetype pos, qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>trimmed</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>trimmed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView::const_iterator</type>
            <name>begin</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView::const_iterator</type>
            <name>cend</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView::const_iterator</type>
            <name>end</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>arg</anchor>
            <arglist>(Args &amp;&amp;... args) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(QChar c, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>endsWith-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>endsWith-2</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>endsWith-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>startsWith-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>startsWith-2</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>startsWith-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>constBegin</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>constData</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>constEnd</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>data</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>latin1</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>latin1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>decltype(qTokenize(*this, std::forward&lt;Needle&gt;(needle), flags...))</type>
            <name>tokenize</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>tokenize</anchor>
            <arglist>(qTokenize(*this, std::forward&lt;Needle&gt;(needle), flags...)) tokenize(Needle &amp;&amp;sep, Flags... flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>compare-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>compare-2</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>compare-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>compare-4</anchor>
            <arglist>(QUtf8StringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QChar c, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>indexOf-1</anchor>
            <arglist>(QLatin1StringView l1, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>indexOf-2</anchor>
            <arglist>(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(QChar c, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>lastIndexOf-3</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>lastIndexOf-4</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>lastIndexOf-1</anchor>
            <arglist>(QLatin1StringView l1, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>lastIndexOf-5</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLibrary</name>
        <filename>qlibrary.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>LoadHint</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>LoadHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ResolveAllSymbolsHint</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExportExternalSymbolsHint</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LoadArchiveMemberHint</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreventUnloadHint</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeepBindHint</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFunctionPointer</type>
            <name>resolve</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>resolve-2</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;version, const char *symbol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFunctionPointer</type>
            <name>resolve</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>resolve-1</anchor>
            <arglist>(const QString &amp;fileName, const char *symbol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFunctionPointer</type>
            <name>resolve</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>resolve-3</anchor>
            <arglist>(const QString &amp;fileName, int verNum, const char *symbol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFunctionPointer</type>
            <name>resolve</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>resolve</anchor>
            <arglist>(const char *symbol)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>QLibrary</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>QLibrary-1</anchor>
            <arglist>(const QString &amp;fileName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>QLibrary-2</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;version, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>QLibrary-3</anchor>
            <arglist>(const QString &amp;fileName, int verNum, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>isLibrary</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>load</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unload</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>unload</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileNameAndVersion</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>setFileNameAndVersion</anchor>
            <arglist>(const QString &amp;fileName, const QString &amp;version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileNameAndVersion</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>setFileNameAndVersion-1</anchor>
            <arglist>(const QString &amp;fileName, int versionNumber)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoadHints</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist>(QLibrary::LoadHints hints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QLibrary</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>dtor.QLibrary</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLibrary::LoadHints</type>
            <name>loadHints</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoaded</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>isLoaded</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QLibrary::LoadHint">
            <name>LoadHints</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>LoadHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>fileName</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="LoadHints">
            <name>loadHints</name>
            <anchorfile>qlibrary.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLibraryInfo</name>
        <filename>qlibraryinfo.html</filename>
        <member kind="enumeration">
            <name>LibraryPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PrefixPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentationPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HeadersPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LibrariesPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LibraryExecutablesPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BinariesPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PluginsPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QmlImportsPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qml2ImportsPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArchDataPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TranslationsPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExamplesPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TestsPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SettingsPath</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>LibraryPath-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>location</name>
            <anchorfile>qlibraryinfo-obsolete.html</anchorfile>
            <anchor>location</anchor>
            <arglist>(QLibraryInfo::LibraryLocation loc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>path</anchor>
            <arglist>(QLibraryInfo::LibraryPath p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>paths</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>paths</anchor>
            <arglist>(QLibraryInfo::LibraryPath p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVersionNumber</type>
            <name>version</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>version</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isDebugBuild</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>isDebugBuild</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isSharedBuild</name>
            <anchorfile>qlibraryinfo.html</anchorfile>
            <anchor>isSharedBuild</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="">
            <name>LibraryLocation</name>
            <anchorfile>qlibraryinfo-obsolete.html</anchorfile>
            <anchor>LibraryLocation-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLine</name>
        <filename>qline.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>operator-lt-lt-9</anchor>
            <arglist>(QDataStream &amp;stream, const QLine &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>operator-gt-gt-8</anchor>
            <arglist>(QDataStream &amp;stream, QLine &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLine</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>QLine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLine</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>QLine-1</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLine</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>QLine-2</anchor>
            <arglist>(int x1, int y1, int x2, int y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QLine &amp;lhs, const QLine &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QLine &amp;lhs, const QLine &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLine</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>setLine</anchor>
            <arglist>(int x1, int y1, int x2, int y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setP1</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>setP1</anchor>
            <arglist>(const QPoint &amp;p1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setP2</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>setP2</anchor>
            <arglist>(const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoints</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>setPoints</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>translated</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(const QPoint &amp;offset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>translated</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>translated-1</anchor>
            <arglist>(int dx, int dy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>toLineF</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>toLineF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>center</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>p1</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>p1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>p2</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>p2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dx</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>dx</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>dy</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>dy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x1</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>x1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x2</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>x2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y1</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>y1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y2</name>
            <anchorfile>qline.html</anchorfile>
            <anchor>y2</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLineF</name>
        <filename>qlinef.html</filename>
        <member kind="enumeration">
            <name>IntersectionType</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>IntersectionType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoIntersection</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>IntersectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BoundedIntersection</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>IntersectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnboundedIntersection</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>IntersectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>operator-lt-lt-10</anchor>
            <arglist>(QDataStream &amp;stream, const QLineF &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>operator-gt-gt-9</anchor>
            <arglist>(QDataStream &amp;stream, QLineF &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLineF</type>
            <name>fromPolar</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>fromPolar</anchor>
            <arglist>(qreal length, qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineF</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>QLineF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineF</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>QLineF-1</anchor>
            <arglist>(const QLine &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineF</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>QLineF-2</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLineF</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>QLineF-3</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QLineF &amp;lhs, const QLineF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QLineF &amp;lhs, const QLineF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QLineF &amp;lhs, const QLineF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyIsNull</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>qFuzzyIsNull</anchor>
            <arglist>(const QLineF &amp;line)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAngle</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setAngle</anchor>
            <arglist>(qreal angle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLength</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setLength</anchor>
            <arglist>(qreal length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLine</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setLine</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setP1</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setP1</anchor>
            <arglist>(const QPointF &amp;p1)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setP2</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setP2</anchor>
            <arglist>(const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPoints</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>setPoints</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>toLine</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>toLine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>normalVector</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>normalVector</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>translated</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(const QPointF &amp;offset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>translated</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>translated-1</anchor>
            <arglist>(qreal dx, qreal dy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>unitVector</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>unitVector</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF::IntersectionType</type>
            <name>intersects</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QLineF &amp;line, QPointF *intersectionPoint) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>center</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>p1</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>p1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>p2</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>p2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>pointAt</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>pointAt</anchor>
            <arglist>(qreal t) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angle</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>angle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>angleTo</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>angleTo</anchor>
            <arglist>(const QLineF &amp;line) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dx</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>dx</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>dy</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>dy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>length</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x1</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>x1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x2</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>x2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y1</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>y1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y2</name>
            <anchorfile>qlinef.html</anchorfile>
            <anchor>y2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>IntersectType</name>
            <anchorfile>qlinef-obsolete.html</anchorfile>
            <anchor>IntersectType-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QList</name>
        <filename>qlist.html</filename>
        <class>QList::const_iterator</class>
        <class>QList::iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(QDataStream &amp;out, const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-gt-gt-10</anchor>
            <arglist>(QDataStream &amp;in, QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-5</anchor>
            <arglist>(InputIterator first, InputIterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-1</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-2</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-3</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-6</anchor>
            <arglist>(qsizetype size, QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-7</anchor>
            <arglist>(qsizetype size, Qt::Initialization)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>QList-4</anchor>
            <arglist>(std::initializer_list&lt;T&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>assign</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>assign-1</anchor>
            <arglist>(InputIterator first, InputIterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>assign</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>assign-2</anchor>
            <arglist>(qsizetype n, QList&lt;T&gt;::parameter_type t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>assign</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>assign</anchor>
            <arglist>(std::initializer_list&lt;T&gt; l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>fill</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-eq-1</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-eq-3</anchor>
            <arglist>(QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(std::initializer_list&lt;T&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;T&gt;</type>
            <name>fromList</name>
            <anchorfile>qlist-obsolete.html</anchorfile>
            <anchor>fromList</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;T&gt;</type>
            <name>fromVector</name>
            <anchorfile>qlist-obsolete.html</anchorfile>
            <anchor>fromVector</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;other) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>emplace</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>emplace-1</anchor>
            <arglist>(QList&lt;T&gt;::const_iterator before, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>emplace</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>emplace</anchor>
            <arglist>(qsizetype i, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>erase-2</anchor>
            <arglist>(QList&lt;T&gt;::const_iterator begin, QList&lt;T&gt;::const_iterator end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QList&lt;T&gt;::const_iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(QList&lt;T&gt;::const_iterator before, QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(QList&lt;T&gt;::const_iterator before, QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(QList&lt;T&gt;::const_iterator before, qsizetype count, QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(qsizetype i, QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(qsizetype i, QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>insert-5</anchor>
            <arglist>(qsizetype i, qsizetype count, QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::pointer</type>
            <name>data</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::reference</type>
            <name>back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::reference</type>
            <name>emplaceBack</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>emplaceBack</anchor>
            <arglist>(Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::reference</type>
            <name>emplace_back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>emplace_back</anchor>
            <arglist>(Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::reference</type>
            <name>front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::reference</type>
            <name>operator[]</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::value_type</type>
            <name>takeFirst</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>takeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::value_type</type>
            <name>takeLast</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>takeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>takeAt</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>takeAt</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>operator&lt;=&gt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-eq-gt</anchor>
            <arglist>(const QList&lt;T&gt; &amp;lhs, const QList&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeOne</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeOne</anchor>
            <arglist>(const AT &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>erase-1</anchor>
            <arglist>(QList&lt;T&gt; &amp;list, const AT &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>erase_if-2</anchor>
            <arglist>(QList&lt;T&gt; &amp;list, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qsizetype</type>
            <name>maxSize</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>maxSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>removeAll</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeAll</anchor>
            <arglist>(const AT &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>removeIf</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>qHash-20</anchor>
            <arglist>(const QList&lt;T&gt; &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>append-3</anchor>
            <arglist>(QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>append-4</anchor>
            <arglist>(const QList&lt;T&gt; &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>move</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>move</anchor>
            <arglist>(qsizetype from, qsizetype to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>pop_front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>prepend-1</anchor>
            <arglist>(QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>push_back-1</anchor>
            <arglist>(QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>push_front-1</anchor>
            <arglist>(QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(qsizetype i, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAt</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFirst</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(qsizetype i, QList&lt;T&gt;::parameter_type value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>replace-1</anchor>
            <arglist>(qsizetype i, QList&lt;T&gt;::rvalue_ref value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>resize-1</anchor>
            <arglist>(qsizetype size, QList&lt;T&gt;::parameter_type c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeForOverwrite</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>resizeForOverwrite</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shrink_to_fit</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>shrink_to_fit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QList&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swapItemsAt</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>swapItemsAt</anchor>
            <arglist>(qsizetype i, qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QList</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>dtor.QList</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>first</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>last</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>mid</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(qsizetype pos, qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-2</anchor>
            <arglist>(QList&lt;T&gt; &amp;&amp;other) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-2b-3</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>sliced</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>sliced</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(qsizetype pos, qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>toList</name>
            <anchorfile>qlist-obsolete.html</anchorfile>
            <anchor>toList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>toVector</name>
            <anchorfile>qlist-obsolete.html</anchorfile>
            <anchor>toVector</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_pointer</type>
            <name>constData</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_pointer</type>
            <name>data</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_reference</type>
            <name>at</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_reference</type>
            <name>back</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>back-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_reference</type>
            <name>front</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>front-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_reference</type>
            <name>operator[]</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>rbegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>rend-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>(qsizetype i, QList&lt;T&gt;::parameter_type defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const AT &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(QList&lt;T&gt;::parameter_type value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>constFirst</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>constFirst</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>constLast</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>constLast</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>first-2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>last-2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capacity</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const AT &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const AT &amp;value, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const AT &amp;value, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>parameter_type</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>parameter_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>rvalue_ref</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>rvalue_ref-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qlist.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QList::const_iterator</name>
        <filename>qlist-const-iterator.html</filename>
    </compound>
    <compound kind="class">
        <name>QList::iterator</name>
        <filename>qlist-iterator.html</filename>
    </compound>
    <compound kind="class">
        <name>QListIterator</name>
        <filename>qlistiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QListIterator</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>QListIterator</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QListIterator&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>previous</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qlistiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLocale</name>
        <filename>qlocale.html</filename>
        <member kind="enumeration">
            <name>Country</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AnyTerritory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Afghanistan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlandIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Albania</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Algeria</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AmericanSamoa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Andorra</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Angola</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Anguilla</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Antarctica</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AntiguaAndBarbuda</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Argentina</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Armenia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Aruba</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AscensionIsland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Australia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Austria</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Azerbaijan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bahamas</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bahrain</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bangladesh</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Barbados</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Belarus</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Belgium</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Belize</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Benin</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bermuda</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bhutan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bolivia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BosniaAndHerzegovina</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Botswana</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BouvetIsland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Brazil</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BritishIndianOceanTerritory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BritishVirginIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Brunei</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bulgaria</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BurkinaFaso</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Burundi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cambodia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cameroon</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Canada</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanaryIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CapeVerde</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CaribbeanNetherlands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CaymanIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CentralAfricanRepublic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CeutaAndMelilla</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chad</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chile</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>China</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChristmasIsland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClippertonIsland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CocosIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Colombia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Comoros</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CongoBrazzaville</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CongoKinshasa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CookIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CostaRica</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Croatia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cuba</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Curacao</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cyprus</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Czechia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Denmark</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiegoGarcia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Djibouti</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dominica</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DominicanRepublic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ecuador</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Egypt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ElSalvador</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EquatorialGuinea</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Eritrea</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Estonia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Eswatini</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ethiopia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Europe</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EuropeanUnion</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FalklandIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FaroeIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fiji</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Finland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>France</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrenchGuiana</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrenchPolynesia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FrenchSouthernTerritories</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gabon</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gambia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Georgia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Germany</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ghana</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gibraltar</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Greece</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Greenland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Grenada</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Guadeloupe</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Guam</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Guatemala</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Guernsey</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GuineaBissau</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Guinea</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Guyana</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Haiti</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HeardAndMcDonaldIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Honduras</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HongKong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hungary</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Iceland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>India</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Indonesia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Iran</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Iraq</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ireland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsleOfMan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Israel</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Italy</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IvoryCoast</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Jamaica</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Japan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Jersey</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Jordan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kazakhstan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kenya</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kiribati</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kosovo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kuwait</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kyrgyzstan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Laos</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LatinAmerica</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Latvia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lebanon</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lesotho</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Liberia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Libya</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Liechtenstein</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lithuania</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Luxembourg</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Macao</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Macedonia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Madagascar</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Malawi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Malaysia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Maldives</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mali</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Malta</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MarshallIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Martinique</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mauritania</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mauritius</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mayotte</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mexico</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Micronesia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Moldova</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Monaco</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mongolia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Montenegro</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Montserrat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Morocco</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mozambique</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Myanmar</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Namibia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NauruTerritory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nepal</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Netherlands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NewCaledonia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NewZealand</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nicaragua</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nigeria</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Niger</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Niue</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorfolkIsland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorthernMarianaIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorthKorea</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Norway</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Oman</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutlyingOceania</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pakistan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Palau</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PalestinianTerritories</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Panama</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PapuaNewGuinea</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Paraguay</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Peru</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Philippines</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pitcairn</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Poland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Portugal</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PuertoRico</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Qatar</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Reunion</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Romania</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Russia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rwanda</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintBarthelemy</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintHelena</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintKittsAndNevis</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintLucia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintMartin</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintPierreAndMiquelon</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintVincentAndGrenadines</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Samoa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SanMarino</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaoTomeAndPrincipe</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaudiArabia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Senegal</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Serbia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Seychelles</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SierraLeone</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Singapore</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SintMaarten</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Slovakia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Slovenia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SolomonIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Somalia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthAfrica</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthGeorgiaAndSouthSandwichIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthKorea</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthSudan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Spain</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SriLanka</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sudan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Suriname</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SvalbardAndJanMayen</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sweden</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Switzerland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Syria</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Taiwan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tajikistan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tanzania</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Thailand</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TimorLeste</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Togo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TokelauTerritory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tonga</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TrinidadAndTobago</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TristanDaCunha</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tunisia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Turkey</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Turkmenistan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TurksAndCaicosIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TuvaluTerritory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uganda</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ukraine</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnitedArabEmirates</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnitedKingdom</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnitedStatesOutlyingIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnitedStates</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnitedStatesVirginIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uruguay</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uzbekistan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vanuatu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VaticanCity</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Venezuela</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vietnam</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WallisAndFutuna</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WesternSahara</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>World</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Yemen</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Zambia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Zimbabwe</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyCountry</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bonaire</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BosniaAndHerzegowina</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CuraSao</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CzechRepublic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DemocraticRepublicOfCongo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DemocraticRepublicOfKorea</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EastTimor</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LatinAmericaAndTheCaribbean</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Macau</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NauruCountry</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PeoplesRepublicOfCongo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RepublicOfKorea</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RussianFederation</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaintVincentAndTheGrenadines</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthGeorgiaAndTheSouthSandwichIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SvalbardAndJanMayenIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Swaziland</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SyrianArabRepublic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TokelauCountry</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TuvaluCountry</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnitedStatesMinorOutlyingIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VaticanCityState</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WallisAndFutunaIslands</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastTerritory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastCountry</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Country-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CurrencySymbolFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>CurrencySymbolFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CurrencyIsoCode</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>CurrencySymbolFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CurrencySymbol</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>CurrencySymbolFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CurrencyDisplayName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>CurrencySymbolFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DataSizeFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>DataSizeFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DataSizeBase1000</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>DataSizeFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataSizeSIQuantifiers</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>DataSizeFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataSizeIecFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>DataSizeFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataSizeTraditionalFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>DataSizeFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DataSizeSIFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>DataSizeFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FloatingPointPrecisionOption</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>FloatingPointPrecisionOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FloatingPointShortest</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>FloatingPointPrecisionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FormatType</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>FormatType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LongFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShortFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NarrowFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>FormatType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Language</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AnyLanguage</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>C</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Abkhazian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Afar</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Afrikaans</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Aghem</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Akan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Akkadian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Akoose</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Albanian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AmericanSignLanguage</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Amharic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AncientEgyptian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AncientGreek</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Arabic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Aragonese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Aramaic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Armenian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Assamese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Asturian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Asu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Atsam</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Avaric</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Avestan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Aymara</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Azerbaijani</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bafia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Balinese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bambara</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bamun</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bangla</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Basaa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bashkir</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Basque</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BatakToba</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Belarusian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bemba</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bena</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bhojpuri</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bislama</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Blin</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bodo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bosnian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Breton</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Buginese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bulgarian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Burmese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cantonese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Catalan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cebuano</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CentralAtlasTamazight</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CentralKurdish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chakma</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chamorro</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chechen</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cherokee</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chickasaw</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chiga</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chinese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Church</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chuvash</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Colognian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Coptic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cornish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Corsican</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cree</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Croatian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Czech</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Danish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Divehi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dogri</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Duala</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dutch</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dzongkha</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Embu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>English</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Erzya</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Esperanto</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Estonian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ewe</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ewondo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Faroese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fijian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Filipino</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Finnish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>French</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Friulian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Fulah</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gaelic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ga</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Galician</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ganda</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Geez</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Georgian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>German</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gothic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Greek</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Guarani</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gujarati</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Gusii</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Haitian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hausa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hawaiian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hebrew</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Herero</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hindi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HiriMotu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hungarian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Icelandic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ido</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Igbo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InariSami</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Indonesian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ingush</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Interlingua</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Interlingue</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Inuktitut</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Inupiaq</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Irish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Italian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Japanese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Javanese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Jju</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JolaFonyi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kabuverdianu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kabyle</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kako</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kalaallisut</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kalenjin</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kamba</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kannada</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kanuri</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kashmiri</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kazakh</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kenyang</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Khmer</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kiche</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kikuyu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kinyarwanda</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Komi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kongo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Konkani</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Korean</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Koro</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KoyraboroSenni</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KoyraChiini</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kpelle</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kuanyama</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kurdish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kwasio</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kyrgyz</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lakota</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Langi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lao</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Latin</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Latvian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lezghian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Limburgish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lingala</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LiteraryChinese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lithuanian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Lojban</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LowerSorbian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LowGerman</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LubaKatanga</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LuleSami</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Luo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Luxembourgish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Luyia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Macedonian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Machame</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Maithili</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MakhuwaMeetto</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Makonde</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Malagasy</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Malayalam</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Malay</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Maltese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mandingo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Manipuri</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Manx</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Maori</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mapuche</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Marathi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Marshallese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Masai</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mazanderani</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mende</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Meru</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Meta</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mohawk</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mongolian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Morisyen</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Mundang</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Muscogee</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nama</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NauruLanguage</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Navajo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ndonga</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nepali</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Newari</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ngiemboon</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ngomba</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NigerianPidgin</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nko</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorthernLuri</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorthernSami</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorthernSotho</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorthNdebele</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorwegianBokmal</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorwegianNynorsk</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nuer</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nyanja</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nyankole</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Occitan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Odia</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ojibwa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldIrish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldNorse</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldPersian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Oromo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Osage</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ossetic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pahlavi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Palauan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pali</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Papiamento</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pashto</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Persian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Phoenician</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Polish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Portuguese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Prussian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Punjabi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Quechua</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Romanian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Romansh</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rombo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rundi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Russian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rwa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Saho</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sakha</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Samburu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Samoan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sango</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sangu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sanskrit</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Santali</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sardinian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Saurashtra</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sena</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Serbian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Shambala</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Shona</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SichuanYi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sicilian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sidamo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Silesian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sindhi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sinhala</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SkoltSami</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Slovak</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Slovenian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Soga</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Somali</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthernKurdish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthernSami</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthernSotho</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SouthNdebele</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Spanish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StandardMoroccanTamazight</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sundanese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Swahili</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Swati</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Swedish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwissGerman</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Syriac</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tachelhit</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tahitian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TaiDam</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Taita</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tajik</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tamil</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Taroko</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tasawaq</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tatar</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Telugu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Teso</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Thai</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tibetan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tigre</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tigrinya</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TokelauLanguage</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TokPisin</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tongan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tsonga</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tswana</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Turkish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Turkmen</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TuvaluLanguage</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tyap</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ugaritic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ukrainian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UpperSorbian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Urdu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uyghur</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uzbek</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vai</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Venda</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vietnamese</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Volapuk</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vunjo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Walloon</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Walser</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Warlpiri</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Welsh</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WesternBalochi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WesternFrisian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Wolaytta</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Wolof</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Xhosa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Yangben</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Yiddish</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Yoruba</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Zarma</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Zhuang</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Zulu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kaingang</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nheengatu</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Haryanvi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NorthernFrisian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rajasthani</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Moksha</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TokiPona</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pijin</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Obolo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Baluchi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ligurian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rohingya</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Torwali</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Anii</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kangri</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Venetian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kuvi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KaraKalpak</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwampyCree</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Afan</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bengali</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bhutani</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Byelorussian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cambodian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CentralMoroccoTamazight</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Chewa</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Frisian</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Greenlandic</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Inupiak</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kirghiz</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kurundi</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Kwanyama</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Navaho</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Oriya</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RhaetoRomance</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uighur</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uigur</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Walamo</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastLanguage</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Language-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>LanguageCodeType</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ISO639Part1</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISO639Part2B</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISO639Part2T</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISO639Part3</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LegacyLanguageCode</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISO639Part2</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISO639Alpha2</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISO639Alpha3</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISO639</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnyLanguageCode</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MeasurementSystem</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>MeasurementSystem-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MetricSystem</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImperialUSSystem</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImperialUKSystem</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImperialSystem</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>MeasurementSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NumberOption</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultNumberOptions</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OmitGroupSeparator</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RejectGroupSeparator</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OmitLeadingZeroInExponent</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RejectLeadingZeroInExponent</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IncludeTrailingZeroesAfterDot</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RejectTrailingZeroesAfterDot</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>QuotationStyle</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QuotationStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StandardQuotation</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QuotationStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlternateQuotation</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QuotationStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Script</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AnyScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AdlamScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AhomScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnatolianHieroglyphsScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArabicScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ArmenianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AvestanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BalineseScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BamumScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BanglaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BassaVahScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BatakScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BhaiksukiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BopomofoScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BrahmiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BrailleScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BugineseScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BuhidScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CanadianAboriginalScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CarianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CaucasianAlbanianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChakmaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChamScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CherokeeScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CopticScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CuneiformScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CypriotScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CyrillicScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DeseretScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DevanagariScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DuployanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EgyptianHieroglyphsScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ElbasanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EthiopicScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FraserScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GeorgianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GlagoliticScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GothicScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GranthaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GreekScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GujaratiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GurmukhiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HangulScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HanunooScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HanWithBopomofoScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HatranScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HebrewScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HiraganaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImperialAramaicScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InscriptionalPahlaviScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InscriptionalParthianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JamoScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JapaneseScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>JavaneseScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KaithiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KannadaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KatakanaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KayahLiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KharoshthiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KhmerScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KhojkiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KhudawadiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KoreanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LannaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LaoScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LatinScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LepchaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LimbuScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearAScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearBScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LycianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LydianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MahajaniScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MalayalamScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MandaeanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ManichaeanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MarchenScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MeiteiMayekScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MendeScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MeroiticCursiveScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MeroiticScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ModiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MongolianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MroScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MultaniScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MyanmarScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NabataeanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NewaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NewTaiLueScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NkoScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OdiaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OghamScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OlChikiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldHungarianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldItalicScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldNorthArabianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldPermicScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldPersianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OldSouthArabianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OrkhonScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OsageScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OsmanyaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PahawhHmongScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PalmyreneScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PauCinHauScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PhagsPaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PhoenicianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PollardPhoneticScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PsalterPahlaviScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RejangScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RunicScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SamaritanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SaurashtraScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SharadaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShavianScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SiddhamScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SignWritingScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SimplifiedHanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SinhalaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SoraSompengScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SundaneseScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SylotiNagriScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SyriacScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TagalogScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TagbanwaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TaiLeScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TaiVietScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TakriScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TamilScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TangutScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TeluguScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ThaanaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ThaiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TibetanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TifinaghScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TirhutaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TraditionalHanScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UgariticScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VaiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VarangKshitiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HanifiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BengaliScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MendeKikakuiScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OriyaScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SimplifiedChineseScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TraditionalChineseScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Script-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TagSeparator</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>TagSeparator-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Dash</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>TagSeparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Underscore</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>TagSeparator-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QLocale::Country&gt;</type>
            <name>countriesForLanguage</name>
            <anchorfile>qlocale-obsolete.html</anchorfile>
            <anchor>countriesForLanguage</anchor>
            <arglist>(QLocale::Language language)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QLocale&gt;</type>
            <name>matchingLocales</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>matchingLocales</anchor>
            <arglist>(QLocale::Language language, QLocale::Script script, QLocale::Territory territory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale &amp;</type>
            <name>operator=</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QLocale &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale</type>
            <name>c</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>c</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale</type>
            <name>system</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>system</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-4</anchor>
            <arglist>(QLocale::Language language, QLocale::Script script, QLocale::Territory territory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-3</anchor>
            <arglist>(QLocale::Language language, QLocale::Territory territory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-1</anchor>
            <arglist>(QStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-2</anchor>
            <arglist>(const QLocale &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>QLocale-5</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale::Country</type>
            <name>codeToCountry</name>
            <anchorfile>qlocale-obsolete.html</anchorfile>
            <anchor>codeToCountry</anchor>
            <arglist>(QStringView countryCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale::Language</type>
            <name>codeToLanguage</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>codeToLanguage</anchor>
            <arglist>(QStringView languageCode, QLocale::LanguageCodeTypes codeTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale::Script</type>
            <name>codeToScript</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>codeToScript</anchor>
            <arglist>(QStringView scriptCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLocale::Territory</type>
            <name>codeToTerritory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>codeToTerritory</anchor>
            <arglist>(QStringView territoryCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>countryToCode</name>
            <anchorfile>qlocale-obsolete.html</anchorfile>
            <anchor>countryToCode</anchor>
            <arglist>(QLocale::Country country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>countryToString</name>
            <anchorfile>qlocale-obsolete.html</anchorfile>
            <anchor>countryToString</anchor>
            <arglist>(QLocale::Country country)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>languageToCode</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>languageToCode</anchor>
            <arglist>(QLocale::Language language, QLocale::LanguageCodeTypes codeTypes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>languageToString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>languageToString</anchor>
            <arglist>(QLocale::Language language)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>scriptToCode</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>scriptToCode</anchor>
            <arglist>(QLocale::Script script)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>scriptToString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>scriptToString</anchor>
            <arglist>(QLocale::Script script)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>territoryToCode</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>territoryToCode</anchor>
            <arglist>(QLocale::Territory territory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>territoryToString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>territoryToString</anchor>
            <arglist>(QLocale::Territory territory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QLocale &amp;lhs, const QLocale &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QLocale &amp;lhs, const QLocale &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>qHash-21</anchor>
            <arglist>(const QLocale &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefault</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>setDefault</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberOptions</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>setNumberOptions</anchor>
            <arglist>(QLocale::NumberOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QLocale &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLocale</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>dtor.QLocale</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>toDate</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDate-2</anchor>
            <arglist>(const QString &amp;string, QLocale::FormatType format, QCalendar cal, int baseYear) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>toDate</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDate</anchor>
            <arglist>(const QString &amp;string, QLocale::FormatType format, int baseYear) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>toDate</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDate-3</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, QCalendar cal, int baseYear) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>toDate</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDate-1</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, int baseYear) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDateTime-2</anchor>
            <arglist>(const QString &amp;string, QLocale::FormatType format, QCalendar cal, int baseYear) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDateTime</anchor>
            <arglist>(const QString &amp;string, QLocale::FormatType format, int baseYear) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDateTime-3</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, QCalendar cal, int baseYear) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDateTime-1</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format, int baseYear) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Qt::DayOfWeek&gt;</type>
            <name>weekdays</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>weekdays</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>collation</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>collation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::Country</type>
            <name>country</name>
            <anchorfile>qlocale-obsolete.html</anchorfile>
            <anchor>country</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::Language</type>
            <name>language</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>language</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::MeasurementSystem</type>
            <name>measurementSystem</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>measurementSystem</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::NumberOptions</type>
            <name>numberOptions</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>numberOptions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::Script</type>
            <name>script</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>script</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::Territory</type>
            <name>territory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>territory</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>amText</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>amText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>bcp47Name</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>bcp47Name</anchor>
            <arglist>(QLocale::TagSeparator separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>createSeparatedList</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>createSeparatedList</anchor>
            <arglist>(const QStringList &amp;list) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>currencySymbol</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>currencySymbol</anchor>
            <arglist>(QLocale::CurrencySymbolFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dateFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>dateFormat</anchor>
            <arglist>(QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dateTimeFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>dateTimeFormat</anchor>
            <arglist>(QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>dayName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>dayName</anchor>
            <arglist>(int day, QLocale::FormatType type) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>decimalPoint</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>decimalPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>exponential</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>exponential</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>formattedDataSize</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>formattedDataSize</anchor>
            <arglist>(qint64 bytes, int precision, QLocale::DataSizeFormats format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>groupSeparator</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>groupSeparator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>monthName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>monthName</anchor>
            <arglist>(int month, QLocale::FormatType type) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>name</anchor>
            <arglist>(QLocale::TagSeparator separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeCountryName</name>
            <anchorfile>qlocale-obsolete.html</anchorfile>
            <anchor>nativeCountryName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeLanguageName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>nativeLanguageName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeTerritoryName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>nativeTerritoryName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>negativeSign</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>negativeSign</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>percent</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>percent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>pmText</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>pmText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>positiveSign</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>positiveSign</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>quoteString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>quoteString-1</anchor>
            <arglist>(QStringView str, QLocale::QuotationStyle style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>quoteString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>quoteString</anchor>
            <arglist>(const QString &amp;str, QLocale::QuotationStyle style) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>standaloneDayName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>standaloneDayName</anchor>
            <arglist>(int day, QLocale::FormatType type) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>standaloneMonthName</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>standaloneMonthName</anchor>
            <arglist>(int month, QLocale::FormatType type) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>timeFormat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>timeFormat</anchor>
            <arglist>(QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-6</anchor>
            <arglist>(double value, const QString &amp;symbol, int precision) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-7</anchor>
            <arglist>(float i, const QString &amp;symbol, int precision) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-1</anchor>
            <arglist>(int value, const QString &amp;symbol) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString</anchor>
            <arglist>(qlonglong value, const QString &amp;symbol) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-2</anchor>
            <arglist>(qulonglong value, const QString &amp;symbol) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-3</anchor>
            <arglist>(short value, const QString &amp;symbol) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-4</anchor>
            <arglist>(uint value, const QString &amp;symbol) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCurrencyString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toCurrencyString-5</anchor>
            <arglist>(ushort value, const QString &amp;symbol) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toLower</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toLower</anchor>
            <arglist>(const QString &amp;str) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-17</anchor>
            <arglist>(QDate date, QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-6</anchor>
            <arglist>(QDate date, QLocale::FormatType format, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-18</anchor>
            <arglist>(QDate date, QStringView format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-7</anchor>
            <arglist>(QDate date, QStringView format, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-1</anchor>
            <arglist>(QDate date, const QString &amp;format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-2</anchor>
            <arglist>(QTime time, QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-3</anchor>
            <arglist>(QTime time, QStringView format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-4</anchor>
            <arglist>(QTime time, const QString &amp;format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-19</anchor>
            <arglist>(const QDateTime &amp;dateTime, QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-8</anchor>
            <arglist>(const QDateTime &amp;dateTime, QLocale::FormatType format, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-20</anchor>
            <arglist>(const QDateTime &amp;dateTime, QStringView format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-9</anchor>
            <arglist>(const QDateTime &amp;dateTime, QStringView format, QCalendar cal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-5</anchor>
            <arglist>(const QDateTime &amp;dateTime, const QString &amp;format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-21</anchor>
            <arglist>(double f, char format, int precision) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-22</anchor>
            <arglist>(float f, char format, int precision) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-10</anchor>
            <arglist>(int i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-11</anchor>
            <arglist>(long i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(qlonglong i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-12</anchor>
            <arglist>(qulonglong i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-13</anchor>
            <arglist>(short i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-14</anchor>
            <arglist>(uint i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-15</anchor>
            <arglist>(ulong i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toString-16</anchor>
            <arglist>(ushort i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUpper</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUpper</anchor>
            <arglist>(const QString &amp;str) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>zeroDigit</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>zeroDigit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>uiLanguages</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>uiLanguages</anchor>
            <arglist>(QLocale::TagSeparator separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>toTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toTime</anchor>
            <arglist>(const QString &amp;string, QLocale::FormatType format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>toTime</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toTime-1</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::DayOfWeek</type>
            <name>firstDayOfWeek</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>firstDayOfWeek</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::LayoutDirection</type>
            <name>textDirection</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>textDirection</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toDouble-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toFloat-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toInt-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toLong-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toLongLong-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toULongLong-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toShort-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUInt-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toULong-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(QStringView s, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>toUShort-1</anchor>
            <arglist>(const QString &amp;s, bool *ok) const const</arglist>
        </member>
        <member kind="typedef" type="QLocale::DataSizeFormat">
            <name>DataSizeFormats</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>DataSizeFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QLocale::LanguageCodeType">
            <name>LanguageCodeTypes</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>LanguageCodeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QLocale::NumberOption">
            <name>NumberOptions</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>NumberOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Territory</name>
            <anchorfile>qlocale.html</anchorfile>
            <anchor>Territory-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLocationPermission</name>
        <filename>qlocationpermission.html</filename>
        <member kind="enumeration">
            <name>Accuracy</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>Accuracy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Approximate</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>Accuracy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Precise</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>Accuracy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Availability</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>Availability-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WhenInUse</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>Availability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Always</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>Availability-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAccuracy</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>setAccuracy</anchor>
            <arglist>(QLocationPermission::Accuracy accuracy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAvailability</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>setAvailability</anchor>
            <arglist>(QLocationPermission::Availability availability)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocationPermission::Accuracy</type>
            <name>accuracy</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>accuracy</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocationPermission::Availability</type>
            <name>availability</name>
            <anchorfile>qlocationpermission.html</anchorfile>
            <anchor>availability</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLockFile</name>
        <filename>qlockfile.html</filename>
        <member kind="enumeration">
            <name>LockError</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>LockError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LockFailedError</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PermissionError</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>LockError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLockFile</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>QLockFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>lock</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeStaleLockFile</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>removeStaleLockFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>tryLock</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>tryLock-1</anchor>
            <arglist>(std::chrono::milliseconds timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStaleLockTime</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>setStaleLockTime</anchor>
            <arglist>(int staleLockTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStaleLockTime</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>setStaleLockTime-1</anchor>
            <arglist>(std::chrono::milliseconds staleLockTime)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLockFile</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>dtor.QLockFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLockFile::LockError</type>
            <name>error</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>getLockInfo</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>getLockInfo</anchor>
            <arglist>(qint64 *pid, QString *hostname, QString *appname) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLocked</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>isLocked</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>staleLockTime</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>staleLockTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::milliseconds</type>
            <name>staleLockTimeAsDuration</name>
            <anchorfile>qlockfile.html</anchorfile>
            <anchor>staleLockTimeAsDuration</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QLoggingCategory</name>
        <filename>qloggingcategory.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLoggingCategory &amp;</type>
            <name>operator()</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLoggingCategory *</type>
            <name>defaultCategory</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>defaultCategory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QLoggingCategory</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>QLoggingCategory</anchor>
            <arglist>(const char *category, QtMsgType enableForLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QLoggingCategory::CategoryFilter</type>
            <name>installFilter</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>installFilter</anchor>
            <arglist>(QLoggingCategory::CategoryFilter filter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_EXPORTED_LOGGING_CATEGORY</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>Q_DECLARE_EXPORTED_LOGGING_CATEGORY</anchor>
            <arglist>(name, EXPORT_MACRO)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_LOGGING_CATEGORY</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>Q_DECLARE_LOGGING_CATEGORY</anchor>
            <arglist>(name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_LOGGING_CATEGORY</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>Q_LOGGING_CATEGORY</anchor>
            <arglist>(name, string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_LOGGING_CATEGORY</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>Q_LOGGING_CATEGORY-1</anchor>
            <arglist>(name, string, msgType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_STATIC_LOGGING_CATEGORY</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>Q_STATIC_LOGGING_CATEGORY</anchor>
            <arglist>(name, string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_STATIC_LOGGING_CATEGORY</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>Q_STATIC_LOGGING_CATEGORY-1</anchor>
            <arglist>(name, string, msgType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCCritical</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCCritical</anchor>
            <arglist>(category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCCritical</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCCritical-1</anchor>
            <arglist>(category, const char *message, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCDebug</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCDebug</anchor>
            <arglist>(category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCDebug</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCDebug-1</anchor>
            <arglist>(category, const char *message, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCFatal</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCFatal</anchor>
            <arglist>(category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCFatal</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCFatal-1</anchor>
            <arglist>(category, const char *message, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCInfo</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCInfo</anchor>
            <arglist>(category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCInfo</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCInfo-1</anchor>
            <arglist>(category, const char *message, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCWarning</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCWarning</anchor>
            <arglist>(category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qCWarning</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>qCWarning-1</anchor>
            <arglist>(category, const char *message, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(QtMsgType type, bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setFilterRules</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>setFilterRules</anchor>
            <arglist>(const QString &amp;rules)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QLoggingCategory</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>dtor.QLoggingCategory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCriticalEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isCriticalEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDebugEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isDebugEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>(QtMsgType msgtype) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInfoEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isInfoEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWarningEnabled</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>isWarningEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QLoggingCategory &amp;</type>
            <name>operator()</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>operator-28-29-1</anchor>
            <arglist>()() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>categoryName</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>categoryName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>CategoryFilter</name>
            <anchorfile>qloggingcategory.html</anchorfile>
            <anchor>CategoryFilter-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMap</name>
        <filename>qmap.html</filename>
        <class>QMap::const_iterator</class>
        <class>QMap::iterator</class>
        <class>QMap::key_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-lt-lt-12</anchor>
            <arglist>(QDataStream &amp;out, const QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-gt-gt-11</anchor>
            <arglist>(QDataStream &amp;in, QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-1</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-2</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-3</anchor>
            <arglist>(const std::map&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-4</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>QMap-5</anchor>
            <arglist>(std::map&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>erase-1</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator first, QMap&lt;Key, T&gt;::const_iterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>find</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator pos, const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>lowerBound</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>lowerBound</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>upperBound</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>upperBound</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::key_value_iterator</type>
            <name>keyValueBegin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keyValueBegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::key_value_iterator</type>
            <name>keyValueEnd</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keyValueEnd</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::size_type</type>
            <name>remove</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::size_type</type>
            <name>removeIf</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>take</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>asKeyValueRange-1</anchor>
            <arglist>() &amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>asKeyValueRange</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;lhs, const QMap&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;lhs, const QMap&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>erase_if-3</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;map, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::map&lt;Key, T&gt;</type>
            <name>toStdMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>toStdMap-1</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QMap&lt;Key, T&gt;::iterator, QMap&lt;Key, T&gt;::iterator&gt;</type>
            <name>equal_range</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>equal_range</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;&amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>dtor.QMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Key</type>
            <name>key</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>key</anchor>
            <arglist>(const T &amp;value, const Key &amp;defaultKey) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keys-1</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>find</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>find-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>lowerBound</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>lowerBound-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>upperBound</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>upperBound-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>constKeyValueBegin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>constKeyValueBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>constKeyValueEnd</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>constKeyValueEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>keyValueBegin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keyValueBegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>keyValueEnd</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keyValueEnd-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::key_iterator</type>
            <name>keyBegin</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keyBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::key_iterator</type>
            <name>keyEnd</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>keyEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::size_type</type>
            <name>count</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::size_type</type>
            <name>count</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::size_type</type>
            <name>size</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>operator[]</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const Key &amp;key, const T &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>asKeyValueRange-3</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>asKeyValueRange-2</anchor>
            <arglist>() const &amp;&amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>firstKey</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>firstKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>lastKey</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>lastKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::map&lt;Key, T&gt;</type>
            <name>toStdMap</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>toStdMap</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QMap&lt;Key, T&gt;::const_iterator, QMap&lt;Key, T&gt;::const_iterator&gt;</type>
            <name>equal_range</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>equal_range-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_key_value_iterator</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>const_key_value_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_value_iterator</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>key_value_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>mapped_type</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>mapped_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qmap.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMap::const_iterator</name>
        <filename>qmap-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator::difference_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator::difference_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator+</name>
            <anchorfile>qmap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator it, QMap&lt;Key, T&gt;::const_iterator::difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator+</name>
            <anchorfile>qmap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator::difference_type j, QMap&lt;Key, T&gt;::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator++</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator-</name>
            <anchorfile>qmap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator it, QMap&lt;Key, T&gt;::const_iterator::difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator-</name>
            <anchorfile>qmap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(QMap&lt;Key, T&gt;::const_iterator::difference_type j, QMap&lt;Key, T&gt;::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator--</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt;::const_iterator &amp;lhs, const QMap&lt;Key, T&gt;::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt;::const_iterator &amp;lhs, const QMap&lt;Key, T&gt;::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>const_iterator-1</anchor>
            <arglist>(const QMap&lt;Key, T&gt;::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qmap-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMap::iterator</name>
        <filename>qmap-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmap-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(QMap&lt;Key, T&gt;::iterator::difference_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmap-iterator-obsolete.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(QMap&lt;Key, T&gt;::iterator::difference_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>operator+</name>
            <anchorfile>qmap-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QMap&lt;Key, T&gt;::iterator it, QMap&lt;Key, T&gt;::iterator::difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>operator+</name>
            <anchorfile>qmap-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(QMap&lt;Key, T&gt;::iterator::difference_type j, QMap&lt;Key, T&gt;::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>operator++</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>operator-</name>
            <anchorfile>qmap-iterator-obsolete.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QMap&lt;Key, T&gt;::iterator it, QMap&lt;Key, T&gt;::iterator::difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>operator-</name>
            <anchorfile>qmap-iterator-obsolete.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(QMap&lt;Key, T&gt;::iterator::difference_type j, QMap&lt;Key, T&gt;::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::iterator</type>
            <name>operator--</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt;::iterator &amp;lhs, const QMap&lt;Key, T&gt;::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt;::iterator &amp;lhs, const QMap&lt;Key, T&gt;::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qmap-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMap::key_iterator</name>
        <filename>qmap-key-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::key_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::key_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::key_iterator</type>
            <name>operator++</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::key_iterator</type>
            <name>operator--</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;Key, T&gt;::const_iterator</type>
            <name>base</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>base</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QMap&lt;Key, T&gt;::key_iterator other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QMap&lt;Key, T&gt;::key_iterator other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>operator*</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmap-key-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMapIterator</name>
        <filename>qmapiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMapIterator</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>QMapIterator</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMapIterator&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMapIterator&lt;Key, T&gt;::Item</type>
            <name>next</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMapIterator&lt;Key, T&gt;::Item</type>
            <name>previous</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMapIterator&lt;Key, T&gt;::Item</type>
            <name>peekNext</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMapIterator&lt;Key, T&gt;::Item</type>
            <name>peekPrevious</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmapiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMargins</name>
        <filename>qmargins.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-lt-lt-13</anchor>
            <arglist>(QDataStream &amp;stream, const QMargins &amp;m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-gt-gt-12</anchor>
            <arglist>(QDataStream &amp;stream, QMargins &amp;m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2a-eq-1</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2b-eq-1</anchor>
            <arglist>(int addend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator--eq-1</anchor>
            <arglist>(int subtrahend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator/=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(int divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins &amp;</type>
            <name>operator/=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2f-eq-1</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator*</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QMargins &amp;margins, int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator*</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(const QMargins &amp;margins, qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator*</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2a-2</anchor>
            <arglist>(int factor, const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator*</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2a-3</anchor>
            <arglist>(qreal factor, const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator+</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2b-2</anchor>
            <arglist>(const QMargins &amp;lhs, int rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator+</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QMargins &amp;m1, const QMargins &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator+</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator+</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2b-3</anchor>
            <arglist>(int lhs, const QMargins &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator-</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator--2</anchor>
            <arglist>(const QMargins &amp;lhs, int rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator-</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QMargins &amp;m1, const QMargins &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator-</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator/</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QMargins &amp;margins, int divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator/</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-2f-1</anchor>
            <arglist>(const QMargins &amp;margins, qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>operator|</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QMargins &amp;m1, const QMargins &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMargins</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>QMargins</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMargins</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>QMargins-1</anchor>
            <arglist>(int left, int top, int right, int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMargins &amp;lhs, const QMargins &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMargins &amp;lhs, const QMargins &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(int bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(int left)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(int right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(int Top)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>toMarginsF</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>toMarginsF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>right</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>top</name>
            <anchorfile>qmargins.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMarginsF</name>
        <filename>qmarginsf.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-lt-lt-14</anchor>
            <arglist>(QDataStream &amp;stream, const QMarginsF &amp;m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-gt-gt-13</anchor>
            <arglist>(QDataStream &amp;stream, QMarginsF &amp;m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator*=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2b-eq-1</anchor>
            <arglist>(qreal addend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator--eq-1</anchor>
            <arglist>(qreal subtrahend)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF &amp;</type>
            <name>operator/=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator*</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QMarginsF &amp;lhs, qreal rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator*</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(qreal lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator+</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QMarginsF &amp;lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator+</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2b-2</anchor>
            <arglist>(const QMarginsF &amp;lhs, qreal rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator+</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator+</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2b-3</anchor>
            <arglist>(qreal lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator-</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QMarginsF &amp;lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator-</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator--2</anchor>
            <arglist>(const QMarginsF &amp;lhs, qreal rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator-</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator/</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-2f-2</anchor>
            <arglist>(const QMarginsF &amp;lhs, qreal rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMarginsF</type>
            <name>operator|</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-7c-940</anchor>
            <arglist>(const QMarginsF &amp;m1, const QMarginsF &amp;m2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMarginsF</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>QMarginsF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMarginsF</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>QMarginsF-1</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMarginsF</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>QMarginsF-2</anchor>
            <arglist>(qreal left, qreal top, qreal right, qreal bottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMarginsF &amp;lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMarginsF &amp;lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QMarginsF &amp;lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyIsNull</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>qFuzzyIsNull</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(qreal abottom)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(qreal aleft)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(qreal aright)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(qreal atop)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMargins</type>
            <name>toMargins</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>toMargins</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottom</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>left</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>right</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>top</name>
            <anchorfile>qmarginsf.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageAuthenticationCode</name>
        <filename>qmessageauthenticationcode.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>hash</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>hash</anchor>
            <arglist>(QByteArrayView message, QByteArrayView key, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>hashInto</anchor>
            <arglist>(QSpan&lt;char&gt; buffer, QByteArrayView message, QByteArrayView key, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>hashInto-1</anchor>
            <arglist>(QSpan&lt;char&gt; buffer, QSpan&lt;const QByteArrayView&gt; messageParts, QByteArrayView key, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>hashInto-2</anchor>
            <arglist>(QSpan&lt;std::byte&gt; buffer, QByteArrayView message, QByteArrayView key, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>hashInto-3</anchor>
            <arglist>(QSpan&lt;std::byte&gt; buffer, QSpan&lt;const QByteArrayView&gt; messageParts, QByteArrayView key, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>hashInto-4</anchor>
            <arglist>(QSpan&lt;uchar&gt; buffer, QByteArrayView message, QByteArrayView key, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArrayView</type>
            <name>hashInto</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>hashInto-5</anchor>
            <arglist>(QSpan&lt;uchar&gt; buffer, QSpan&lt;const QByteArrayView&gt; messageParts, QByteArrayView key, QCryptographicHash::Algorithm method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMessageAuthenticationCode &amp;</type>
            <name>operator=</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMessageAuthenticationCode &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAuthenticationCode</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>QMessageAuthenticationCode-1</anchor>
            <arglist>(QCryptographicHash::Algorithm method, QByteArrayView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageAuthenticationCode</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>QMessageAuthenticationCode</anchor>
            <arglist>(QMessageAuthenticationCode &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addData</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>addData-1</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>addData</anchor>
            <arglist>(QByteArrayView data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>addData-2</anchor>
            <arglist>(const char *data, qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKey</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>setKey</anchor>
            <arglist>(QByteArrayView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMessageAuthenticationCode &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMessageAuthenticationCode</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>dtor.QMessageAuthenticationCode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>result</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>result</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>resultView</name>
            <anchorfile>qmessageauthenticationcode.html</anchorfile>
            <anchor>resultView</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMessageLogContext</name>
        <filename>qmessagelogcontext.html</filename>
    </compound>
    <compound kind="class">
        <name>QMessageLogger</name>
        <filename>qmessagelogger.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageLogger</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>QMessageLogger</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageLogger</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>QMessageLogger-1</anchor>
            <arglist>(const char *file, int line, const char *function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMessageLogger</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>QMessageLogger-2</anchor>
            <arglist>(const char *file, int line, const char *function, const char *category)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-1</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-2</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-1</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-2</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>fatal</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>fatal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>fatal</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>fatal-1</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>fatal</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>fatal-2</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-1</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-2</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-1</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-2</anchor>
            <arglist>(const QLoggingCategory &amp;cat) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-4</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-5</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>critical</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>critical-3</anchor>
            <arglist>(const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-4</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-5</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debug</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>debug-3</anchor>
            <arglist>(const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fatal</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>fatal-4</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fatal</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>fatal-5</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fatal</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>fatal-3</anchor>
            <arglist>(const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-4</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-5</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>info</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>info-3</anchor>
            <arglist>(const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-4</anchor>
            <arglist>(QMessageLogger::CategoryFunction catFunc, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-5</anchor>
            <arglist>(const QLoggingCategory &amp;cat, const char *msg, ...) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>warning</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>warning-3</anchor>
            <arglist>(const char *msg, ...) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>CategoryFunction</name>
            <anchorfile>qmessagelogger.html</anchorfile>
            <anchor>CategoryFunction-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaClassInfo</name>
        <filename>qmetaclassinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qmetaclassinfo.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>value</name>
            <anchorfile>qmetaclassinfo.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaContainer</name>
        <filename>qmetacontainer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canClear</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>canClear</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compareConstIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>compareConstIterator</anchor>
            <arglist>(const void *i, const void *j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>compareIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>compareIterator</anchor>
            <arglist>(const void *i, const void *j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBidirectionalIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>hasBidirectionalIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasConstIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>hasConstIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasForwardIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>hasForwardIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasInputIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>hasInputIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>hasIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRandomAccessIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>hasRandomAccessIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasSize</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>hasSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>diffConstIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>diffConstIterator</anchor>
            <arglist>(const void *i, const void *j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>diffIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>diffIterator</anchor>
            <arglist>(const void *i, const void *j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>(const void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>begin</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>(void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>constBegin</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>(const void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>constEnd</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>(const void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>end</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>end</anchor>
            <arglist>(void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>advanceConstIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>advanceConstIterator</anchor>
            <arglist>(void *iterator, qsizetype step) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>advanceIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>advanceIterator</anchor>
            <arglist>(void *iterator, qsizetype step) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>(void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyConstIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>copyConstIterator</anchor>
            <arglist>(void *target, const void *source) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>copyIterator</anchor>
            <arglist>(void *target, const void *source) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroyConstIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>destroyConstIterator</anchor>
            <arglist>(const void *iterator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroyIterator</name>
            <anchorfile>qmetacontainer.html</anchorfile>
            <anchor>destroyIterator</anchor>
            <arglist>(const void *iterator) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaEnum</name>
        <filename>qmetaenum.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaEnum</type>
            <name>fromType</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>fromType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>valueToKeys</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>valueToKeys</anchor>
            <arglist>(quint64 value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>metaType</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>metaType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is64Bit</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>is64Bit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFlag</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>isFlag</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isScoped</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>isScoped</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>enumName</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>enumName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>key</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>key</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>scope</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>scope</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>valueToKey</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>valueToKey</anchor>
            <arglist>(quint64 value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyCount</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>keyCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keyToValue</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>keyToValue</anchor>
            <arglist>(const char *key, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>keysToValue</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>keysToValue</anchor>
            <arglist>(const char *keys, bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>value</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::optional&lt;quint64&gt;</type>
            <name>keyToValue64</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>keyToValue64</anchor>
            <arglist>(const char *key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::optional&lt;quint64&gt;</type>
            <name>keysToValue64</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>keysToValue64</anchor>
            <arglist>(const char *keys) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::optional&lt;quint64&gt;</type>
            <name>value64</name>
            <anchorfile>qmetaenum.html</anchorfile>
            <anchor>value64</anchor>
            <arglist>(int index) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaMethod</name>
        <filename>qmetamethod.html</filename>
        <member kind="enumeration">
            <name>Access</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>Access-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Private</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Protected</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Public</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>Access-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MethodType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>MethodType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Method</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Signal</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Slot</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Constructor</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>MethodType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaMethod</type>
            <name>fromSignal</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>fromSignal</anchor>
            <arglist>(PointerToMemberFunction signal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_METAMETHOD_INVOKE_MAX_ARGS</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>Q_METAMETHOD_INVOKE_MAX_ARGS</anchor>
            <arglist>Q_METAMETHOD_INVOKE_MAX_ARGS</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMetaMethod &amp;lhs, const QMetaMethod &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMetaMethod &amp;lhs, const QMetaMethod &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>methodSignature</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>methodSignature</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>name</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>parameterTypeName</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterTypeName</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArrayView</type>
            <name>nameView</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>nameView</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>parameterNames</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>parameterTypes</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterTypes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod::Access</type>
            <name>access</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>access</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod::MethodType</type>
            <name>methodType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>methodType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>parameterMetaType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterMetaType</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>returnMetaType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>returnMetaType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invoke</anchor>
            <arglist>(QObject *obj, Args &amp;&amp;... arguments) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invoke-1</anchor>
            <arglist>(QObject *obj, QTemplatedMetaMethodReturnArgument&lt;ReturnArg&gt; ret, Args &amp;&amp;... arguments) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invoke-2</anchor>
            <arglist>(QObject *obj, Qt::ConnectionType type, Args &amp;&amp;... arguments) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invoke-3</anchor>
            <arglist>(QObject *obj, Qt::ConnectionType type, QTemplatedMetaMethodReturnArgument&lt;ReturnArg&gt; ret, Args &amp;&amp;... arguments) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod-obsolete.html</anchorfile>
            <anchor>invoke-5</anchor>
            <arglist>(QObject *object, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod-obsolete.html</anchorfile>
            <anchor>invoke-6</anchor>
            <arglist>(QObject *object, QGenericReturnArgument returnValue, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod-obsolete.html</anchorfile>
            <anchor>invoke-7</anchor>
            <arglist>(QObject *object, Qt::ConnectionType connectionType, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invoke</name>
            <anchorfile>qmetamethod-obsolete.html</anchorfile>
            <anchor>invoke-4</anchor>
            <arglist>(QObject *object, Qt::ConnectionType connectionType, QGenericReturnArgument returnValue, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invokeOnGadget</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invokeOnGadget</anchor>
            <arglist>(void *gadget, Args &amp;&amp;... arguments) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invokeOnGadget</name>
            <anchorfile>qmetamethod-obsolete.html</anchorfile>
            <anchor>invokeOnGadget-3</anchor>
            <arglist>(void *gadget, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invokeOnGadget</name>
            <anchorfile>qmetamethod-obsolete.html</anchorfile>
            <anchor>invokeOnGadget-2</anchor>
            <arglist>(void *gadget, QGenericReturnArgument returnValue, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>invokeOnGadget</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>invokeOnGadget-1</anchor>
            <arglist>(void *gadget, QTemplatedMetaMethodReturnArgument&lt;ReturnArg&gt; ret, Args &amp;&amp;... arguments) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConst</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>isConst</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>tag</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>tag</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>typeName</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>typeName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>methodIndex</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>methodIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>parameterCount</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>parameterType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>parameterType</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>relativeMethodIndex</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>relativeMethodIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>returnType</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>returnType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>revision</name>
            <anchorfile>qmetamethod.html</anchorfile>
            <anchor>revision</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaObject</name>
        <filename>qmetaobject.html</filename>
        <class>QMetaObject::Connection</class>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>normalizedSignature</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>normalizedSignature</anchor>
            <arglist>(const char *method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>normalizedType</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>normalizedType</anchor>
            <arglist>(const char *type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethodArgument</type>
            <name>Q_ARG</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>Q_ARG</anchor>
            <arglist>(Type, const Type &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethodReturnArgument</type>
            <name>Q_RETURN_ARG</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>Q_RETURN_ARG</anchor>
            <arglist>(Type, Type &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>checkConnectArgs</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>checkConnectArgs-1</anchor>
            <arglist>(const QMetaMethod &amp;signal, const QMetaMethod &amp;method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>checkConnectArgs</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>checkConnectArgs</anchor>
            <arglist>(const char *signal, const char *method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod</anchor>
            <arglist>(QObject *context, Functor &amp;&amp;function, Args &amp;&amp;... arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-1</anchor>
            <arglist>(QObject *context, Functor &amp;&amp;function, FunctorReturnType *ret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-3</anchor>
            <arglist>(QObject *context, Functor &amp;&amp;function, QTemplatedMetaMethodReturnArgument&lt;FunctorReturnType&gt; ret, Args &amp;&amp;... arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-4</anchor>
            <arglist>(QObject *context, Functor &amp;&amp;function, Qt::ConnectionType type, Args &amp;&amp;... arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-5</anchor>
            <arglist>(QObject *context, Functor &amp;&amp;function, Qt::ConnectionType type, FunctorReturnType *ret)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-8</anchor>
            <arglist>(QObject *context, Functor &amp;&amp;function, Qt::ConnectionType type, QTemplatedMetaMethodReturnArgument&lt;FunctorReturnType&gt; ret, Args &amp;&amp;... arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-2</anchor>
            <arglist>(QObject *obj, const char *member, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject-obsolete.html</anchorfile>
            <anchor>invokeMethod-10</anchor>
            <arglist>(QObject *obj, const char *member, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject-obsolete.html</anchorfile>
            <anchor>invokeMethod-11</anchor>
            <arglist>(QObject *obj, const char *member, QGenericReturnArgument ret, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-6</anchor>
            <arglist>(QObject *obj, const char *member, QTemplatedMetaMethodReturnArgument&lt;ReturnArg&gt; ret, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-7</anchor>
            <arglist>(QObject *obj, const char *member, Qt::ConnectionType type, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject-obsolete.html</anchorfile>
            <anchor>invokeMethod-12</anchor>
            <arglist>(QObject *obj, const char *member, Qt::ConnectionType type, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject-obsolete.html</anchorfile>
            <anchor>invokeMethod-13</anchor>
            <arglist>(QObject *obj, const char *member, Qt::ConnectionType type, QGenericReturnArgument ret, QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>invokeMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>invokeMethod-9</anchor>
            <arglist>(QObject *obj, const char *member, Qt::ConnectionType type, QTemplatedMetaMethodReturnArgument&lt;ReturnArg&gt; ret, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>connectSlotsByName</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>connectSlotsByName</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaClassInfo</type>
            <name>classInfo</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>classInfo</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaEnum</type>
            <name>enumerator</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>enumerator</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod</type>
            <name>constructor</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>constructor</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod</type>
            <name>method</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>method</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaProperty</type>
            <name>property</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>property</anchor>
            <arglist>(int index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaProperty</type>
            <name>userProperty</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>userProperty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>metaType</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>metaType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>newInstance</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>newInstance</anchor>
            <arglist>(Args &amp;&amp;... arguments) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>newInstance</name>
            <anchorfile>qmetaobject-obsolete.html</anchorfile>
            <anchor>newInstance-1</anchor>
            <arglist>(QGenericArgument val0, QGenericArgument val1, QGenericArgument val2, QGenericArgument val3, QGenericArgument val4, QGenericArgument val5, QGenericArgument val6, QGenericArgument val7, QGenericArgument val8, QGenericArgument val9) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inherits</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>inherits</anchor>
            <arglist>(const QMetaObject *metaObject) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>superClass</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>superClass</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>className</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>className</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>classInfoCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>classInfoCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>classInfoOffset</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>classInfoOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>constructorCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>constructorCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>enumeratorCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>enumeratorCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>enumeratorOffset</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>enumeratorOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfClassInfo</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfClassInfo</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfConstructor</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfConstructor</anchor>
            <arglist>(const char *constructor) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfEnumerator</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfEnumerator</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfMethod</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfMethod</anchor>
            <arglist>(const char *method) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfProperty</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfProperty</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfSignal</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfSignal</anchor>
            <arglist>(const char *signal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>indexOfSlot</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>indexOfSlot</anchor>
            <arglist>(const char *slot) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>methodCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>methodCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>methodOffset</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>methodOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyCount</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>propertyCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyOffset</name>
            <anchorfile>qmetaobject.html</anchorfile>
            <anchor>propertyOffset</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaObject::Connection</name>
        <filename>qmetaobject-connection.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Connection</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>Connection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Connection</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>Connection-1</anchor>
            <arglist>(QMetaObject::Connection &amp;&amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Connection</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>Connection-2</anchor>
            <arglist>(const QMetaObject::Connection &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection &amp;</type>
            <name>operator=</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMetaObject::Connection &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection &amp;</type>
            <name>operator=</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QMetaObject::Connection &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMetaObject::Connection &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~Connection</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>dtor.Connection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>qmetaobject-connection.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaProperty</name>
        <filename>qmetaproperty.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaEnum</type>
            <name>enumerator</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>enumerator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaMethod</type>
            <name>notifySignal</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>notifySignal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>metaType</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>metaType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUntypedBindable</type>
            <name>bindable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>bindable</anchor>
            <arglist>(QObject *object) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>read</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(const QObject *object) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>readOnGadget</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>readOnGadget</anchor>
            <arglist>(const void *gadget) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant::Type</type>
            <name>type</name>
            <anchorfile>qmetaproperty-obsolete.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNotifySignal</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>hasNotifySignal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isBindable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isBindable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isConstant</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isConstant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDesignable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isDesignable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnumType</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isEnumType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinal</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isFinal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFlagType</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isFlagType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isReadable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRequired</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isRequired</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isResettable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isResettable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isScriptable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isScriptable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStored</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isStored</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUser</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isUser</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>reset</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>(QObject *object) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>resetOnGadget</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>resetOnGadget</anchor>
            <arglist>(void *gadget) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>write-1</anchor>
            <arglist>(QObject *object, QVariant &amp;&amp;v) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>write</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>write</anchor>
            <arglist>(QObject *object, const QVariant &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>writeOnGadget</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>writeOnGadget-1</anchor>
            <arglist>(void *gadget, QVariant &amp;&amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>writeOnGadget</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>writeOnGadget</anchor>
            <arglist>(void *gadget, const QVariant &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>typeName</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>typeName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>notifySignalIndex</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>notifySignalIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>propertyIndex</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>propertyIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>relativePropertyIndex</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>relativePropertyIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>revision</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>revision</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>typeId</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>typeId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>userType</name>
            <anchorfile>qmetaproperty.html</anchorfile>
            <anchor>userType</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaSequence</name>
        <filename>qmetasequence.html</filename>
        <base>QMetaContainer</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaSequence</type>
            <name>fromContainer</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>fromContainer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMetaSequence &amp;lhs, const QMetaSequence &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMetaSequence &amp;lhs, const QMetaSequence &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>valueMetaType</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>valueMetaType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canAddValue</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canAddValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canAddValueAtBegin</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canAddValueAtBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canAddValueAtEnd</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canAddValueAtEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canEraseRangeAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canEraseRangeAtIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canEraseValueAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canEraseValueAtIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canGetValueAtConstIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canGetValueAtConstIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canGetValueAtIndex</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canGetValueAtIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canGetValueAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canGetValueAtIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canInsertValueAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canInsertValueAtIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canRemoveValue</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canRemoveValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canRemoveValueAtBegin</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canRemoveValueAtBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canRemoveValueAtEnd</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canRemoveValueAtEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canSetValueAtIndex</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canSetValueAtIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canSetValueAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>canSetValueAtIterator</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSortable</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>isSortable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addValue</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>addValue</anchor>
            <arglist>(void *container, const void *value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addValueAtBegin</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>addValueAtBegin</anchor>
            <arglist>(void *container, const void *value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addValueAtEnd</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>addValueAtEnd</anchor>
            <arglist>(void *container, const void *value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eraseRangeAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>eraseRangeAtIterator</anchor>
            <arglist>(void *container, const void *iterator1, const void *iterator2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>eraseValueAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>eraseValueAtIterator</anchor>
            <arglist>(void *container, const void *iterator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insertValueAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>insertValueAtIterator</anchor>
            <arglist>(void *container, const void *iterator, const void *value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeValue</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>removeValue</anchor>
            <arglist>(void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeValueAtBegin</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>removeValueAtBegin</anchor>
            <arglist>(void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeValueAtEnd</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>removeValueAtEnd</anchor>
            <arglist>(void *container) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueAtIndex</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>setValueAtIndex</anchor>
            <arglist>(void *container, qsizetype index, const void *value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>setValueAtIterator</anchor>
            <arglist>(const void *iterator, const void *value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueAtConstIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>valueAtConstIterator</anchor>
            <arglist>(const void *iterator, void *result) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueAtIndex</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>valueAtIndex</anchor>
            <arglist>(const void *container, qsizetype index, void *result) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueAtIterator</name>
            <anchorfile>qmetasequence.html</anchorfile>
            <anchor>valueAtIterator</anchor>
            <arglist>(const void *iterator, void *result) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMetaType</name>
        <filename>qmetatype.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UnknownType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bool</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LongLong</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ULongLong</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Double</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Long</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Short</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Char</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ULong</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UShort</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UChar</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VoidStar</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QChar</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QString</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QStringList</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QByteArray</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QBitArray</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QDate</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QTime</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QDateTime</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QUrl</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QLocale</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QRect</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QRectF</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QSize</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QSizeF</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QLine</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QLineF</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QPoint</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QPointF</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QEasingCurve</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QUuid</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QVariant</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QModelIndex</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QPersistentModelIndex</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QRegularExpression</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QJsonValue</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QJsonObject</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QJsonArray</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QJsonDocument</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QByteArrayList</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QObjectStar</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SChar</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Void</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Nullptr</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QVariantMap</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QVariantList</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QVariantHash</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QVariantPair</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QCborSimpleType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QCborValue</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QCborArray</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QCborMap</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Char16</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Char32</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int128</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt128</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float128</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BFloat16</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Float16</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QFont</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QPixmap</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QBrush</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QColor</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QPalette</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QIcon</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QImage</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QPolygon</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QRegion</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QBitmap</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QCursor</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QKeySequence</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QPen</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QTextLength</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QTextFormat</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QTransform</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QMatrix4x4</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QVector2D</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QVector3D</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QVector4D</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QQuaternion</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QPolygonF</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QColorSpace</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QSizePolicy</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>User</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TypeFlag</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NeedsConstruction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NeedsDestruction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RelocatableType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MovableType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PointerToQObject</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsEnumeration</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SharedPointerToQObject</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WeakPointerToQObject</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TrackingPointerToQObject</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsUnsignedEnumeration</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsGadget</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PointerToGadget</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsPointer</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsQmlList</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IsConst</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NeedsCopyConstruction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NeedsMoveConstruction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDebug d, QMetaType m)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaType</type>
            <name>fromName</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>fromName</anchor>
            <arglist>(QByteArrayView typeName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaType</type>
            <name>fromType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>fromType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMetaType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>QMetaType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMetaType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>QMetaType-1</anchor>
            <arglist>(int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaType::TypeFlags</type>
            <name>typeFlags</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>typeFlags</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_ASSOCIATIVE_CONTAINER_METATYPE</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Q_DECLARE_ASSOCIATIVE_CONTAINER_METATYPE</anchor>
            <arglist>(Container)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_METATYPE</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Q_DECLARE_METATYPE</anchor>
            <arglist>(Type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_OPAQUE_POINTER</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Q_DECLARE_OPAQUE_POINTER</anchor>
            <arglist>(PointerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE</anchor>
            <arglist>(Container)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_SMART_POINTER_METATYPE</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>Q_DECLARE_SMART_POINTER_METATYPE</anchor>
            <arglist>(SmartPointer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>canConvert</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>canConvert</anchor>
            <arglist>(QMetaType fromType, QMetaType toType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>canView</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>canView</anchor>
            <arglist>(QMetaType fromType, QMetaType toType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>compare</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>compare-1</anchor>
            <arglist>(const void *lhs, const void *rhs, int typeId, int *result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>convert</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>convert</anchor>
            <arglist>(QMetaType fromType, const void *from, QMetaType toType, void *to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>convert</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>convert-1</anchor>
            <arglist>(const void *from, int fromTypeId, void *to, int toTypeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>debugStream</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>debugStream</anchor>
            <arglist>(QDebug &amp;dbg, const void *rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>debugStream</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>debugStream-1</anchor>
            <arglist>(QDebug &amp;dbg, const void *rhs, int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredConverterFunction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredConverterFunction-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredConverterFunction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredConverterFunction</anchor>
            <arglist>(QMetaType fromType, QMetaType toType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredDebugStreamOperator</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>hasRegisteredDebugStreamOperator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredDebugStreamOperator</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>hasRegisteredDebugStreamOperator-2</anchor>
            <arglist>(int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredMutableViewFunction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredMutableViewFunction-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>hasRegisteredMutableViewFunction</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredMutableViewFunction</anchor>
            <arglist>(QMetaType fromType, QMetaType toType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isRegistered</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isRegistered-1</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>load-1</anchor>
            <arglist>(QDataStream &amp;stream, int type, void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMetaType &amp;lhs, const QMetaType &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMetaType &amp;lhs, const QMetaType &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerConverter</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerConverter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerConverter</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerConverter-1</anchor>
            <arglist>(To (From::*)() const function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerConverter</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerConverter-2</anchor>
            <arglist>(To (From::*)(bool *) const function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerConverter</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerConverter-3</anchor>
            <arglist>(UnaryFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerMutableView</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerMutableView</anchor>
            <arglist>(To (From::*)() function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerMutableView</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerMutableView-1</anchor>
            <arglist>(UnaryFunction function)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>save-1</anchor>
            <arglist>(QDataStream &amp;stream, int type, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>view</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>view</anchor>
            <arglist>(QMetaType fromType, void *from, QMetaType toType, void *to)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const QMetaObject *</type>
            <name>metaObjectForType</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>metaObjectForType</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const char *</type>
            <name>typeName</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>typeName</anchor>
            <arglist>(int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qMetaTypeId</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>qMetaTypeId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qRegisterMetaType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>qRegisterMetaType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qRegisterMetaType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>qRegisterMetaType-2</anchor>
            <arglist>(QMetaType meta)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qRegisterMetaType</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>qRegisterMetaType-3</anchor>
            <arglist>(const char *typeName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>sizeOf</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>sizeOf-1</anchor>
            <arglist>(int type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>type</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>type-1</anchor>
            <arglist>(const QByteArray &amp;typeName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>type</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>type</anchor>
            <arglist>(const char *typeName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>qHash-5</anchor>
            <arglist>(QMetaType key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void *</type>
            <name>construct</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>construct-1</anchor>
            <arglist>(int type, void *where, const void *copy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void *</type>
            <name>create</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>create-1</anchor>
            <arglist>(int type, const void *copy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>destroy-1</anchor>
            <arglist>(int type, void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>destruct</name>
            <anchorfile>qmetatype-obsolete.html</anchorfile>
            <anchor>destruct-1</anchor>
            <arglist>(int type, void *where)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>underlyingType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>underlyingType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType::TypeFlags</type>
            <name>flags</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPartialOrdering</type>
            <name>compare</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const void *lhs, const void *rhs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>equals</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>equals</anchor>
            <arglist>(const void *lhs, const void *rhs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRegisteredDataStreamOperators</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredDataStreamOperators</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasRegisteredDebugStreamOperator</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>hasRegisteredDebugStreamOperator-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCopyConstructible</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isCopyConstructible</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDefaultConstructible</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isDefaultConstructible</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDestructible</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isDestructible</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEqualityComparable</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isEqualityComparable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isMoveConstructible</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isMoveConstructible</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isOrdered</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isOrdered</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRegistered</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isRegistered</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(QDataStream &amp;stream, void *data) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>save</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>save</anchor>
            <arglist>(QDataStream &amp;stream, const void *data) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>id</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>alignOf</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>alignOf</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>sizeOf</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>sizeOf</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>construct</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>construct</anchor>
            <arglist>(void *where, const void *copy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>create</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(const void *copy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroy</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>destroy</anchor>
            <arglist>(void *data) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destruct</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>destruct</anchor>
            <arglist>(void *data) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>registerType</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>registerType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QMetaType::TypeFlag">
            <name>TypeFlags</name>
            <anchorfile>qmetatype.html</anchorfile>
            <anchor>TypeFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMicrophonePermission</name>
        <filename>qmicrophonepermission.html</filename>
    </compound>
    <compound kind="class">
        <name>QMilankovicCalendar</name>
        <filename>qmilankoviccalendar.html</filename>
        <base>QRomanCalendar</base>
    </compound>
    <compound kind="class">
        <name>QMimeData</name>
        <filename>qmimedata.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMimeData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>QMimeData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeFormat</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>removeFormat</anchor>
            <arglist>(const QString &amp;mimeType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setColorData</anchor>
            <arglist>(const QVariant &amp;color)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QString &amp;mimeType, const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHtml</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setHtml</anchor>
            <arglist>(const QString &amp;html)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImageData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setImageData</anchor>
            <arglist>(const QVariant &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setText</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setText</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrls</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>setUrls</anchor>
            <arglist>(const QList&lt;QUrl&gt; &amp;urls)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QMimeData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>dtor.QMimeData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QString &amp;mimeType) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QUrl&gt;</type>
            <name>urls</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>urls</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>html</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>html</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>text</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>formats</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>formats</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>colorData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>colorData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>imageData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>imageData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>retrieveData</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>retrieveData</anchor>
            <arglist>(const QString &amp;mimeType, QMetaType type) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasColor</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasColor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasFormat</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasFormat</anchor>
            <arglist>(const QString &amp;mimeType) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasHtml</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasHtml</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasImage</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasImage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasText</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasText</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasUrls</name>
            <anchorfile>qmimedata.html</anchorfile>
            <anchor>hasUrls</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMimeDatabase</name>
        <filename>qmimedatabase.html</filename>
        <member kind="enumeration">
            <name>MatchMode</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>MatchMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MatchDefault</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>MatchMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchExtension</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>MatchMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchContent</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>MatchMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMimeDatabase</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>QMimeDatabase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMimeDatabase</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>dtor.QMimeDatabase</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QMimeType&gt;</type>
            <name>allMimeTypes</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>allMimeTypes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QMimeType&gt;</type>
            <name>mimeTypesForFileName</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypesForFileName</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForData</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForData</anchor>
            <arglist>(QIODevice *device) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForData</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForData-1</anchor>
            <arglist>(const QByteArray &amp;data) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForFile</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForFile</anchor>
            <arglist>(const QFileInfo &amp;fileInfo, QMimeDatabase::MatchMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForFile</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForFile-1</anchor>
            <arglist>(const QString &amp;fileName, QMimeDatabase::MatchMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForFileNameAndData</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForFileNameAndData</anchor>
            <arglist>(const QString &amp;fileName, QIODevice *device) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForFileNameAndData</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForFileNameAndData-1</anchor>
            <arglist>(const QString &amp;fileName, const QByteArray &amp;data) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForName</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForName</anchor>
            <arglist>(const QString &amp;nameOrAlias) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType</type>
            <name>mimeTypeForUrl</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>mimeTypeForUrl</anchor>
            <arglist>(const QUrl &amp;url) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>suffixForFileName</name>
            <anchorfile>qmimedatabase.html</anchorfile>
            <anchor>suffixForFileName</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMimeType</name>
        <filename>qmimetype.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType &amp;</type>
            <name>operator=</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMimeType &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMimeType &amp;</type>
            <name>operator=</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QMimeType &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMimeType</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>QMimeType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMimeType</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>QMimeType-1</anchor>
            <arglist>(const QMimeType &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMimeType &amp;lhs, const QMimeType &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMimeType &amp;lhs, const QMimeType &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>qHash-22</anchor>
            <arglist>(const QMimeType &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMimeType &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMimeType</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>dtor.QMimeType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>comment</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>comment-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filterString</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>filterString-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>genericIconName</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>genericIconName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>iconName</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>iconName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>preferredSuffix</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>preferredSuffix-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>aliases</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>aliases-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allAncestors</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>allAncestors-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>globPatterns</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>globPatterns-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>parentMimeTypes</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>parentMimeTypes-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>suffixes</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>suffixes-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inherits</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>inherits</anchor>
            <arglist>(const QString &amp;mimeTypeName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDefault</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>isDefault-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>valid-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>aliases</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>aliases-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>allAncestors</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>allAncestors-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>comment</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>comment-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>filterString</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>filterString-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>genericIconName</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>genericIconName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>globPatterns</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>globPatterns-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>iconName</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>iconName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isDefault</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>isDefault-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>name</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>name-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>parentMimeTypes</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>parentMimeTypes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>preferredSuffix</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>preferredSuffix-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QStringList">
            <name>suffixes</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>suffixes-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>valid</name>
            <anchorfile>qmimetype.html</anchorfile>
            <anchor>valid-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModelIndex</name>
        <filename>qmodelindex.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModelIndex</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>QModelIndex</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QModelIndex &amp;lhs, const QModelIndex &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QModelIndex &amp;lhs, const QModelIndex &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QModelIndex &amp;lhs, const QModelIndex &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>parent</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>siblingAtColumn</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>siblingAtColumn</anchor>
            <arglist>(int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>siblingAtRow</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>siblingAtRow</anchor>
            <arglist>(int row) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>constInternalPointer</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>constInternalPointer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quintptr</type>
            <name>internalId</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>internalId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>internalPointer</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>internalPointer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>multiData</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>multiData</anchor>
            <arglist>(QModelRoleDataSpan roleDataSpan) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QModelIndexList</name>
            <anchorfile>qmodelindex.html</anchorfile>
            <anchor>QModelIndexList-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModelRoleData</name>
        <filename>qmodelroledata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModelRoleData</name>
            <anchorfile>qmodelroledata.html</anchorfile>
            <anchor>QModelRoleData</anchor>
            <arglist>(int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant &amp;</type>
            <name>data</name>
            <anchorfile>qmodelroledata.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clearData</name>
            <anchorfile>qmodelroledata.html</anchorfile>
            <anchor>clearData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qmodelroledata.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVariant &amp;</type>
            <name>data</name>
            <anchorfile>qmodelroledata.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>role</name>
            <anchorfile>qmodelroledata.html</anchorfile>
            <anchor>role</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QModelRoleDataSpan</name>
        <filename>qmodelroledataspan.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModelRoleDataSpan</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>QModelRoleDataSpan</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModelRoleDataSpan</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>QModelRoleDataSpan-1</anchor>
            <arglist>(Container &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModelRoleDataSpan</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>QModelRoleDataSpan-2</anchor>
            <arglist>(QModelRoleData &amp;modelRoleData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QModelRoleDataSpan</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>QModelRoleDataSpan-3</anchor>
            <arglist>(QModelRoleData *modelRoleData, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelRoleData &amp;</type>
            <name>operator[]</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelRoleData *</type>
            <name>begin</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelRoleData *</type>
            <name>data</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelRoleData *</type>
            <name>end</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant *</type>
            <name>dataForRole</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>dataForRole</anchor>
            <arglist>(int role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qmodelroledataspan.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiHash</name>
        <filename>qmultihash.html</filename>
        <class>QMultiHash::const_iterator</class>
        <class>QMultiHash::iterator</class>
        <class>QMultiHash::key_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-lt-lt-15</anchor>
            <arglist>(QDataStream &amp;out, const QMultiHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-gt-gt-14</anchor>
            <arglist>(QDataStream &amp;in, QMultiHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiHash</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>QMultiHash</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiHash</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>QMultiHash-3</anchor>
            <arglist>(InputIterator begin, InputIterator end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiHash</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>QMultiHash-1</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiHash</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>QMultiHash-2</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt; &amp;</type>
            <name>unite</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt; &amp;</type>
            <name>unite</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>unite-1</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>emplace</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>emplace</anchor>
            <arglist>(Key &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>emplace</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>emplace-1</anchor>
            <arglist>(const Key &amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>emplaceReplace</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>emplaceReplace</anchor>
            <arglist>(Key &amp;&amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>emplaceReplace</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>emplaceReplace-1</anchor>
            <arglist>(const Key &amp;key, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>find</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>replace</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>keyValueBegin</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>keyValueBegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::key_value_iterator</type>
            <name>keyValueEnd</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>keyValueEnd</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>take</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>asKeyValueRange-1</anchor>
            <arglist>() &amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>asKeyValueRange</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt; &amp;lhs, const QMultiHash&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt; &amp;lhs, const QMultiHash&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>erase_if-4</anchor>
            <arglist>(QMultiHash&lt;Key, T&gt; &amp;hash, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>remove</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>remove</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>remove-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>removeIf</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>qHash-23</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt; &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QMultiHash&lt;Key, T&gt;::iterator, QMultiHash&lt;Key, T&gt;::iterator&gt;</type>
            <name>equal_range</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>equal_range</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMultiHash&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Key</type>
            <name>key</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>key</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Key</type>
            <name>key</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>key-1</anchor>
            <arglist>(const T &amp;value, const Key &amp;defaultKey) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>uniqueKeys</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>uniqueKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>values-2</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;</type>
            <name>operator+</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>find</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>find-7</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>constKeyValueBegin</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>constKeyValueBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>constKeyValueEnd</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>constKeyValueEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>keyValueBegin</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>keyValueBegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>keyValueEnd</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>keyValueEnd-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::key_iterator</type>
            <name>keyBegin</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>keyBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::key_iterator</type>
            <name>keyEnd</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>keyEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>asKeyValueRange-3</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>asKeyValueRange-2</anchor>
            <arglist>() const &amp;&amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QMultiHash&lt;Key, T&gt;::const_iterator, QMultiHash&lt;Key, T&gt;::const_iterator&gt;</type>
            <name>equal_range</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>equal_range-3</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_key_value_iterator</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>const_key_value_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_value_iterator</name>
            <anchorfile>qmultihash.html</anchorfile>
            <anchor>key_value_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiHash::const_iterator</name>
        <filename>qmultihash-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>operator++</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>const_iterator-1</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt;::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmultihash-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiHash::iterator</name>
        <filename>qmultihash-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::iterator</type>
            <name>operator++</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt;::iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QMultiHash&lt;Key, T&gt;::iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmultihash-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiHash::key_iterator</name>
        <filename>qmultihash-key-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::key_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmultihash-key-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::key_iterator</type>
            <name>operator++</name>
            <anchorfile>qmultihash-key-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiHash&lt;Key, T&gt;::const_iterator</type>
            <name>base</name>
            <anchorfile>qmultihash-key-iterator.html</anchorfile>
            <anchor>base</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultihash-key-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QMultiHash&lt;Key, T&gt;::key_iterator other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultihash-key-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QMultiHash&lt;Key, T&gt;::key_iterator other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>operator*</name>
            <anchorfile>qmultihash-key-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmultihash-key-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiMap</name>
        <filename>qmultimap.html</filename>
        <class>QMultiMap::const_iterator</class>
        <class>QMultiMap::iterator</class>
        <class>QMultiMap::key_iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-lt-lt-16</anchor>
            <arglist>(QDataStream &amp;out, const QMultiMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-gt-gt-15</anchor>
            <arglist>(QDataStream &amp;in, QMultiMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-1</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-2</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-3</anchor>
            <arglist>(const QMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-4</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-5</anchor>
            <arglist>(const std::multimap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-6</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;Key, T&gt;&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>QMultiMap-7</anchor>
            <arglist>(std::multimap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt; &amp;</type>
            <name>unite</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt; &amp;</type>
            <name>unite</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>unite-1</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;</type>
            <name>operator+</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-2b-9</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;lhs, const QMultiMap&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;</type>
            <name>operator+=</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;lhs, const QMultiMap&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>erase-1</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator first, QMultiMap&lt;Key, T&gt;::const_iterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>find</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator pos, const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>insertMulti</name>
            <anchorfile>qmultimap-obsolete.html</anchorfile>
            <anchor>insertMulti-1</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator pos, const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>insertMulti</name>
            <anchorfile>qmultimap-obsolete.html</anchorfile>
            <anchor>insertMulti</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>lowerBound</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>lowerBound</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>replace</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>upperBound</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>upperBound</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::key_value_iterator</type>
            <name>keyValueBegin</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>keyValueBegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::key_value_iterator</type>
            <name>keyValueEnd</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>keyValueEnd</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::size_type</type>
            <name>remove</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::size_type</type>
            <name>remove</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>remove-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::size_type</type>
            <name>removeIf</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>take</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>take</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>asKeyValueRange-1</anchor>
            <arglist>() &amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>asKeyValueRange</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;lhs, const QMultiMap&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;lhs, const QMultiMap&lt;Key, T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>erase_if-5</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;map, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QMultiMap&lt;Key, T&gt;::iterator, QMultiMap&lt;Key, T&gt;::iterator&gt;</type>
            <name>equal_range</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>equal_range</anchor>
            <arglist>(const Key &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qmultimap-obsolete.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;&amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qmultimap-obsolete.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>dtor.QMultiMap</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Key</type>
            <name>key</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>key</anchor>
            <arglist>(const T &amp;value, const Key &amp;defaultKey) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>keys</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>keys-1</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;Key&gt;</type>
            <name>uniqueKeys</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>uniqueKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>values-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>constFind-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>find</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>find-2</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>find</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>find-3</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>lowerBound</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>lowerBound-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>upperBound</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>upperBound-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>constKeyValueBegin</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>constKeyValueBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>constKeyValueEnd</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>constKeyValueEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>keyValueBegin</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>keyValueBegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_key_value_iterator</type>
            <name>keyValueEnd</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>keyValueEnd-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::key_iterator</type>
            <name>keyBegin</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>keyBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::key_iterator</type>
            <name>keyEnd</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>keyEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::size_type</type>
            <name>count</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::size_type</type>
            <name>count</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::size_type</type>
            <name>count</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::size_type</type>
            <name>size</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const Key &amp;key, const T &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>asKeyValueRange-3</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>asKeyValueRange</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>asKeyValueRange-2</anchor>
            <arglist>() const &amp;&amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(const Key &amp;key, const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>firstKey</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>firstKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>lastKey</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>lastKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::multimap&lt;Key, T&gt;</type>
            <name>toStdMap</name>
            <anchorfile>qmultimap-obsolete.html</anchorfile>
            <anchor>toStdMap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::multimap&lt;Key, T&gt;</type>
            <name>toStdMultiMap</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>toStdMultiMap</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::pair&lt;QMultiMap&lt;Key, T&gt;::const_iterator, QMultiMap&lt;Key, T&gt;::const_iterator&gt;</type>
            <name>equal_range</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>equal_range-1</anchor>
            <arglist>(const Key &amp;key) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_key_value_iterator</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>const_key_value_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_value_iterator</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>key_value_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>mapped_type</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>mapped_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qmultimap.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiMap::const_iterator</name>
        <filename>qmultimap-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmultimap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator::difference_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmultimap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator::difference_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator+</name>
            <anchorfile>qmultimap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator it, QMultiMap&lt;Key, T&gt;::const_iterator::difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator+</name>
            <anchorfile>qmultimap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator::difference_type j, QMultiMap&lt;Key, T&gt;::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator++</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator-</name>
            <anchorfile>qmultimap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator it, QMultiMap&lt;Key, T&gt;::const_iterator::difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator-</name>
            <anchorfile>qmultimap-const-iterator-obsolete.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::const_iterator::difference_type j, QMultiMap&lt;Key, T&gt;::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>operator--</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt;::const_iterator &amp;lhs, const QMultiMap&lt;Key, T&gt;::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt;::const_iterator &amp;lhs, const QMultiMap&lt;Key, T&gt;::const_iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>const_iterator-1</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt;::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qmultimap-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiMap::iterator</name>
        <filename>qmultimap-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator+=</name>
            <anchorfile>qmultimap-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::iterator::difference_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator &amp;</type>
            <name>operator-=</name>
            <anchorfile>qmultimap-iterator-obsolete.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::iterator::difference_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>operator+</name>
            <anchorfile>qmultimap-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::iterator it, QMultiMap&lt;Key, T&gt;::iterator::difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>operator+</name>
            <anchorfile>qmultimap-iterator-obsolete.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::iterator::difference_type j, QMultiMap&lt;Key, T&gt;::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>operator++</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>operator-</name>
            <anchorfile>qmultimap-iterator-obsolete.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::iterator it, QMultiMap&lt;Key, T&gt;::iterator::difference_type j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>operator-</name>
            <anchorfile>qmultimap-iterator-obsolete.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::iterator::difference_type j, QMultiMap&lt;Key, T&gt;::iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::iterator</type>
            <name>operator--</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt;::iterator &amp;lhs, const QMultiMap&lt;Key, T&gt;::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt;::iterator &amp;lhs, const QMultiMap&lt;Key, T&gt;::iterator &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qmultimap-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiMap::key_iterator</name>
        <filename>qmultimap-key-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::key_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::key_iterator &amp;</type>
            <name>operator--</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::key_iterator</type>
            <name>operator++</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::key_iterator</type>
            <name>operator--</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMap&lt;Key, T&gt;::const_iterator</type>
            <name>base</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>base</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::key_iterator other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt;::key_iterator other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>operator*</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key *</type>
            <name>operator-&gt;</name>
            <anchorfile>qmultimap-key-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMultiMapIterator</name>
        <filename>qmultimapiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMultiMapIterator</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>QMultiMapIterator</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMapIterator&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QMultiMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMapIterator&lt;Key, T&gt;::Item</type>
            <name>next</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMapIterator&lt;Key, T&gt;::Item</type>
            <name>previous</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMultiMapIterator&lt;Key, T&gt;::Item</type>
            <name>peekPrevious</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmultimapiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableHashIterator</name>
        <filename>qmutablehashiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableHashIterator</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>QMutableHashIterator</anchor>
            <arglist>(QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableHashIterator&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QHash&lt;Key, T&gt; &amp;hash)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableHashIterator&lt;Key, T&gt;::Item</type>
            <name>next</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableHashIterator&lt;Key, T&gt;::Item</type>
            <name>peekNext</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablehashiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableListIterator</name>
        <filename>qmutablelistiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableListIterator</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>QMutableListIterator</anchor>
            <arglist>(QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableListIterator&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QList&lt;T&gt; &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>next</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>previous</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablelistiterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableMapIterator</name>
        <filename>qmutablemapiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableMapIterator</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>QMutableMapIterator</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMapIterator&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMapIterator&lt;Key, T&gt;::Item</type>
            <name>next</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMapIterator&lt;Key, T&gt;::Item</type>
            <name>previous</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMapIterator&lt;Key, T&gt;::Item</type>
            <name>peekNext</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMapIterator&lt;Key, T&gt;::Item</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablemapiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableMultiMapIterator</name>
        <filename>qmutablemultimapiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableMultiMapIterator</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>QMutableMultiMapIterator</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMultiMapIterator&lt;Key, T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMultiMap&lt;Key, T&gt; &amp;map)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMultiMapIterator&lt;Key, T&gt;::Item</type>
            <name>next</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMultiMapIterator&lt;Key, T&gt;::Item</type>
            <name>previous</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>previous</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findPrevious</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>findPrevious</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMultiMapIterator&lt;Key, T&gt;::Item</type>
            <name>peekNext</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableMultiMapIterator&lt;Key, T&gt;::Item</type>
            <name>peekPrevious</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>peekPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPrevious</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>hasPrevious</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const Key &amp;</type>
            <name>key</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablemultimapiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutableSetIterator</name>
        <filename>qmutablesetiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutableSetIterator</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>QMutableSetIterator</anchor>
            <arglist>(QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutableSetIterator&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>value</name>
            <anchorfile>qmutablesetiterator.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutex</name>
        <filename>qmutex.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutex</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>QMutex</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>tryLock-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>tryLock</anchor>
            <arglist>(QDeadlineTimer timer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>tryLock-1</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_lock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>try_lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_lock_for</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>try_lock_for</anchor>
            <arglist>(std::chrono::duration&lt;Rep, Period&gt; duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_lock_until</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>try_lock_until</anchor>
            <arglist>(std::chrono::time_point&lt;Clock, Duration&gt; timePoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMutex</name>
            <anchorfile>qmutex.html</anchorfile>
            <anchor>dtor.QMutex</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QMutexLocker</name>
        <filename>qmutexlocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutexLocker</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>QMutexLocker</anchor>
            <arglist>(Mutex *mutex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QMutexLocker</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>QMutexLocker-1</anchor>
            <arglist>(QMutexLocker&lt;Mutex&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMutexLocker&lt;Mutex&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QMutexLocker&lt;Mutex&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relock</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>relock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QMutexLocker&lt;Mutex&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QMutexLocker</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>dtor.QMutexLocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Mutex *</type>
            <name>mutex</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>mutex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLocked</name>
            <anchorfile>qmutexlocker.html</anchorfile>
            <anchor>isLocked</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QNativeInterface</name>
        <filename>qnativeinterface-sub-qtcore.html</filename>
        <class>QNativeInterface::QAndroidApplication</class>
    </compound>
    <compound kind="class">
        <name>QNativeInterface::QAndroidApplication</name>
        <filename>qnativeinterface-qandroidapplication.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QFuture&lt;QVariant&gt;</type>
            <name>runOnAndroidMainThread</name>
            <anchorfile>qnativeinterface-qandroidapplication.html</anchorfile>
            <anchor>runOnAndroidMainThread</anchor>
            <arglist>(const std::function&lt;QVariant ()&gt; &amp;runnable, const QDeadlineTimer timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QJniObject</type>
            <name>context</name>
            <anchorfile>qnativeinterface-qandroidapplication.html</anchorfile>
            <anchor>context</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isActivityContext</name>
            <anchorfile>qnativeinterface-qandroidapplication.html</anchorfile>
            <anchor>isActivityContext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>sdkVersion</name>
            <anchorfile>qnativeinterface-qandroidapplication.html</anchorfile>
            <anchor>sdkVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>hideSplashScreen</name>
            <anchorfile>qnativeinterface-qandroidapplication.html</anchorfile>
            <anchor>hideSplashScreen</anchor>
            <arglist>(int duration)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNativeIpcKey</name>
        <filename>qnativeipckey.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SystemV</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PosixRealtime</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Windows</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNativeIpcKey &amp;</type>
            <name>operator=</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QNativeIpcKey &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNativeIpcKey &amp;</type>
            <name>operator=</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QNativeIpcKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNativeIpcKey</type>
            <name>fromString</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNativeIpcKey</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>QNativeIpcKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNativeIpcKey</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>QNativeIpcKey-1</anchor>
            <arglist>(QNativeIpcKey &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNativeIpcKey</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>QNativeIpcKey-2</anchor>
            <arglist>(QNativeIpcKey::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNativeIpcKey</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>QNativeIpcKey-3</anchor>
            <arglist>(const QNativeIpcKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNativeIpcKey</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>QNativeIpcKey-4</anchor>
            <arglist>(const QString &amp;key, QNativeIpcKey::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QNativeIpcKey::Type</type>
            <name>legacyDefaultTypeForOs</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>legacyDefaultTypeForOs</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QNativeIpcKey &amp;lhs, const QNativeIpcKey &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QNativeIpcKey &amp;lhs, const QNativeIpcKey &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(const QNativeIpcKey &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeKey</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>setNativeKey</anchor>
            <arglist>(const QString &amp;newKey)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(QNativeIpcKey::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QNativeIpcKey &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>swap-1</anchor>
            <arglist>(QNativeIpcKey &amp;value1, QNativeIpcKey &amp;value2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNativeIpcKey</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>dtor.QNativeIpcKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNativeIpcKey::Type</type>
            <name>type</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeKey</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>nativeKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qnativeipckey.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QNtfsPermissionCheckGuard</name>
        <filename>qntfspermissioncheckguard.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QNtfsPermissionCheckGuard</name>
            <anchorfile>qntfspermissioncheckguard.html</anchorfile>
            <anchor>QNtfsPermissionCheckGuard</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qAreNtfsPermissionChecksEnabled</name>
            <anchorfile>qntfspermissioncheckguard.html</anchorfile>
            <anchor>qAreNtfsPermissionChecksEnabled</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qDisableNtfsPermissionChecks</name>
            <anchorfile>qntfspermissioncheckguard.html</anchorfile>
            <anchor>qDisableNtfsPermissionChecks</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qEnableNtfsPermissionChecks</name>
            <anchorfile>qntfspermissioncheckguard.html</anchorfile>
            <anchor>qEnableNtfsPermissionChecks</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QNtfsPermissionCheckGuard</name>
            <anchorfile>qntfspermissioncheckguard.html</anchorfile>
            <anchor>dtor.QNtfsPermissionCheckGuard</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QObject</name>
        <filename>qobject.html</filename>
        <member kind="enumeration">
            <name>TimerId</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>TimerId-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>TimerId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QString&gt;</type>
            <name>bindableObjectName</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>objectName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-2</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, Functor functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-4</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, const QObject *context, Functor functor, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-5</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, const QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect</anchor>
            <arglist>(const QObject *sender, const QMetaMethod &amp;signal, const QObject *receiver, const QMetaMethod &amp;method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-1</anchor>
            <arglist>(const QObject *sender, const char *signal, const QObject *receiver, const char *method, Qt::ConnectionType type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObject</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>QObject</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>tr</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>tr</anchor>
            <arglist>(const char *sourceText, const char *disambiguation, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_NO_CONTEXTLESS_CONNECT</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>QT_NO_CONTEXTLESS_CONNECT</anchor>
            <arglist>QT_NO_CONTEXTLESS_CONNECT</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_NO_NARROWING_CONVERSIONS_IN_CONNECT</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>QT_NO_NARROWING_CONVERSIONS_IN_CONNECT</anchor>
            <arglist>QT_NO_NARROWING_CONVERSIONS_IN_CONNECT</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_CLASSINFO</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_CLASSINFO</anchor>
            <arglist>(Name, Value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_EMIT</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_EMIT</anchor>
            <arglist>Q_EMIT</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ENUM</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_ENUM</anchor>
            <arglist>(...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ENUMS</name>
            <anchorfile>qobject-obsolete.html</anchorfile>
            <anchor>Q_ENUMS</anchor>
            <arglist>(...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_ENUM_NS</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_ENUM_NS</anchor>
            <arglist>(...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_FLAG</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_FLAG</anchor>
            <arglist>(...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_FLAGS</name>
            <anchorfile>qobject-obsolete.html</anchorfile>
            <anchor>Q_FLAGS</anchor>
            <arglist>(...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_FLAG_NS</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_FLAG_NS</anchor>
            <arglist>(...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_GADGET</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_GADGET</anchor>
            <arglist>Q_GADGET</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_GADGET_EXPORT</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_GADGET_EXPORT</anchor>
            <arglist>(EXPORT_MACRO)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_INTERFACES</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_INTERFACES</anchor>
            <arglist>(...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_INVOKABLE</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_INVOKABLE</anchor>
            <arglist>Q_INVOKABLE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_MOC_INCLUDE</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_MOC_INCLUDE</anchor>
            <arglist>Q_MOC_INCLUDE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_NAMESPACE</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_NAMESPACE</anchor>
            <arglist>Q_NAMESPACE</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_NAMESPACE_EXPORT</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_NAMESPACE_EXPORT</anchor>
            <arglist>(EXPORT_MACRO)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_OBJECT</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_OBJECT</anchor>
            <arglist>Q_OBJECT</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_PROPERTY</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_PROPERTY</anchor>
            <arglist>(...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_REVISION</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_REVISION</anchor>
            <arglist>Q_REVISION</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_SET_OBJECT_NAME</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_SET_OBJECT_NAME</anchor>
            <arglist>(Object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_SIGNAL</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_SIGNAL</anchor>
            <arglist>Q_SIGNAL</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_SIGNALS</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_SIGNALS</anchor>
            <arglist>Q_SIGNALS</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_SLOT</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_SLOT</anchor>
            <arglist>Q_SLOT</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_SLOTS</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>Q_SLOTS</anchor>
            <arglist>Q_SLOTS</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>qobject_cast</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>qobject_cast</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>qobject_cast</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>qobject_cast-1</anchor>
            <arglist>(const QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>blockSignals</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>blockSignals</anchor>
            <arglist>(bool block)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect</anchor>
            <arglist>(const QMetaObject::Connection &amp;connection)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-5</anchor>
            <arglist>(const QObject *sender, PointerToMemberFunction signal, const QObject *receiver, PointerToMemberFunction method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-1</anchor>
            <arglist>(const QObject *sender, const QMetaMethod &amp;signal, const QObject *receiver, const QMetaMethod &amp;method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-2</anchor>
            <arglist>(const QObject *sender, const char *signal, const QObject *receiver, const char *method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>eventFilter</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>eventFilter</anchor>
            <arglist>(QObject *watched, QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>moveToThread</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>moveToThread</anchor>
            <arglist>(QThread *targetThread)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setProperty</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>setProperty-1</anchor>
            <arglist>(const char *name, QVariant &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setProperty</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>setProperty</anchor>
            <arglist>(const char *name, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startTimer</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>startTimer</anchor>
            <arglist>(int interval, Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startTimer</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>startTimer-1</anchor>
            <arglist>(std::chrono::nanoseconds interval, Qt::TimerType timerType)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>childEvent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>childEvent</anchor>
            <arglist>(QChildEvent *event)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>connectNotify</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connectNotify</anchor>
            <arglist>(const QMetaMethod &amp;signal)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>customEvent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>customEvent</anchor>
            <arglist>(QEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>deleteLater</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>deleteLater</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>destroyed</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>destroyed</anchor>
            <arglist>(QObject *obj)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>disconnectNotify</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnectNotify</anchor>
            <arglist>(const QMetaMethod &amp;signal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>installEventFilter</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>installEventFilter</anchor>
            <arglist>(QObject *filterObj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>killTimer</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>killTimer-1</anchor>
            <arglist>(Qt::TimerId id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>killTimer</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>killTimer</anchor>
            <arglist>(int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>objectNameChanged</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>objectNameChanged</anchor>
            <arglist>(const QString &amp;objectName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeEventFilter</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>removeEventFilter</anchor>
            <arglist>(QObject *obj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObjectName</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>setObjectName-1</anchor>
            <arglist>(QAnyStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setObjectName</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>setObjectName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setParent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>setParent</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QObject</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>dtor.QObject</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QByteArray&gt;</type>
            <name>dynamicPropertyNames</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>dynamicPropertyNames</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>findChildren</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChildren</anchor>
            <arglist>(QAnyStringView name, Qt::FindChildOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>findChildren</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChildren-1</anchor>
            <arglist>(Qt::FindChildOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>findChildren</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChildren-2</anchor>
            <arglist>(const QRegularExpression &amp;re, Qt::FindChildOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>connect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>connect-3</anchor>
            <arglist>(const QObject *sender, const char *signal, const char *method, Qt::ConnectionType type) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>parent</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QObject *</type>
            <name>sender</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>sender</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>objectName</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>objectName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QThread *</type>
            <name>thread</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>thread</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>property</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>property</anchor>
            <arglist>(const char *name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>findChild</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChild</anchor>
            <arglist>(QAnyStringView name, Qt::FindChildOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>findChild</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>findChild-1</anchor>
            <arglist>(Qt::FindChildOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-3</anchor>
            <arglist>(const QObject *receiver, const char *method) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>disconnect</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>disconnect-4</anchor>
            <arglist>(const char *signal, const QObject *receiver, const char *method) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inherits</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>inherits</anchor>
            <arglist>(const char *className) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isQuickItemType</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>isQuickItemType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isSignalConnected</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>isSignalConnected</anchor>
            <arglist>(const QMetaMethod &amp;signal) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWidgetType</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>isWidgetType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWindowType</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>isWindowType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>signalsBlocked</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>signalsBlocked</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual const QMetaObject *</type>
            <name>metaObject</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>metaObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QObjectList &amp;</type>
            <name>children</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>children</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>receivers</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>receivers</anchor>
            <arglist>(const char *signal) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>senderSignalIndex</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>senderSignalIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dumpObjectInfo</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>dumpObjectInfo</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dumpObjectTree</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>dumpObjectTree</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QObjectList</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>QObjectList-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QString">
            <name>objectName</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>objectName-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QObjectBindableProperty</name>
        <filename>qobjectbindableproperty.html</filename>
        <base>QPropertyData</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectBindableProperty</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>QObjectBindableProperty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectBindableProperty</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>QObjectBindableProperty-4</anchor>
            <arglist>(Class *owner, QPropertyBinding&lt;T&gt; &amp;&amp;binding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectBindableProperty</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>QObjectBindableProperty-5</anchor>
            <arglist>(Class *owner, const QPropertyBinding&lt;T&gt; &amp;binding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectBindableProperty</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>QObjectBindableProperty-1</anchor>
            <arglist>(Functor &amp;&amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectBindableProperty</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>QObjectBindableProperty-2</anchor>
            <arglist>(T &amp;&amp;initialValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectBindableProperty</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>QObjectBindableProperty-3</anchor>
            <arglist>(const T &amp;initialValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>setBinding</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>setBinding-1</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>setBinding</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>setBinding</anchor>
            <arglist>(const QPropertyBinding&lt;T&gt; &amp;newBinding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>takeBinding</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>takeBinding</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyChangeHandler&lt;Functor&gt;</type>
            <name>onValueChanged</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>onValueChanged</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyChangeHandler&lt;Functor&gt;</type>
            <name>subscribe</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>subscribe</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyNotifier</type>
            <name>addNotifier</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>addNotifier</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_OBJECT_BINDABLE_PROPERTY</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>Q_OBJECT_BINDABLE_PROPERTY</anchor>
            <arglist>(containingClass, type, name, signal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>Q_OBJECT_BINDABLE_PROPERTY_WITH_ARGS</anchor>
            <arglist>(containingClass, type, name, initialvalue, signal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setBinding</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>setBinding-2</anchor>
            <arglist>(const QUntypedPropertyBinding &amp;newBinding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>notify</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>notify</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(QObjectBindableProperty&lt;Class, T, Offset, Signal&gt;::parameter_type newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>setValue-1</anchor>
            <arglist>(QObjectBindableProperty&lt;Class, T, Offset, Signal&gt;::rvalue_ref newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QObjectBindableProperty</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>dtor.QObjectBindableProperty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObjectBindableProperty&lt;Class, T, Offset, Signal&gt;::parameter_type</type>
            <name>value</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>binding</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>binding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBinding</name>
            <anchorfile>qobjectbindableproperty.html</anchorfile>
            <anchor>hasBinding</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QObjectCleanupHandler</name>
        <filename>qobjectcleanuphandler.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>add</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>add</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QObjectCleanupHandler</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>QObjectCleanupHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QObjectCleanupHandler</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>dtor.QObjectCleanupHandler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qobjectcleanuphandler.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QObjectComputedProperty</name>
        <filename>qobjectcomputedproperty.html</filename>
        <base>QUntypedPropertyData</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_OBJECT_COMPUTED_PROPERTY</name>
            <anchorfile>qobjectcomputedproperty.html</anchorfile>
            <anchor>Q_OBJECT_COMPUTED_PROPERTY</anchor>
            <arglist>(containingClass, type, name, callback)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QOperatingSystemVersion</name>
        <filename>qoperatingsystemversion.html</filename>
        <base>QOperatingSystemVersionBase</base>
        <member kind="enumeration">
            <name>OSType</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Unknown</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Windows</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MacOS</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IOS</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TvOS</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WatchOS</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Android</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VisionOS</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>OSType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOperatingSystemVersion</type>
            <name>current</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>current</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QOperatingSystemVersion</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>QOperatingSystemVersion</anchor>
            <arglist>(QOperatingSystemVersion::OSType osType, int vmajor, int vminor, int vmicro)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOperatingSystemVersion::OSType</type>
            <name>currentType</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>currentType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QOperatingSystemVersion::OSType</type>
            <name>type</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber</type>
            <name>version</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAnyOfType</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>isAnyOfType</anchor>
            <arglist>(std::initializer_list&lt;QOperatingSystemVersion::OSType&gt; types) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>majorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>microVersion</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>microVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>minorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>segmentCount</name>
            <anchorfile>qoperatingsystemversion.html</anchorfile>
            <anchor>segmentCount</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QParallelAnimationGroup</name>
        <filename>qparallelanimationgroup.html</filename>
        <base>QAnimationGroup</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QParallelAnimationGroup</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>QParallelAnimationGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int currentTime) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateDirection</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>updateDirection</anchor>
            <arglist>(QAbstractAnimation::Direction direction) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QParallelAnimationGroup</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>dtor.QParallelAnimationGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qparallelanimationgroup.html</anchorfile>
            <anchor>duration</anchor>
            <arglist>() const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPartialOrdering</name>
        <filename>qpartialordering.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPartialOrdering</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>QPartialOrdering</anchor>
            <arglist>(std::partial_ordering stdorder)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_eq</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>is_eq</anchor>
            <arglist>(QPartialOrdering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_gt</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>is_gt</anchor>
            <arglist>(QPartialOrdering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_gteq</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>is_gteq</anchor>
            <arglist>(QPartialOrdering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_lt</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>is_lt</anchor>
            <arglist>(QPartialOrdering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_lteq</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>is_lteq</anchor>
            <arglist>(QPartialOrdering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_neq</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>is_neq</anchor>
            <arglist>(QPartialOrdering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(QPartialOrdering lhs, QPartialOrdering rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(QPartialOrdering lhs, QPartialOrdering rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::partial_ordering</type>
            <name>operator std::partial_ordering</name>
            <anchorfile>qpartialordering.html</anchorfile>
            <anchor>operator-std-3a-3apartial_ordering</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPauseAnimation</name>
        <filename>qpauseanimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableDuration</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPauseAnimation</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>QPauseAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPauseAnimation</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>QPauseAnimation-1</anchor>
            <arglist>(int msecs, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPauseAnimation</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>dtor.QPauseAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qpauseanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPermission</name>
        <filename>qpermission.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPermission</name>
            <anchorfile>qpermission.html</anchorfile>
            <anchor>QPermission</anchor>
            <arglist>(const T &amp;type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>type</name>
            <anchorfile>qpermission.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::PermissionStatus</type>
            <name>status</name>
            <anchorfile>qpermission.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::optional&lt;T&gt;</type>
            <name>value</name>
            <anchorfile>qpermission.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPersistentModelIndex</name>
        <filename>qpersistentmodelindex.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPersistentModelIndex &amp;</type>
            <name>operator=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QPersistentModelIndex &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPersistentModelIndex &amp;</type>
            <name>operator=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPersistentModelIndex &amp;</type>
            <name>operator=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QPersistentModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPersistentModelIndex</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>QPersistentModelIndex</anchor>
            <arglist>(QPersistentModelIndex &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPersistentModelIndex</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>QPersistentModelIndex-1</anchor>
            <arglist>(const QModelIndex &amp;index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPersistentModelIndex</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>QPersistentModelIndex-2</anchor>
            <arglist>(const QPersistentModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPersistentModelIndex &amp;lhs, const QModelIndex &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QPersistentModelIndex &amp;lhs, const QPersistentModelIndex &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QPersistentModelIndex &amp;lhs, const QPersistentModelIndex &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPersistentModelIndex &amp;lhs, const QModelIndex &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QPersistentModelIndex &amp;lhs, const QPersistentModelIndex &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>qHash-24</anchor>
            <arglist>(const QPersistentModelIndex &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPersistentModelIndex &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>operator QModelIndex</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>operator-QModelIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>parent</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>data</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(int role) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QAbstractItemModel *</type>
            <name>model</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>model</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>column</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>column</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>row</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>row</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>multiData</name>
            <anchorfile>qpersistentmodelindex.html</anchorfile>
            <anchor>multiData</anchor>
            <arglist>(QModelRoleDataSpan roleDataSpan) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPluginLoader</name>
        <filename>qpluginloader.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QStaticPlugin&gt;</type>
            <name>staticPlugins</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>staticPlugins</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>instance</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>instance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QObjectList</type>
            <name>staticInstances</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>staticInstances</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPluginLoader</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>QPluginLoader</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPluginLoader</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>QPluginLoader-1</anchor>
            <arglist>(const QString &amp;fileName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>load</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unload</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>unload</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qRegisterStaticPluginFunction</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>qRegisterStaticPluginFunction</anchor>
            <arglist>(QStaticPlugin plugin)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoadHints</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist>(QLibrary::LoadHints loadHints)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPluginLoader</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>dtor.QPluginLoader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>metaData</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLibrary::LoadHints</type>
            <name>loadHints</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLoaded</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>isLoaded</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="QString">
            <name>fileName</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>fileName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QLibrary::LoadHints">
            <name>loadHints</name>
            <anchorfile>qpluginloader.html</anchorfile>
            <anchor>loadHints-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPoint</name>
        <filename>qpoint.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-lt-lt-17</anchor>
            <arglist>(QDataStream &amp;stream, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-gt-gt-16</anchor>
            <arglist>(QDataStream &amp;stream, QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator*=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(double factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator*=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-eq-1</anchor>
            <arglist>(float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator*=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-eq-2</anchor>
            <arglist>(int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator+=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator-=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint &amp;</type>
            <name>operator/=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QPoint &amp;point, double factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(const QPoint &amp;point, float factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-2</anchor>
            <arglist>(const QPoint &amp;point, int factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-3</anchor>
            <arglist>(double factor, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-4</anchor>
            <arglist>(float factor, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator*</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2a-5</anchor>
            <arglist>(int factor, const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator+</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator+</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator-</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator-</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>operator/</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QPoint &amp;point, qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPoint</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>QPoint</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPoint</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>QPoint-1</anchor>
            <arglist>(int xpos, int ypos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPoint &amp;lhs, const QPoint &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPoint &amp;lhs, const QPoint &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>rx</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>rx</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>ry</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>ry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>dotProduct</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CGPoint</type>
            <name>toCGPoint</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>toCGPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>transposed</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>manhattanLength</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>manhattanLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qpoint.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPointF</name>
        <filename>qpointf.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-lt-lt-18</anchor>
            <arglist>(QDataStream &amp;stream, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-gt-gt-17</anchor>
            <arglist>(QDataStream &amp;stream, QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF &amp;</type>
            <name>operator*=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF &amp;</type>
            <name>operator/=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPointF</type>
            <name>fromCGPoint</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>fromCGPoint</anchor>
            <arglist>(CGPoint point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator*</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QPointF &amp;point, qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator*</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(qreal factor, const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator+</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator+</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator-</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator-</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>operator/</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QPointF &amp;point, qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointF</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>QPointF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointF</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>QPointF-1</anchor>
            <arglist>(const QPoint &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointF</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>QPointF-2</anchor>
            <arglist>(qreal xpos, qreal ypos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QPointF &amp;lhs, const QPointF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QPointF &amp;lhs, const QPointF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyIsNull</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>qFuzzyIsNull</anchor>
            <arglist>(const QPointF &amp;point)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal &amp;</type>
            <name>rx</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>rx</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal &amp;</type>
            <name>ry</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>ry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qreal</type>
            <name>dotProduct</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>dotProduct</anchor>
            <arglist>(const QPointF &amp;p1, const QPointF &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CGPoint</type>
            <name>toCGPoint</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>toCGPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>transposed</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>manhattanLength</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>manhattanLength</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qpointf.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPointer</name>
        <filename>qpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>QPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>QPointer-1</anchor>
            <arglist>(QPointer&lt;X&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>QPointer-2</anchor>
            <arglist>(T *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>QPointer-3</anchor>
            <arglist>(const QPointer&lt;X&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>QPointer-4</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QPointer&lt;X&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(T *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QPointer&lt;X&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(X *const &amp;lhs, const QPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QPointer&lt;T&gt; &amp;lhs, X *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const QPointer&lt;T&gt; &amp;lhs, const QPointer&lt;X&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-not-eq-3</anchor>
            <arglist>(const QPointer&lt;T&gt; &amp;lhs, const std::nullptr_t &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-not-eq-4</anchor>
            <arglist>(const std::nullptr_t &amp;lhs, const QPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(X *const &amp;lhs, const QPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QPointer&lt;T&gt; &amp;lhs, X *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const QPointer&lt;T&gt; &amp;lhs, const QPointer&lt;X&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq-eq-3</anchor>
            <arglist>(const QPointer&lt;T&gt; &amp;lhs, const std::nullptr_t &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-eq-eq-4</anchor>
            <arglist>(const std::nullptr_t &amp;lhs, const QPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPointer</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>dtor.QPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>get</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>get</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator T *</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator-T--2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qpointer.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProcess</name>
        <filename>qprocess.html</filename>
        <base>QIODevice</base>
        <class>QProcess::CreateProcessArguments</class>
        <class>QProcess::UnixProcessParameters</class>
        <member kind="enumeration">
            <name>ExitStatus</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ExitStatus-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NormalExit</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ExitStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CrashExit</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ExitStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>InputChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>InputChannelMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ManagedInputChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>InputChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForwardedInputChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>InputChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ProcessChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannel-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StandardOutput</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StandardError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannel-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ProcessChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannelMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SeparateChannels</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MergedChannels</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForwardedChannels</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForwardedOutputChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForwardedErrorChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessChannelMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ProcessError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FailedToStart</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Crashed</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Timedout</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ProcessState</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotRunning</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Starting</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Running</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>ProcessState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UnixProcessFlag</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ResetSignalHandlers</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IgnoreSigPipe</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CloseFileDescriptors</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UseVFork</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CreateNewSession</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DisconnectControllingTerminal</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ResetIds</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DisableCoreDumps</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readAllStandardError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readAllStandardError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>readAllStandardOutput</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readAllStandardOutput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProcess</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>QProcess</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>nullDevice</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>nullDevice</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>splitCommand</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>splitCommand</anchor>
            <arglist>(QStringView command)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>systemEnvironment</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>systemEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QIODeviceBase::OpenMode mode) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>startDetached</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>startDetached-1</anchor>
            <arglist>(const QString &amp;program, const QStringList &amp;arguments, const QString &amp;workingDirectory, qint64 *pid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startDetached</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>startDetached</anchor>
            <arglist>(qint64 *pid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForBytesWritten</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>waitForBytesWritten</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForFinished</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>waitForFinished</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>waitForReadyRead</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>waitForReadyRead</anchor>
            <arglist>(int msecs) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForStarted</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>waitForStarted</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>execute</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>execute</anchor>
            <arglist>(const QString &amp;program, const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>readData</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readData</anchor>
            <arglist>(char *data, qint64 maxlen) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>close</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>close</anchor>
            <arglist>() override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeReadChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>closeReadChannel</anchor>
            <arglist>(QProcess::ProcessChannel channel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>closeWriteChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>closeWriteChannel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>errorOccurred</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>errorOccurred</anchor>
            <arglist>(QProcess::ProcessError error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>failChildProcessModifier</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>failChildProcessModifier</anchor>
            <arglist>(const char *description, int error)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>(int exitCode, QProcess::ExitStatus exitStatus)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>kill</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>kill</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readyReadStandardError</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readyReadStandardError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readyReadStandardOutput</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readyReadStandardOutput</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArguments</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setArguments</anchor>
            <arglist>(const QStringList &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setChildProcessModifier</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setChildProcessModifier</anchor>
            <arglist>(const std::function&lt;void ()&gt; &amp;modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCreateProcessArgumentsModifier</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setCreateProcessArgumentsModifier</anchor>
            <arglist>(QProcess::CreateProcessArgumentModifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnvironment</name>
            <anchorfile>qprocess-obsolete.html</anchorfile>
            <anchor>setEnvironment</anchor>
            <arglist>(const QStringList &amp;environment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInputChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setInputChannelMode</anchor>
            <arglist>(QProcess::InputChannelMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeArguments</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setNativeArguments</anchor>
            <arglist>(const QString &amp;arguments)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProcessChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setProcessChannelMode</anchor>
            <arglist>(QProcess::ProcessChannelMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProcessEnvironment</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setProcessEnvironment</anchor>
            <arglist>(const QProcessEnvironment &amp;environment)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>setProcessState</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setProcessState</anchor>
            <arglist>(QProcess::ProcessState state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProgram</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setProgram</anchor>
            <arglist>(const QString &amp;program)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setReadChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setReadChannel</anchor>
            <arglist>(QProcess::ProcessChannel channel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardErrorFile</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setStandardErrorFile</anchor>
            <arglist>(const QString &amp;fileName, QIODeviceBase::OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardInputFile</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setStandardInputFile</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardOutputFile</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setStandardOutputFile</anchor>
            <arglist>(const QString &amp;fileName, QIODeviceBase::OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStandardOutputProcess</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setStandardOutputProcess</anchor>
            <arglist>(QProcess *destination)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnixProcessParameters</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setUnixProcessParameters-1</anchor>
            <arglist>(QProcess::UnixProcessFlags flagsOnly)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUnixProcessParameters</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setUnixProcessParameters</anchor>
            <arglist>(const QProcess::UnixProcessParameters &amp;params)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWorkingDirectory</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>setWorkingDirectory</anchor>
            <arglist>(const QString &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>start-1</anchor>
            <arglist>(QIODeviceBase::OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(const QString &amp;program, const QStringList &amp;arguments, QIODeviceBase::OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startCommand</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>startCommand</anchor>
            <arglist>(const QString &amp;command, QIODeviceBase::OpenMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QProcess::ProcessState newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>terminate</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>terminate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QProcess</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>dtor.QProcess</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::CreateProcessArgumentModifier</type>
            <name>createProcessArgumentsModifier</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>createProcessArgumentsModifier</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::ExitStatus</type>
            <name>exitStatus</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>exitStatus</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::InputChannelMode</type>
            <name>inputChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>inputChannelMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::ProcessChannel</type>
            <name>readChannel</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>readChannel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::ProcessChannelMode</type>
            <name>processChannelMode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>processChannelMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::ProcessError</type>
            <name>error</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::ProcessState</type>
            <name>state</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcess::UnixProcessParameters</type>
            <name>unixProcessParameters</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>unixProcessParameters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcessEnvironment</type>
            <name>processEnvironment</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>processEnvironment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeArguments</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>nativeArguments</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>program</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>program</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>workingDirectory</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>workingDirectory</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>arguments</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>arguments</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>environment</name>
            <anchorfile>qprocess-obsolete.html</anchorfile>
            <anchor>environment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isSequential</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>isSequential</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>exitCode</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>exitCode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>bytesToWrite</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>bytesToWrite</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>processId</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>processId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::function&lt;void ()&gt;</type>
            <name>childProcessModifier</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>childProcessModifier</anchor>
            <arglist>()&gt; childProcessModifier() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>CreateProcessArgumentModifier</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>CreateProcessArgumentModifier-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QProcess::UnixProcessFlag">
            <name>UnixProcessFlags</name>
            <anchorfile>qprocess.html</anchorfile>
            <anchor>UnixProcessFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProcess::CreateProcessArguments</name>
        <filename>qprocess-createprocessarguments.html</filename>
    </compound>
    <compound kind="class">
        <name>QProcess::UnixProcessParameters</name>
        <filename>qprocess-unixprocessparameters.html</filename>
    </compound>
    <compound kind="class">
        <name>QProcessEnvironment</name>
        <filename>qprocessenvironment.html</filename>
        <member kind="enumeration">
            <name>Initialization</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>Initialization-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>InheritFromParent</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>Initialization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProcessEnvironment &amp;</type>
            <name>operator=</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QProcessEnvironment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QProcessEnvironment</type>
            <name>systemEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>systemEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProcessEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>QProcessEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProcessEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>QProcessEnvironment-1</anchor>
            <arglist>(QProcessEnvironment::Initialization)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProcessEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>QProcessEnvironment-2</anchor>
            <arglist>(const QProcessEnvironment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QProcessEnvironment &amp;lhs, const QProcessEnvironment &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QProcessEnvironment &amp;lhs, const QProcessEnvironment &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(const QProcessEnvironment &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const QString &amp;name, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QProcessEnvironment &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QProcessEnvironment</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>dtor.QProcessEnvironment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>value</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(const QString &amp;name, const QString &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>keys</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>keys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>toStringList</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>toStringList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>inheritsFromParent</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>inheritsFromParent</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qprocessenvironment.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPromise</name>
        <filename>qpromise.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPromise</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>QPromise</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPromise</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>QPromise-1</anchor>
            <arglist>(QPromise&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPromise&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QPromise&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addResult</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>addResult</anchor>
            <arglist>(T &amp;&amp;result, int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addResult</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>addResult-1</anchor>
            <arglist>(const T &amp;result, int index)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>addResults</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>addResults</anchor>
            <arglist>(const QList&lt;T&gt; &amp;results)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>emplaceResult</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>emplaceResult</anchor>
            <arglist>(Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>emplaceResultAt</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>emplaceResultAt</anchor>
            <arglist>(int index, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finish</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>finish</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setException</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>setException</anchor>
            <arglist>(const QException &amp;e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setException</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>setException-1</anchor>
            <arglist>(std::__exception_ptr::exception_ptr e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProgressRange</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>setProgressRange</anchor>
            <arglist>(int minimum, int maximum)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProgressValue</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>setProgressValue</anchor>
            <arglist>(int progressValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setProgressValueAndText</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>setProgressValueAndText</anchor>
            <arglist>(int progressValue, const QString &amp;progressText)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>suspendIfRequested</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>suspendIfRequested</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QPromise&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPromise</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>dtor.QPromise</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>future</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>future</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCanceled</name>
            <anchorfile>qpromise.html</anchorfile>
            <anchor>isCanceled</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QProperty</name>
        <filename>qproperty.html</filename>
        <base>QPropertyData</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProperty</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>QProperty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProperty</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>QProperty-1</anchor>
            <arglist>(Functor &amp;&amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProperty</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>QProperty-3</anchor>
            <arglist>(T &amp;&amp;initialValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProperty</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>QProperty-4</anchor>
            <arglist>(const QPropertyBinding&lt;T&gt; &amp;binding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QProperty</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>QProperty-5</anchor>
            <arglist>(const T &amp;initialValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProperty&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QProperty&lt;T&gt;::parameter_type newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProperty&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QProperty&lt;T&gt;::rvalue_ref newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>setBinding</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>setBinding-1</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>setBinding</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>setBinding</anchor>
            <arglist>(const QPropertyBinding&lt;T&gt; &amp;newBinding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>takeBinding</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>takeBinding</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyChangeHandler&lt;Functor&gt;</type>
            <name>onValueChanged</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>onValueChanged</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyChangeHandler&lt;Functor&gt;</type>
            <name>subscribe</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>subscribe</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyNotifier</type>
            <name>addNotifier</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>addNotifier</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setBinding</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>setBinding-2</anchor>
            <arglist>(const QUntypedPropertyBinding &amp;newBinding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginPropertyUpdateGroup</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>beginPropertyUpdateGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endPropertyUpdateGroup</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>endPropertyUpdateGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(QProperty&lt;T&gt;::parameter_type newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>setValue-1</anchor>
            <arglist>(QProperty&lt;T&gt;::rvalue_ref newValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QProperty</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>dtor.QProperty</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QProperty&lt;T&gt;::parameter_type</type>
            <name>value</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBinding&lt;T&gt;</type>
            <name>binding</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>binding</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPropertyAnimation</name>
        <filename>qpropertyanimation.html</filename>
        <base>QVariantAnimation</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QByteArray&gt;</type>
            <name>bindablePropertyName</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>propertyName-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QObject *&gt;</type>
            <name>bindableTargetObject</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>targetObject-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyAnimation</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>QPropertyAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyAnimation</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>QPropertyAnimation-1</anchor>
            <arglist>(QObject *target, const QByteArray &amp;propertyName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPropertyName</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>propertyName-prop</anchor>
            <arglist>(const QByteArray &amp;propertyName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetObject</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>targetObject-prop</anchor>
            <arglist>(QObject *target)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentValue</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>updateCurrentValue</anchor>
            <arglist>(const QVariant &amp;value) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QPropertyAnimation</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>dtor.QPropertyAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>propertyName</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>propertyName-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>targetObject</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>targetObject-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="QByteArray">
            <name>propertyName</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>propertyName-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QObject*">
            <name>targetObject</name>
            <anchorfile>qpropertyanimation.html</anchorfile>
            <anchor>targetObject-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPropertyBindingError</name>
        <filename>qpropertybindingerror.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BindingLoop</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EvaluationError</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBindingError &amp;</type>
            <name>operator=</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QPropertyBindingError &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBindingError &amp;</type>
            <name>operator=</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QPropertyBindingError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyBindingError</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>QPropertyBindingError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyBindingError</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>QPropertyBindingError-1</anchor>
            <arglist>(QPropertyBindingError &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyBindingError</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>QPropertyBindingError-3</anchor>
            <arglist>(QPropertyBindingError::Type type, const QString &amp;description)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QPropertyBindingError</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>QPropertyBindingError-2</anchor>
            <arglist>(const QPropertyBindingError &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QPropertyBindingError</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>dtor.QPropertyBindingError</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyBindingError::Type</type>
            <name>type</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>description</name>
            <anchorfile>qpropertybindingerror.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPropertyChangeHandler</name>
        <filename>qpropertychangehandler.html</filename>
        <base>QPropertyObserver</base>
    </compound>
    <compound kind="class">
        <name>QPropertyData</name>
        <filename>qpropertydata.html</filename>
        <base>QUntypedPropertyData</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueBypassingBindings</name>
            <anchorfile>qpropertydata.html</anchorfile>
            <anchor>setValueBypassingBindings</anchor>
            <arglist>(QPropertyData&lt;T&gt;::parameter_type v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValueBypassingBindings</name>
            <anchorfile>qpropertydata.html</anchorfile>
            <anchor>setValueBypassingBindings-1</anchor>
            <arglist>(QPropertyData&lt;T&gt;::rvalue_ref v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyData&lt;T&gt;::parameter_type</type>
            <name>valueBypassingBindings</name>
            <anchorfile>qpropertydata.html</anchorfile>
            <anchor>valueBypassingBindings</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QPropertyNotifier</name>
        <filename>qpropertynotifier.html</filename>
        <base>QPropertyObserver</base>
    </compound>
    <compound kind="class">
        <name>QQueue</name>
        <filename>qqueue.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>head</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>head</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>dequeue</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>dequeue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>enqueue</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>enqueue</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QQueue&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>head</name>
            <anchorfile>qqueue.html</anchorfile>
            <anchor>head-1</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRandomGenerator</name>
        <filename>qrandomgenerator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRandomGenerator *</type>
            <name>global</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>global</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRandomGenerator *</type>
            <name>system</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>system</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRandomGenerator</type>
            <name>securelySeeded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>securelySeeded</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRandomGenerator</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>QRandomGenerator</anchor>
            <arglist>(const QRandomGenerator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRandomGenerator</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>QRandomGenerator-2</anchor>
            <arglist>(const quint32 (&amp;)[N] seedBuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRandomGenerator</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>QRandomGenerator-4</anchor>
            <arglist>(const quint32 *begin, const quint32 *end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRandomGenerator</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>QRandomGenerator-5</anchor>
            <arglist>(const quint32 *seedBuffer, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRandomGenerator</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>QRandomGenerator-1</anchor>
            <arglist>(quint32 seedValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRandomGenerator</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>QRandomGenerator-3</anchor>
            <arglist>(std::seed_seq &amp;sseq)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRandomGenerator::result_type</type>
            <name>max</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>max</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRandomGenerator::result_type</type>
            <name>min</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>min</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRandomGenerator::result_type</type>
            <name>operator()</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRandomGenerator &amp;rng1, const QRandomGenerator &amp;rng2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded</anchor>
            <arglist>(double highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>generateDouble</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>generateDouble</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-1</anchor>
            <arglist>(int highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-5</anchor>
            <arglist>(int lowest, int highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-6</anchor>
            <arglist>(int lowest, qint64 highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-2</anchor>
            <arglist>(qint64 highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-7</anchor>
            <arglist>(qint64 lowest, int highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-8</anchor>
            <arglist>(qint64 lowest, qint64 highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-3</anchor>
            <arglist>(quint32 highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-9</anchor>
            <arglist>(quint32 lowest, quint32 highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>generate</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>generate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-4</anchor>
            <arglist>(quint64 highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-10</anchor>
            <arglist>(quint64 lowest, quint64 highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-11</anchor>
            <arglist>(quint64 lowest, unsigned int highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>bounded</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>bounded-12</anchor>
            <arglist>(unsigned int lowest, quint64 highest)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>generate64</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>generate64</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>discard</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>discard</anchor>
            <arglist>(unsigned long long z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRange</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>fillRange</anchor>
            <arglist>(UInt (&amp;)[N] buffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>fillRange</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>fillRange-1</anchor>
            <arglist>(UInt *buffer, qsizetype count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generate</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>generate-1</anchor>
            <arglist>(ForwardIterator begin, ForwardIterator end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>seed</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>seed</anchor>
            <arglist>(quint32 seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>seed</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>seed-1</anchor>
            <arglist>(std::seed_seq &amp;seed)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>result_type</name>
            <anchorfile>qrandomgenerator.html</anchorfile>
            <anchor>result_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRandomGenerator64</name>
        <filename>qrandomgenerator64.html</filename>
        <base>QRandomGenerator</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRandomGenerator64::result_type</type>
            <name>operator()</name>
            <anchorfile>qrandomgenerator64.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>generate</name>
            <anchorfile>qrandomgenerator64.html</anchorfile>
            <anchor>generate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="">
            <name>result_type</name>
            <anchorfile>qrandomgenerator64.html</anchorfile>
            <anchor>result_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QReadLocker</name>
        <filename>qreadlocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QReadLocker</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>QReadLocker</anchor>
            <arglist>(QReadWriteLock *lock)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relock</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>relock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QReadLocker</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>dtor.QReadLocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QReadWriteLock *</type>
            <name>readWriteLock</name>
            <anchorfile>qreadlocker.html</anchorfile>
            <anchor>readWriteLock</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QReadWriteLock</name>
        <filename>qreadwritelock.html</filename>
        <member kind="enumeration">
            <name>RecursionMode</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>RecursionMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NonRecursive</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>RecursionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Recursive</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>RecursionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QReadWriteLock</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>QReadWriteLock</anchor>
            <arglist>(QReadWriteLock::RecursionMode recursionMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLockForRead</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>tryLockForRead-1</anchor>
            <arglist>(QDeadlineTimer timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLockForRead</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>tryLockForRead</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLockForWrite</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>tryLockForWrite-1</anchor>
            <arglist>(QDeadlineTimer timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLockForWrite</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>tryLockForWrite</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lockForRead</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>lockForRead</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lockForWrite</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>lockForWrite</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QReadWriteLock</name>
            <anchorfile>qreadwritelock.html</anchorfile>
            <anchor>dtor.QReadWriteLock</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRect</name>
        <filename>qrect.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-lt-lt-19</anchor>
            <arglist>(QDataStream &amp;stream, const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-gt-gt-18</anchor>
            <arglist>(QDataStream &amp;stream, QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect &amp;</type>
            <name>operator+=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect &amp;</type>
            <name>operator-=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect &amp;</type>
            <name>operator|=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>operator+</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QMargins &amp;margins, const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>operator+</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QRect &amp;rectangle, const QMargins &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>operator-</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator--6</anchor>
            <arglist>(const QRect &amp;lhs, const QMargins &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRect</type>
            <name>span</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QPoint &amp;p1, const QPoint &amp;p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>QRect</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>QRect-1</anchor>
            <arglist>(const QPoint &amp;topLeft, const QPoint &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>QRect-2</anchor>
            <arglist>(const QPoint &amp;topLeft, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>QRect-3</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRect &amp;lhs, const QRect &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRect &amp;lhs, const QRect &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjust</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>adjust</anchor>
            <arglist>(int dx1, int dy1, int dx2, int dy2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottom</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveBottom</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottomLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveBottomLeft</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottomRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveBottomRight</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveCenter</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveCenter</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveLeft</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveRight</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTo</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTo-1</anchor>
            <arglist>(int x, int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTop</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTop</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTopLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTopLeft</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTopRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>moveTopRight</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setBottomLeft</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setBottomRight</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoords</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setCoords</anchor>
            <arglist>(int x1, int y1, int x2, int y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(int x, int y, int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setTopLeft</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setTopRight</anchor>
            <arglist>(const QPoint &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(int y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(const QPoint &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(int dx, int dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CGRect</type>
            <name>toCGRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>toCGRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>bottomLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>bottomLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>bottomRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>bottomRight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>center</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>topLeft</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>topLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>topRight</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>topRight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>adjusted</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>adjusted</anchor>
            <arglist>(int dx1, int dy1, int dx2, int dy2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>intersected</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>marginsAdded</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>marginsAdded</anchor>
            <arglist>(const QMargins &amp;margins) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>marginsRemoved</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>marginsRemoved</anchor>
            <arglist>(const QMargins &amp;margins) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>normalized</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>operator&amp;</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>operator|</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>translated</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>translated-1</anchor>
            <arglist>(const QPoint &amp;offset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>translated</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(int dx, int dy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>transposed</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>united</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>toRectF</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>toRectF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>size</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPoint &amp;point, bool proper) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(const QRect &amp;rectangle, bool proper) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(int x, int y) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(int x, int y, bool proper) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRect &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>bottom</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>left</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>right</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>top</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>x</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>y</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCoords</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>getCoords</anchor>
            <arglist>(int *x1, int *y1, int *x2, int *y2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRect</name>
            <anchorfile>qrect.html</anchorfile>
            <anchor>getRect</anchor>
            <arglist>(int *x, int *y, int *width, int *height) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRectF</name>
        <filename>qrectf.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-lt-lt-20</anchor>
            <arglist>(QDataStream &amp;stream, const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-gt-gt-19</anchor>
            <arglist>(QDataStream &amp;stream, QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QMarginsF &amp;margins)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF &amp;</type>
            <name>operator|=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QRectF &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRectF</type>
            <name>fromCGRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>fromCGRect</anchor>
            <arglist>(CGRect rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRectF</type>
            <name>fromDOMRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>fromDOMRect</anchor>
            <arglist>(emscripten::val domRect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>operator+</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QMarginsF &amp;lhs, const QRectF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>operator+</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QRectF &amp;lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>operator-</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator--7</anchor>
            <arglist>(const QRectF &amp;lhs, const QMarginsF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF-2</anchor>
            <arglist>(const QPointF &amp;topLeft, const QPointF &amp;bottomRight)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF-3</anchor>
            <arglist>(const QPointF &amp;topLeft, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF-1</anchor>
            <arglist>(const QRect &amp;rectangle)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRectF</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>QRectF-4</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRectF &amp;lhs, const QRectF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRectF &amp;lhs, const QRectF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QRectF &amp;lhs, const QRectF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyIsNull</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>qFuzzyIsNull</anchor>
            <arglist>(const QRectF &amp;rect)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>adjust</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>adjust</anchor>
            <arglist>(qreal dx1, qreal dy1, qreal dx2, qreal dy2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottom</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveBottom</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottomLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveBottomLeft</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveBottomRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveBottomRight</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveCenter</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveCenter</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveLeft</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveRight</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTo-1</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTo</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTo</anchor>
            <arglist>(qreal x, qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTop</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTop</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTopLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTopLeft</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>moveTopRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>moveTopRight</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottom</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setBottom</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setBottomLeft</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBottomRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setBottomRight</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCoords</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setCoords</anchor>
            <arglist>(qreal x1, qreal y1, qreal x2, qreal y2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setLeft</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setRect</anchor>
            <arglist>(qreal x, qreal y, qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setRight</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTop</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setTop</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setTopLeft</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setTopRight</anchor>
            <arglist>(const QPointF &amp;position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setX</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setX</anchor>
            <arglist>(qreal x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setY</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>setY</anchor>
            <arglist>(qreal y)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>translate-1</anchor>
            <arglist>(const QPointF &amp;offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>translate</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(qreal dx, qreal dy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CGRect</type>
            <name>toCGRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>toCGRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>bottomLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>bottomLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>bottomRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>bottomRight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>center</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>center</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>topLeft</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>topLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>topRight</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>topRight</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>toAlignedRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>toAlignedRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>toRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>toRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>adjusted</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>adjusted</anchor>
            <arglist>(qreal dx1, qreal dy1, qreal dx2, qreal dy2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>intersected</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>intersected</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>marginsAdded</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>marginsAdded</anchor>
            <arglist>(const QMarginsF &amp;margins) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>marginsRemoved</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>marginsRemoved</anchor>
            <arglist>(const QMarginsF &amp;margins) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>normalized</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>operator&amp;</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>operator|</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>translated</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>translated-1</anchor>
            <arglist>(const QPointF &amp;offset) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>translated</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>translated</anchor>
            <arglist>(qreal dx, qreal dy) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>transposed</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>united</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>united</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>size</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QPointF &amp;point) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(qreal x, qreal y) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QRectF &amp;rectangle) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>emscripten::val</type>
            <name>toDOMRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>toDOMRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>bottom</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>bottom</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>left</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>left</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>right</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>right</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>top</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>top</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>x</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>x</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>y</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>y</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getCoords</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>getCoords</anchor>
            <arglist>(qreal *x1, qreal *y1, qreal *x2, qreal *y2) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>getRect</name>
            <anchorfile>qrectf.html</anchorfile>
            <anchor>getRect</anchor>
            <arglist>(qreal *x, qreal *y, qreal *width, qreal *height) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRecursiveMutex</name>
        <filename>qrecursivemutex.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRecursiveMutex</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>QRecursiveMutex</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>tryLock</anchor>
            <arglist>(QDeadlineTimer timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryLock</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>tryLock-1</anchor>
            <arglist>(int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_lock</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>try_lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_lock_for</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>try_lock_for</anchor>
            <arglist>(std::chrono::duration&lt;Rep, Period&gt; duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_lock_until</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>try_lock_until</anchor>
            <arglist>(std::chrono::time_point&lt;Clock, Duration&gt; timePoint)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>lock</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRecursiveMutex</name>
            <anchorfile>qrecursivemutex.html</anchorfile>
            <anchor>dtor.QRecursiveMutex</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegularExpression</name>
        <filename>qregularexpression.html</filename>
        <member kind="enumeration">
            <name>MatchOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoMatchOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchorAtOffsetMatchOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchoredMatchOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontCheckSubjectStringMatchOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MatchType</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NormalMatch</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartialPreferCompleteMatch</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartialPreferFirstMatch</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoMatch</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PatternOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPatternOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CaseInsensitiveOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DotMatchesEverythingOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MultilineOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtendedPatternSyntaxOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvertedGreedinessOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DontCaptureOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UseUnicodePropertiesOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WildcardConversionOption</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>WildcardConversionOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultWildcardConversion</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>WildcardConversionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnanchoredWildcardConversion</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>WildcardConversionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NonPathWildcardConversion</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>WildcardConversionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;out, const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-gt-gt-20</anchor>
            <arglist>(QDataStream &amp;in, QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDebug debug, QRegularExpression::PatternOptions patternOptions)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDebug debug, const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QRegularExpression &amp;&amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRegularExpression</type>
            <name>fromWildcard</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>fromWildcard</anchor>
            <arglist>(QStringView pattern, Qt::CaseSensitivity cs, QRegularExpression::WildcardConversionOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>QRegularExpression</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>QRegularExpression-1</anchor>
            <arglist>(QRegularExpression &amp;&amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>QRegularExpression-2</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>QRegularExpression-3</anchor>
            <arglist>(const QString &amp;pattern, QRegularExpression::PatternOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>anchoredPattern</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>anchoredPattern</anchor>
            <arglist>(QStringView expression)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>anchoredPattern</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>anchoredPattern-1</anchor>
            <arglist>(const QString &amp;expression)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>escape</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>escape</anchor>
            <arglist>(QStringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>escape</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>escape-1</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>wildcardToRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>wildcardToRegularExpression</anchor>
            <arglist>(QStringView pattern, QRegularExpression::WildcardConversionOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>wildcardToRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>wildcardToRegularExpression-1</anchor>
            <arglist>(const QString &amp;pattern, QRegularExpression::WildcardConversionOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QRegularExpression &amp;lhs, const QRegularExpression &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QRegularExpression &amp;lhs, const QRegularExpression &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>qHash-25</anchor>
            <arglist>(const QRegularExpression &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPattern</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>setPattern</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPatternOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>setPatternOptions</anchor>
            <arglist>(QRegularExpression::PatternOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegularExpression &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRegularExpression</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>dtor.QRegularExpression</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::PatternOptions</type>
            <name>patternOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>patternOptions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>match</name>
            <anchorfile>qregularexpression-obsolete.html</anchorfile>
            <anchor>match-1</anchor>
            <arglist>(QStringView subjectView, qsizetype offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>match</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QString &amp;subject, qsizetype offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>matchView</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>matchView</anchor>
            <arglist>(QStringView subjectView, qsizetype offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator</type>
            <name>globalMatch</name>
            <anchorfile>qregularexpression-obsolete.html</anchorfile>
            <anchor>globalMatch-1</anchor>
            <arglist>(QStringView subjectView, qsizetype offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator</type>
            <name>globalMatch</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>globalMatch</anchor>
            <arglist>(const QString &amp;subject, qsizetype offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator</type>
            <name>globalMatchView</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>globalMatchView</anchor>
            <arglist>(QStringView subjectView, qsizetype offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>pattern</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>namedCaptureGroups</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>namedCaptureGroups</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>captureCount</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>captureCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>patternErrorOffset</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>patternErrorOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>optimize</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>optimize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QRegularExpression::MatchOption">
            <name>MatchOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>MatchOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRegularExpression::PatternOption">
            <name>PatternOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>PatternOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRegularExpression::WildcardConversionOption">
            <name>WildcardConversionOptions</name>
            <anchorfile>qregularexpression.html</anchorfile>
            <anchor>WildcardConversionOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegularExpressionMatch</name>
        <filename>qregularexpressionmatch.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>operator-lt-lt-43</anchor>
            <arglist>(QDebug debug, const QRegularExpressionMatch &amp;match)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QRegularExpressionMatch &amp;&amp;match)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QRegularExpressionMatch &amp;match)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>QRegularExpressionMatch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>QRegularExpressionMatch-1</anchor>
            <arglist>(QRegularExpressionMatch &amp;&amp;match)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>QRegularExpressionMatch-2</anchor>
            <arglist>(const QRegularExpressionMatch &amp;match)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegularExpressionMatch &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRegularExpressionMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>dtor.QRegularExpressionMatch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>regularExpression</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>regularExpression</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::MatchOptions</type>
            <name>matchOptions</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>matchOptions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::MatchType</type>
            <name>matchType</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>matchType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>captured</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>captured</anchor>
            <arglist>(QAnyStringView name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>captured</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>captured-1</anchor>
            <arglist>(int nth) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>capturedTexts</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedTexts</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>capturedView</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedView</anchor>
            <arglist>(QAnyStringView name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>capturedView</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedView-1</anchor>
            <arglist>(int nth) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasCaptured</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>hasCaptured</anchor>
            <arglist>(QAnyStringView name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasCaptured</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>hasCaptured-1</anchor>
            <arglist>(int nth) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>hasMatch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasPartialMatch</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>hasPartialMatch</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>lastCapturedIndex</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>lastCapturedIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capturedEnd</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedEnd</anchor>
            <arglist>(QAnyStringView name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capturedEnd</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedEnd-1</anchor>
            <arglist>(int nth) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capturedLength</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedLength</anchor>
            <arglist>(QAnyStringView name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capturedLength</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedLength-1</anchor>
            <arglist>(int nth) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capturedStart</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedStart</anchor>
            <arglist>(QAnyStringView name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capturedStart</name>
            <anchorfile>qregularexpressionmatch.html</anchorfile>
            <anchor>capturedStart-1</anchor>
            <arglist>(int nth) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRegularExpressionMatchIterator</name>
        <filename>qregularexpressionmatchiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>next</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QRegularExpressionMatchIterator &amp;&amp;iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatchIterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QRegularExpressionMatchIterator &amp;iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatchIterator</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>QRegularExpressionMatchIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatchIterator</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>QRegularExpressionMatchIterator-1</anchor>
            <arglist>(QRegularExpressionMatchIterator &amp;&amp;iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRegularExpressionMatchIterator</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>QRegularExpressionMatchIterator-2</anchor>
            <arglist>(const QRegularExpressionMatchIterator &amp;iterator)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QRegularExpressionMatchIterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRegularExpressionMatchIterator</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>dtor.QRegularExpressionMatchIterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>regularExpression</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>regularExpression</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::MatchOptions</type>
            <name>matchOptions</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>matchOptions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression::MatchType</type>
            <name>matchType</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>matchType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpressionMatch</type>
            <name>peekNext</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qregularexpressionmatchiterator.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QResource</name>
        <filename>qresource.html</filename>
        <member kind="enumeration">
            <name>Compression</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>Compression-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoCompression</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>Compression-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZlibCompression</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>Compression-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZstdCompression</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>Compression-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>QResource</anchor>
            <arglist>(const QString &amp;file, const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>registerResource</anchor>
            <arglist>(const QString &amp;rccFileName, const QString &amp;mapRoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>registerResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>registerResource-1</anchor>
            <arglist>(const uchar *rccData, const QString &amp;mapRoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>unregisterResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>unregisterResource</anchor>
            <arglist>(const QString &amp;rccFileName, const QString &amp;mapRoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>unregisterResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>unregisterResource-1</anchor>
            <arglist>(const uchar *rccData, const QString &amp;mapRoot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QResource</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>dtor.QResource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>uncompressedData</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>uncompressedData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>lastModified</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>lastModified</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QResource::Compression</type>
            <name>compressionAlgorithm</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>compressionAlgorithm</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>absoluteFilePath</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>absoluteFilePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QStringList</type>
            <name>children</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>children</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isDir</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>isDir</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>bool</type>
            <name>isFile</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>isFile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const uchar *</type>
            <name>data</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>size</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>uncompressedSize</name>
            <anchorfile>qresource.html</anchorfile>
            <anchor>uncompressedSize</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRomanCalendar</name>
        <filename>qromancalendar.html</filename>
    </compound>
    <compound kind="class">
        <name>QRunnable</name>
        <filename>qrunnable.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRunnable *</type>
            <name>create</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(Callable &amp;&amp;callableToRun)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRunnable</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>QRunnable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>run</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoDelete</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>setAutoDelete</anchor>
            <arglist>(bool autoDelete)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QRunnable</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>dtor.QRunnable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoDelete</name>
            <anchorfile>qrunnable.html</anchorfile>
            <anchor>autoDelete</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSaveFile</name>
        <filename>qsavefile.html</filename>
        <base>QFileDevice</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSaveFile</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>QSaveFile</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSaveFile</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>QSaveFile-1</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSaveFile</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>QSaveFile-2</anchor>
            <arglist>(const QString &amp;name, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>commit</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>commit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>open</anchor>
            <arglist>(QIODeviceBase::OpenMode mode) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual qint64</type>
            <name>writeData</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>writeData</anchor>
            <arglist>(const char *data, qint64 len) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>cancelWriting</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>cancelWriting</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirectWriteFallback</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>setDirectWriteFallback</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileName</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>setFileName</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSaveFile</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>dtor.QSaveFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>fileName</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>directWriteFallback</name>
            <anchorfile>qsavefile.html</anchorfile>
            <anchor>directWriteFallback</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScopeGuard</name>
        <filename>qscopeguard.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopeGuard</name>
            <anchorfile>qscopeguard.html</anchorfile>
            <anchor>QScopeGuard</anchor>
            <arglist>(F &amp;&amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopeGuard</name>
            <anchorfile>qscopeguard.html</anchorfile>
            <anchor>QScopeGuard-1</anchor>
            <arglist>(const F &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QScopeGuard&lt;typename std::decay&lt;F&gt;::type&gt;</type>
            <name>qScopeGuard</name>
            <anchorfile>qscopeguard.html</anchorfile>
            <anchor>qScopeGuard</anchor>
            <arglist>(F &amp;&amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dismiss</name>
            <anchorfile>qscopeguard.html</anchorfile>
            <anchor>dismiss</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScopedArrayPointer</name>
        <filename>qscopedarraypointer.html</filename>
        <base>QScopedPointer</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedArrayPointer</name>
            <anchorfile>qscopedarraypointer.html</anchorfile>
            <anchor>QScopedArrayPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedArrayPointer</name>
            <anchorfile>qscopedarraypointer.html</anchorfile>
            <anchor>QScopedArrayPointer-1</anchor>
            <arglist>(D *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qscopedarraypointer.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qscopedarraypointer-obsolete.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QScopedArrayPointer&lt;T, Cleanup&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qscopedarraypointer.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScopedPointer</name>
        <filename>qscopedpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedPointer</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>QScopedPointer</anchor>
            <arglist>(T *p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>take</name>
            <anchorfile>qscopedpointer-obsolete.html</anchorfile>
            <anchor>take</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QScopedPointer&lt;T, Cleanup&gt; &amp;lhs, const QScopedPointer&lt;T, Cleanup&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QScopedPointer&lt;T, Cleanup&gt; &amp;lhs, std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(std::nullptr_t, const QScopedPointer&lt;T, Cleanup&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QScopedPointer&lt;T, Cleanup&gt; &amp;lhs, const QScopedPointer&lt;T, Cleanup&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QScopedPointer&lt;T, Cleanup&gt; &amp;lhs, std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(std::nullptr_t, const QScopedPointer&lt;T, Cleanup&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>(T *other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qscopedpointer-obsolete.html</anchorfile>
            <anchor>swap-1</anchor>
            <arglist>(QScopedPointer&lt;T, Cleanup&gt; &amp;lhs, QScopedPointer&lt;T, Cleanup&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qscopedpointer-obsolete.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QScopedPointer&lt;T, Cleanup&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScopedPointer</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>dtor.QScopedPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>get</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>get</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qscopedpointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScopedPropertyUpdateGroup</name>
        <filename>qscopedpropertyupdategroup.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedPropertyUpdateGroup</name>
            <anchorfile>qscopedpropertyupdategroup.html</anchorfile>
            <anchor>QScopedPropertyUpdateGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScopedPropertyUpdateGroup</name>
            <anchorfile>qscopedpropertyupdategroup.html</anchorfile>
            <anchor>dtor.QScopedPropertyUpdateGroup</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QScopedValueRollback</name>
        <filename>qscopedvaluerollback.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedValueRollback</name>
            <anchorfile>qscopedvaluerollback.html</anchorfile>
            <anchor>QScopedValueRollback</anchor>
            <arglist>(T &amp;var)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QScopedValueRollback</name>
            <anchorfile>qscopedvaluerollback.html</anchorfile>
            <anchor>QScopedValueRollback-1</anchor>
            <arglist>(T &amp;var, T value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>commit</name>
            <anchorfile>qscopedvaluerollback.html</anchorfile>
            <anchor>commit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QScopedValueRollback</name>
            <anchorfile>qscopedvaluerollback.html</anchorfile>
            <anchor>dtor.QScopedValueRollback</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSemaphore</name>
        <filename>qsemaphore.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSemaphore</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>QSemaphore</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryAcquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>tryAcquire</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryAcquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>tryAcquire-1</anchor>
            <arglist>(int n, QDeadlineTimer timer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryAcquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>tryAcquire-2</anchor>
            <arglist>(int n, int timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryAcquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>tryAcquire-3</anchor>
            <arglist>(int n, std::chrono::duration&lt;Rep, Period&gt; timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_acquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>try_acquire</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_acquire_for</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>try_acquire_for</anchor>
            <arglist>(const std::chrono::duration&lt;Rep, Period&gt; &amp;timeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>try_acquire_until</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>try_acquire_until</anchor>
            <arglist>(const std::chrono::time_point&lt;Clock, Duration&gt; &amp;tp)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>acquire</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>acquire</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSemaphore</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>dtor.QSemaphore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>available</name>
            <anchorfile>qsemaphore.html</anchorfile>
            <anchor>available</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSemaphoreReleaser</name>
        <filename>qsemaphorereleaser.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSemaphore *</type>
            <name>cancel</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>cancel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSemaphoreReleaser &amp;</type>
            <name>operator=</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QSemaphoreReleaser &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSemaphoreReleaser</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>QSemaphoreReleaser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSemaphoreReleaser</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>QSemaphoreReleaser-2</anchor>
            <arglist>(QSemaphore &amp;sem, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSemaphoreReleaser</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>QSemaphoreReleaser-3</anchor>
            <arglist>(QSemaphore *sem, int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSemaphoreReleaser</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>QSemaphoreReleaser-1</anchor>
            <arglist>(QSemaphoreReleaser &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSemaphoreReleaser &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSemaphoreReleaser</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>dtor.QSemaphoreReleaser</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSemaphore *</type>
            <name>semaphore</name>
            <anchorfile>qsemaphorereleaser.html</anchorfile>
            <anchor>semaphore</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSequentialAnimationGroup</name>
        <filename>qsequentialanimationgroup.html</filename>
        <base>QAnimationGroup</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPauseAnimation *</type>
            <name>addPause</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>addPause</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPauseAnimation *</type>
            <name>insertPause</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>insertPause</anchor>
            <arglist>(int index, int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSequentialAnimationGroup</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>QSequentialAnimationGroup</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>currentAnimationChanged</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>currentAnimationChanged</anchor>
            <arglist>(QAbstractAnimation *current)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int currentTime) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateDirection</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>updateDirection</anchor>
            <arglist>(QAbstractAnimation::Direction direction) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSequentialAnimationGroup</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>dtor.QSequentialAnimationGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractAnimation *</type>
            <name>currentAnimation</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>currentAnimation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QAbstractAnimation *&gt;</type>
            <name>bindableCurrentAnimation</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>currentAnimation-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>duration</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="property" type="QAbstractAnimation*">
            <name>currentAnimation</name>
            <anchorfile>qsequentialanimationgroup.html</anchorfile>
            <anchor>currentAnimation-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSequentialIterable</name>
        <filename>qsequentialiterable.html</filename>
        <base>QIterable</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addValue</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>addValue</anchor>
            <arglist>(const QVariant &amp;value, QSequentialIterable::Position position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeValue</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>removeValue</anchor>
            <arglist>(QSequentialIterable::Position position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>set</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>set</anchor>
            <arglist>(qsizetype idx, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>at</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype idx) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>BidirectionalConstIterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>BidirectionalConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>BidirectionalIterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>BidirectionalIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ForwardConstIterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>ForwardConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>ForwardIterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>ForwardIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>InputConstIterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>InputConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>InputIterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>InputIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>RandomAccessConstIterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>RandomAccessConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>RandomAccessIterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>RandomAccessIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qsequentialiterable.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSet</name>
        <filename>qset.html</filename>
        <class>QSet::const_iterator</class>
        <class>QSet::iterator</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDataStream &amp;out, const QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-gt-gt-21</anchor>
            <arglist>(QDataStream &amp;in, QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSet</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>QSet</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSet</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>QSet-2</anchor>
            <arglist>(InputIterator first, InputIterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSet</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>QSet-1</anchor>
            <arglist>(std::initializer_list&lt;T&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>intersect</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>intersect</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-and-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator&amp;=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-and-eq-1</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-2b-eq-1</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator--eq-1</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator|=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-7c-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>operator|=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-7c-eq-1</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>subtract</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>subtract</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt; &amp;</type>
            <name>unite</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>unite</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator&amp;</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-and</anchor>
            <arglist>(QSet&lt;T&gt; &amp;&amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator&amp;</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-and-1</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QSet&lt;T&gt; &amp;&amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator+</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator-</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(QSet&lt;T&gt; &amp;&amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator-</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator|</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(QSet&lt;T&gt; &amp;&amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;</type>
            <name>operator|</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-7c-1</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QSet&lt;T&gt;::const_iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator</type>
            <name>find</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>find-1</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(QSet&lt;T&gt;::const_iterator it, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;lhs, const QSet&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>erase_if-6</anchor>
            <arglist>(QSet&lt;T&gt; &amp;set, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>removeIf</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Pred pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSet&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;T&gt;</type>
            <name>values</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>values</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>constFind</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>constFind</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>find</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>find</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(const T &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>intersects</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>intersects</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capacity</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>key_type</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>key_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qset.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSet::const_iterator</name>
        <filename>qset-const-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSet&lt;T&gt;::const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::const_iterator</type>
            <name>operator++</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>const_iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>const_iterator-1</anchor>
            <arglist>(const QSet&lt;T&gt;::const_iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>const_iterator</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>const_iterator-3</anchor>
            <arglist>(const QSet&lt;T&gt;::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSet&lt;T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSet&lt;T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qset-const-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSet::iterator</name>
        <filename>qset-iterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator &amp;</type>
            <name>operator++</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator &amp;</type>
            <name>operator=</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSet&lt;T&gt;::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSet&lt;T&gt;::iterator</type>
            <name>operator++</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>iterator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>iterator</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>iterator-1</anchor>
            <arglist>(const QSet&lt;T&gt;::iterator &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QSet&lt;T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSet&lt;T&gt;::iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QSet&lt;T&gt;::const_iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSet&lt;T&gt;::iterator &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator_category</name>
            <anchorfile>qset-iterator.html</anchorfile>
            <anchor>iterator_category-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSetIterator</name>
        <filename>qsetiterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSetIterator</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>QSetIterator</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSetIterator&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QSet&lt;T&gt; &amp;set)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>findNext</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>findNext</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>next</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>next</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toBack</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>toBack</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toFront</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>toFront</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasNext</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>hasNext</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>peekNext</name>
            <anchorfile>qsetiterator.html</anchorfile>
            <anchor>peekNext</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSettings</name>
        <filename>qsettings.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Format</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NativeFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IniFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Registry32Format</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Registry64Format</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WebLocalStorageFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WebIndexedDBFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat1</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat2</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat3</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat4</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat5</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat6</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat7</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat8</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat9</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat10</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat11</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat12</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat13</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat14</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat15</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomFormat16</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Scope</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Scope-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UserScope</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Scope-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SystemScope</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Scope-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AccessError</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FormatError</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-5</anchor>
            <arglist>(QSettings::Format format, QSettings::Scope scope, const QString &amp;organization, const QString &amp;application, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-1</anchor>
            <arglist>(QSettings::Scope scope, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-4</anchor>
            <arglist>(QSettings::Scope scope, const QString &amp;organization, const QString &amp;application, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-2</anchor>
            <arglist>(const QString &amp;fileName, QSettings::Format format, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>QSettings-3</anchor>
            <arglist>(const QString &amp;organization, const QString &amp;application, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSettings::Format</type>
            <name>defaultFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>defaultFormat</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSettings::Format</type>
            <name>registerFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>registerFormat</anchor>
            <arglist>(const QString &amp;extension, QSettings::ReadFunc readFunc, QSettings::WriteFunc writeFunc, Qt::CaseSensitivity caseSensitivity)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>beginReadArray</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>beginReadArray</anchor>
            <arglist>(QAnyStringView prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginGroup</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>beginGroup</anchor>
            <arglist>(QAnyStringView prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginWriteArray</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>beginWriteArray</anchor>
            <arglist>(QAnyStringView prefix, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endArray</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>endArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endGroup</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>endGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(QAnyStringView key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setArrayIndex</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setArrayIndex</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAtomicSyncRequired</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setAtomicSyncRequired</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setDefaultFormat</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setDefaultFormat</anchor>
            <arglist>(QSettings::Format format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFallbacksEnabled</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setFallbacksEnabled</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(QSettings::Format format, QSettings::Scope scope, const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(QAnyStringView key, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sync</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>sync</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSettings</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>dtor.QSettings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSettings::Format</type>
            <name>format</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSettings::Scope</type>
            <name>scope</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>scope</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSettings::Status</type>
            <name>status</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>applicationName</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>applicationName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>group</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>group</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>organizationName</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>organizationName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allKeys</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>allKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>childGroups</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>childGroups</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>childKeys</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>childKeys</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(QAnyStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>value</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>(QAnyStringView key, const QVariant &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(QAnyStringView key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>fallbacksEnabled</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>fallbacksEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAtomicSyncRequired</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>isAtomicSyncRequired</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWritable</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>isWritable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ReadFunc</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>ReadFunc-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>SettingsMap</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>SettingsMap-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>WriteFunc</name>
            <anchorfile>qsettings.html</anchorfile>
            <anchor>WriteFunc-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSharedData</name>
        <filename>qshareddata.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedData</name>
            <anchorfile>qshareddata.html</anchorfile>
            <anchor>QSharedData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedData</name>
            <anchorfile>qshareddata.html</anchorfile>
            <anchor>QSharedData-1</anchor>
            <arglist>(const QSharedData &amp;)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSharedDataPointer</name>
        <filename>qshareddatapointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer-1</anchor>
            <arglist>(QSharedDataPointer&lt;T&gt; &amp;&amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer-2</anchor>
            <arglist>(T *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer-4</anchor>
            <arglist>(T *data, QAdoptSharedDataTag)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>QSharedDataPointer-3</anchor>
            <arglist>(const QSharedDataPointer&lt;T&gt; &amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QSharedDataPointer&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(T *o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedDataPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QSharedDataPointer&lt;T&gt; &amp;o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>T *</type>
            <name>clone</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>clone</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>get</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>get</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator T *</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-T--2a</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>take</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>take</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(T *const &amp;lhs, const QSharedDataPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QSharedDataPointer&lt;T&gt; &amp;lhs, const QSharedDataPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(T *const &amp;lhs, const QSharedDataPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QSharedDataPointer&lt;T&gt; &amp;lhs, const QSharedDataPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>detach</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>detach</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>(T *ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSharedDataPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSharedDataPointer</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>dtor.QSharedDataPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator*</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>data</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>get</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>get-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator const T *</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator-const-T--2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>operator--gt-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>Type</name>
            <anchorfile>qshareddatapointer.html</anchorfile>
            <anchor>Type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSharedMemory</name>
        <filename>qsharedmemory.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>AccessMode</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReadOnly</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadWrite</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SharedMemoryError</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PermissionDenied</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvalidSize</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeyError</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlreadyExists</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotFound</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LockError</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutOfResources</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>SharedMemoryError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedMemory</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>QSharedMemory-2</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedMemory</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>QSharedMemory-3</anchor>
            <arglist>(const QNativeIpcKey &amp;key, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedMemory</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>QSharedMemory</anchor>
            <arglist>(const QString &amp;key, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>attach</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>attach</anchor>
            <arglist>(QSharedMemory::AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>create</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(qsizetype size, QSharedMemory::AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>detach</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>detach</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>lock</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>unlock</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>data</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKey</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>setKey</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeKey</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>setNativeKey</anchor>
            <arglist>(const QNativeIpcKey &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeKey</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>setNativeKey-1</anchor>
            <arglist>(const QString &amp;key, QNativeIpcKey::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSharedMemory</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>dtor.QSharedMemory</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNativeIpcKey</type>
            <name>nativeIpcKey</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>nativeIpcKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedMemory::SharedMemoryError</type>
            <name>error</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>nativeKey</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>nativeKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAttached</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>isAttached</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>constData</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>data</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qsharedmemory.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSharedPointer</name>
        <filename>qsharedpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-lt-lt-45</anchor>
            <arglist>(QDebug debug, const QSharedPointer&lt;T&gt; &amp;ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-1</anchor>
            <arglist>(QSharedPointer&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-2</anchor>
            <arglist>(QSharedPointer&lt;X&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-3</anchor>
            <arglist>(X *ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-7</anchor>
            <arglist>(X *ptr, Deleter d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-4</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-5</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-6</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>QSharedPointer-8</anchor>
            <arglist>(std::nullptr_t, Deleter d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QSharedPointer&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QSharedPointer&lt;X&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>create</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>constCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>constCast-1</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>dynamicCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>dynamicCast-1</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>objectCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>objectCast-1</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerCast-1</anchor>
            <arglist>(QSharedPointer&lt;T&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerCast</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerCast-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerConstCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerConstCast-1</anchor>
            <arglist>(QSharedPointer&lt;T&gt; &amp;&amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerConstCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerConstCast</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerConstCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerConstCast-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerDynamicCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerDynamicCast-1</anchor>
            <arglist>(QSharedPointer&lt;T&gt; &amp;&amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerDynamicCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerDynamicCast</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerDynamicCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerDynamicCast-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerObjectCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerObjectCast-1</anchor>
            <arglist>(QSharedPointer&lt;T&gt; &amp;&amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerObjectCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerObjectCast</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>qSharedPointerObjectCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerObjectCast-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>staticCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>staticCast-1</anchor>
            <arglist>() &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;lhs, const QSharedPointer&lt;X&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;lhs, const X *rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-not-eq-3</anchor>
            <arglist>(const T *lhs, const QSharedPointer&lt;X&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-not-eq-4</anchor>
            <arglist>(std::nullptr_t, const QSharedPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;lhs, const QSharedPointer&lt;X&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;lhs, const X *rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-eq-3</anchor>
            <arglist>(const T *lhs, const QSharedPointer&lt;X&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-eq-eq-4</anchor>
            <arglist>(std::nullptr_t, const QSharedPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qHash-27</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::shared_ptr&lt;X&gt;</type>
            <name>qSharedPointerObjectCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerObjectCast-3</anchor>
            <arglist>(const std::shared_ptr&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::shared_ptr&lt;X&gt;</type>
            <name>qSharedPointerObjectCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qSharedPointerObjectCast-4</anchor>
            <arglist>(std::shared_ptr&lt;T&gt; &amp;&amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::shared_ptr&lt;X&gt;</type>
            <name>qobject_pointer_cast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qobject_pointer_cast</anchor>
            <arglist>(const std::shared_ptr&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::shared_ptr&lt;X&gt;</type>
            <name>qobject_pointer_cast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>qobject_pointer_cast-1</anchor>
            <arglist>(std::shared_ptr&lt;T&gt; &amp;&amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>reset-1</anchor>
            <arglist>(T *t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>reset-2</anchor>
            <arglist>(T *t, Deleter deleter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSharedPointer</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>dtor.QSharedPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>constCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>constCast</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>dynamicCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>dynamicCast</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>objectCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>objectCast</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;X&gt;</type>
            <name>staticCast</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>staticCast</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;T&gt;</type>
            <name>toWeakRef</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>toWeakRef</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator*</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>get</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>get</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>operator-&gt;</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>owner_before</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>owner_before</anchor>
            <arglist>(const QSharedPointer&lt;X&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>owner_before</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>owner_before-1</anchor>
            <arglist>(const QWeakPointer&lt;X&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>owner_equal</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>owner_equal</anchor>
            <arglist>(const QSharedPointer&lt;X&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>owner_equal</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>owner_equal-1</anchor>
            <arglist>(const QWeakPointer&lt;X&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>owner_hash</name>
            <anchorfile>qsharedpointer.html</anchorfile>
            <anchor>owner_hash</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSignalBlocker</name>
        <filename>qsignalblocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSignalBlocker &amp;</type>
            <name>operator=</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QSignalBlocker &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalBlocker</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>QSignalBlocker-3</anchor>
            <arglist>(QObject &amp;object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalBlocker</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>QSignalBlocker</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalBlocker</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>QSignalBlocker-1</anchor>
            <arglist>(QSignalBlocker &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dismiss</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>dismiss</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reblock</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>reblock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unblock</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>unblock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSignalBlocker</name>
            <anchorfile>qsignalblocker.html</anchorfile>
            <anchor>dtor.QSignalBlocker</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSignalMapper</name>
        <filename>qsignalmapper.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSignalMapper</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>QSignalMapper</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>map</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>map</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>map-1</anchor>
            <arglist>(QObject *sender)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mappedInt</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mappedInt</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mappedObject</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mappedObject</anchor>
            <arglist>(QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>mappedString</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mappedString</anchor>
            <arglist>(const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeMappings</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>removeMappings</anchor>
            <arglist>(QObject *sender)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>setMapping</anchor>
            <arglist>(QObject *sender, QObject *object)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>setMapping-1</anchor>
            <arglist>(QObject *sender, const QString &amp;text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>setMapping-2</anchor>
            <arglist>(QObject *sender, int id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSignalMapper</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>dtor.QSignalMapper</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>mapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapping-1</anchor>
            <arglist>(QObject *object) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>mapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapping-2</anchor>
            <arglist>(const QString &amp;id) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QObject *</type>
            <name>mapping</name>
            <anchorfile>qsignalmapper.html</anchorfile>
            <anchor>mapping</anchor>
            <arglist>(int id) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSize</name>
        <filename>qsize.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-lt-lt-23</anchor>
            <arglist>(QDataStream &amp;stream, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-gt-gt-22</anchor>
            <arglist>(QDataStream &amp;stream, QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize &amp;</type>
            <name>operator*=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize &amp;</type>
            <name>operator+=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize &amp;</type>
            <name>operator-=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize &amp;</type>
            <name>operator/=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>operator*</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QSize &amp;size, qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>operator*</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(qreal factor, const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>operator+</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QSize &amp;s1, const QSize &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>operator-</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QSize &amp;s1, const QSize &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>operator/</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QSize &amp;size, qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSize</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>QSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSize</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>QSize-1</anchor>
            <arglist>(int width, int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSize &amp;lhs, const QSize &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSize &amp;lhs, const QSize &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>rheight</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>rheight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int &amp;</type>
            <name>rwidth</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>rwidth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>scale-1</anchor>
            <arglist>(const QSize &amp;size, Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(int width, int height, Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(int height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>transpose</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>transpose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CGSize</type>
            <name>toCGSize</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>toCGSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>boundedTo</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>boundedTo</anchor>
            <arglist>(const QSize &amp;otherSize) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>expandedTo</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>expandedTo</anchor>
            <arglist>(const QSize &amp;otherSize) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>grownBy</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>grownBy</anchor>
            <arglist>(QMargins margins) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>scaled</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>scaled-1</anchor>
            <arglist>(const QSize &amp;s, Qt::AspectRatioMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>scaled</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>scaled</anchor>
            <arglist>(int width, int height, Qt::AspectRatioMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>shrunkBy</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>shrunkBy</anchor>
            <arglist>(QMargins margins) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>transposed</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>toSizeF</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>toSizeF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>height</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>width</name>
            <anchorfile>qsize.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSizeF</name>
        <filename>qsizef.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-lt-lt-24</anchor>
            <arglist>(QDataStream &amp;stream, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-gt-gt-23</anchor>
            <arglist>(QDataStream &amp;stream, QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF &amp;</type>
            <name>operator*=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2a-eq</anchor>
            <arglist>(qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF &amp;</type>
            <name>operator+=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF &amp;</type>
            <name>operator-=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF &amp;</type>
            <name>operator/=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2f-eq</anchor>
            <arglist>(qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSizeF</type>
            <name>fromCGSize</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>fromCGSize</anchor>
            <arglist>(CGSize size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>operator*</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>(const QSizeF &amp;size, qreal factor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>operator*</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2a-1</anchor>
            <arglist>(qreal factor, const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>operator+</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QSizeF &amp;s1, const QSizeF &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>operator-</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QSizeF &amp;s1, const QSizeF &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>operator/</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-2f</anchor>
            <arglist>(const QSizeF &amp;size, qreal divisor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizeF</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>QSizeF</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizeF</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>QSizeF-1</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSizeF</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>QSizeF-2</anchor>
            <arglist>(qreal width, qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSizeF &amp;lhs, const QSizeF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSizeF &amp;lhs, const QSizeF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>qFuzzyCompare</anchor>
            <arglist>(const QSizeF &amp;lhs, const QSizeF &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyIsNull</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>qFuzzyIsNull</anchor>
            <arglist>(const QSizeF &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal &amp;</type>
            <name>rheight</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>rheight</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal &amp;</type>
            <name>rwidth</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>rwidth</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>scale-1</anchor>
            <arglist>(const QSizeF &amp;size, Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>scale</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>scale</anchor>
            <arglist>(qreal width, qreal height, Qt::AspectRatioMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHeight</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>setHeight</anchor>
            <arglist>(qreal height)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWidth</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>setWidth</anchor>
            <arglist>(qreal width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>transpose</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>transpose</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CGSize</type>
            <name>toCGSize</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>toCGSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>toSize</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>toSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>boundedTo</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>boundedTo</anchor>
            <arglist>(const QSizeF &amp;otherSize) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>expandedTo</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>expandedTo</anchor>
            <arglist>(const QSizeF &amp;otherSize) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>grownBy</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>grownBy</anchor>
            <arglist>(QMarginsF margins) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>scaled</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>scaled-1</anchor>
            <arglist>(const QSizeF &amp;s, Qt::AspectRatioMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>scaled</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>scaled</anchor>
            <arglist>(qreal width, qreal height, Qt::AspectRatioMode mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>shrunkBy</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>shrunkBy</anchor>
            <arglist>(QMarginsF margins) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>transposed</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>transposed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>height</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>height</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>width</name>
            <anchorfile>qsizef.html</anchorfile>
            <anchor>width</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSocketNotifier</name>
        <filename>qsocketnotifier.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Read</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Write</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Exception</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSocketNotifier</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>QSocketNotifier</anchor>
            <arglist>(QSocketNotifier::Type type, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSocketNotifier</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>QSocketNotifier-1</anchor>
            <arglist>(qintptr socket, QSocketNotifier::Type type, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>activated-1</anchor>
            <arglist>(QSocketDescriptor socket, QSocketNotifier::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qsocketnotifier-obsolete.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(int socket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSocket</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>setSocket</anchor>
            <arglist>(qintptr socket)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSocketNotifier</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>dtor.QSocketNotifier</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSocketNotifier::Type</type>
            <name>type</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qintptr</type>
            <name>socket</name>
            <anchorfile>qsocketnotifier.html</anchorfile>
            <anchor>socket</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSortFilterProxyModel</name>
        <filename>qsortfilterproxymodel.html</filename>
        <base>QAbstractProxyModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QRegularExpression&gt;</type>
            <name>bindableFilterRegularExpression</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRegularExpression-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;Qt::CaseSensitivity&gt;</type>
            <name>bindableFilterCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterCaseSensitivity-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;Qt::CaseSensitivity&gt;</type>
            <name>bindableSortCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortCaseSensitivity-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;bool&gt;</type>
            <name>bindableAutoAcceptChildRows</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>autoAcceptChildRows-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;bool&gt;</type>
            <name>bindableDynamicSortFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dynamicSortFilter-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;bool&gt;</type>
            <name>bindableIsSortLocaleAware</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>isSortLocaleAware-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;bool&gt;</type>
            <name>bindableRecursiveFilteringEnabled</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>recursiveFilteringEnabled-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableFilterKeyColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterKeyColumn-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableFilterRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRole-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableSortRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSortFilterProxyModel</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>QSortFilterProxyModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>dropMimeData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dropMimeData</anchor>
            <arglist>(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>autoAcceptChildRowsChanged</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>autoAcceptChildRowsChanged</anchor>
            <arglist>(bool autoAcceptChildRows)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>beginFilterChange</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>beginFilterChange</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>fetchMore</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>fetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>filterCaseSensitivityChanged</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterCaseSensitivityChanged</anchor>
            <arglist>(Qt::CaseSensitivity filterCaseSensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>filterRoleChanged</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRoleChanged</anchor>
            <arglist>(int filterRole)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>invalidate</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>invalidate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>invalidateColumnsFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>invalidateColumnsFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>invalidateFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>invalidateFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>void</type>
            <name>invalidateRowsFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>invalidateRowsFilter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>recursiveFilteringEnabledChanged</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>recursiveFilteringEnabledChanged</anchor>
            <arglist>(bool recursiveFilteringEnabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoAcceptChildRows</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>autoAcceptChildRows-prop</anchor>
            <arglist>(bool accept)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDynamicSortFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dynamicSortFilter-prop</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterCaseSensitivity-prop</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterFixedString</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setFilterFixedString</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterKeyColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterKeyColumn-prop</anchor>
            <arglist>(int column)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterRegularExpression</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRegularExpression-prop</anchor>
            <arglist>(const QRegularExpression &amp;regularExpression)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterRegularExpression</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setFilterRegularExpression</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRole-prop</anchor>
            <arglist>(int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFilterWildcard</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setFilterWildcard</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRecursiveFilteringEnabled</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>recursiveFilteringEnabled-prop</anchor>
            <arglist>(bool recursive)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortCaseSensitivity-prop</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortLocaleAware</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>isSortLocaleAware-prop</anchor>
            <arglist>(bool on)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSortRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>(int role)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSourceModel</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>setSourceModel</anchor>
            <arglist>(QAbstractItemModel *sourceModel) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortCaseSensitivityChanged</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortCaseSensitivityChanged</anchor>
            <arglist>(Qt::CaseSensitivity sortCaseSensitivity)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortLocaleAwareChanged</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortLocaleAwareChanged</anchor>
            <arglist>(bool sortLocaleAware)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sortRoleChanged</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortRoleChanged</anchor>
            <arglist>(int sortRole)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QSortFilterProxyModel</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dtor.QSortFilterProxyModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionFromSource</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mapSelectionFromSource</anchor>
            <arglist>(const QItemSelection &amp;sourceSelection) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QItemSelection</type>
            <name>mapSelectionToSource</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mapSelectionToSource</anchor>
            <arglist>(const QItemSelection &amp;proxySelection) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMimeData *</type>
            <name>mimeData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mimeData</anchor>
            <arglist>(const QModelIndexList &amp;indexes) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>buddy</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>buddy</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapFromSource</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mapFromSource</anchor>
            <arglist>(const QModelIndex &amp;sourceIndex) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapToSource</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mapToSource</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;child) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndexList</type>
            <name>match</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>match</anchor>
            <arglist>(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>filterRegularExpression</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRegularExpression-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>span</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QStringList</type>
            <name>mimeTypes</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>mimeTypes</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>filterCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterCaseSensitivity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>sortCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortCaseSensitivity-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::SortOrder</type>
            <name>sortOrder</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortOrder</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoAcceptChildRows</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>autoAcceptChildRows-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>canFetchMore</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>canFetchMore</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>dynamicSortFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dynamicSortFilter-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>filterAcceptsColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterAcceptsColumn</anchor>
            <arglist>(int source_column, const QModelIndex &amp;source_parent) const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>filterAcceptsRow</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterAcceptsRow</anchor>
            <arglist>(int source_row, const QModelIndex &amp;source_parent) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>hasChildren</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>hasChildren</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRecursiveFilteringEnabled</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>recursiveFilteringEnabled-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSortLocaleAware</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>isSortLocaleAware-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>lessThan</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>lessThan</anchor>
            <arglist>(const QModelIndex &amp;source_left, const QModelIndex &amp;source_right) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>filterKeyColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterKeyColumn-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>filterRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRole-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sortColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortColumn</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sortRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoAcceptChildRows</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>autoAcceptChildRows-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>dynamicSortFilter</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>dynamicSortFilter-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::CaseSensitivity">
            <name>filterCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterCaseSensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>filterKeyColumn</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterKeyColumn-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QRegularExpression">
            <name>filterRegularExpression</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRegularExpression-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>filterRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>filterRole-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>isSortLocaleAware</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>isSortLocaleAware-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>recursiveFilteringEnabled</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>recursiveFilteringEnabled-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::CaseSensitivity">
            <name>sortCaseSensitivity</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortCaseSensitivity-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>sortRole</name>
            <anchorfile>qsortfilterproxymodel.html</anchorfile>
            <anchor>sortRole-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSpan</name>
        <filename>qspan.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-10</anchor>
            <arglist>(It first, It last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-11</anchor>
            <arglist>(It first, qsizetype count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-1</anchor>
            <arglist>(QSpan&lt;S, N&gt; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-2</anchor>
            <arglist>(QSpan&lt;T, E&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-3</anchor>
            <arglist>(Range &amp;&amp;r)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-4</anchor>
            <arglist>(const QSpan&lt;T, E&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-5</anchor>
            <arglist>(const std::array&lt;S, N&gt; &amp;arr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-6</anchor>
            <arglist>(q20::type_identity_t&lt;T&gt; (&amp;)[N] arr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-7</anchor>
            <arglist>(std::array&lt;S, N&gt; &amp;arr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-8</anchor>
            <arglist>(std::initializer_list&lt;QSpan&lt;T, E&gt;::value_type&gt; il)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>QSpan-9</anchor>
            <arglist>(std::span&lt;S, N&gt; other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QSpan&lt;T, E&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QSpan&lt;T, E&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;const std::byte, E == q20::dynamic_extent ? q20::dynamic_extent : E * sizeof(T)&gt;</type>
            <name>as_bytes</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>as_bytes</anchor>
            <arglist>(T)&gt; as_bytes(QSpan&lt;T, E&gt; s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;std::byte, E == q20::dynamic_extent ? q20::dynamic_extent : E * sizeof(T)&gt;</type>
            <name>as_writable_bytes</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>as_writable_bytes</anchor>
            <arglist>(T)&gt; as_writable_bytes(QSpan&lt;T, E&gt; s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slice</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>slice</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>slice</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>slice-1</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type pos, QSpan&lt;T, E&gt;::size_type n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSpan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>dtor.QSpan</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, Count&gt;</type>
            <name>first</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>first</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, Count&gt;</type>
            <name>last</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>last</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::pointer</type>
            <name>data</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::reference</type>
            <name>back</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>back</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::reference</type>
            <name>front</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>front</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::reference</type>
            <name>operator[]</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type idx) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::size_type</type>
            <name>size</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T, E&gt;::size_type</type>
            <name>size_bytes</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>size_bytes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T&gt;</type>
            <name>chopped</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>chopped</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T&gt;</type>
            <name>first</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T&gt;</type>
            <name>last</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T&gt;</type>
            <name>sliced</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T&gt;</type>
            <name>sliced</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type pos, QSpan&lt;T, E&gt;::size_type n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T&gt;</type>
            <name>subspan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>subspan-2</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSpan&lt;T&gt;</type>
            <name>subspan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>subspan-3</anchor>
            <arglist>(QSpan&lt;T, E&gt;::size_type pos, QSpan&lt;T, E&gt;::size_type n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>subspan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>subspan-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>subspan</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>subspan</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>element_type</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>element_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qspan.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStack</name>
        <filename>qstack.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>top</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>top</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>pop</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>pop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>push</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QStack&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>top</name>
            <anchorfile>qstack.html</anchorfile>
            <anchor>top-1</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStandardPaths</name>
        <filename>qstandardpaths.html</filename>
        <member kind="enumeration">
            <name>LocateOption</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>LocateOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LocateFile</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>LocateOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LocateDirectory</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>LocateOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>StandardLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DesktopLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DocumentsLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontsLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationsLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MusicLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoviesLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PicturesLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TempLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HomeLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AppLocalDataLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CacheLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GenericDataLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RuntimeLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConfigLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DownloadLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GenericCacheLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GenericConfigLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AppDataLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AppConfigLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PublicShareLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TemplatesLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StateLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GenericStateLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>StandardLocation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>displayName</anchor>
            <arglist>(QStandardPaths::StandardLocation type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>findExecutable</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>findExecutable</anchor>
            <arglist>(const QString &amp;executableName, const QStringList &amp;paths)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>locate</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>locate</anchor>
            <arglist>(QStandardPaths::StandardLocation type, const QString &amp;fileName, QStandardPaths::LocateOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>writableLocation</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>writableLocation</anchor>
            <arglist>(QStandardPaths::StandardLocation type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>locateAll</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>locateAll</anchor>
            <arglist>(QStandardPaths::StandardLocation type, const QString &amp;fileName, QStandardPaths::LocateOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>standardLocations</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>standardLocations</anchor>
            <arglist>(QStandardPaths::StandardLocation type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setTestModeEnabled</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>setTestModeEnabled</anchor>
            <arglist>(bool testMode)</arglist>
        </member>
        <member kind="typedef" type="QStandardPaths::LocateOption">
            <name>LocateOptions</name>
            <anchorfile>qstandardpaths.html</anchorfile>
            <anchor>LocateOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStaticByteArrayMatcher</name>
        <filename>qstaticbytearraymatcher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStaticByteArrayMatcher&lt;N&gt;</type>
            <name>qMakeStaticByteArrayMatcher</name>
            <anchorfile>qstaticbytearraymatcher.html</anchorfile>
            <anchor>qMakeStaticByteArrayMatcher</anchor>
            <arglist>(const char (&amp;)[N] pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>pattern</name>
            <anchorfile>qstaticbytearraymatcher.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qstaticbytearraymatcher.html</anchorfile>
            <anchor>indexIn</anchor>
            <arglist>(const QByteArray &amp;haystack, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qstaticbytearraymatcher.html</anchorfile>
            <anchor>indexIn-1</anchor>
            <arglist>(const char *haystack, qsizetype hlen, qsizetype from) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStaticLatin1StringMatcher</name>
        <filename>qstaticlatin1stringmatcher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>qMakeStaticCaseInsensitiveLatin1StringMatcher</name>
            <anchorfile>qstaticlatin1stringmatcher.html</anchorfile>
            <anchor>qMakeStaticCaseInsensitiveLatin1StringMatcher</anchor>
            <arglist>(const char (&amp;)[N] patternToMatch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>auto</type>
            <name>qMakeStaticCaseSensitiveLatin1StringMatcher</name>
            <anchorfile>qstaticlatin1stringmatcher.html</anchorfile>
            <anchor>qMakeStaticCaseSensitiveLatin1StringMatcher</anchor>
            <arglist>(const char (&amp;)[N] patternToMatch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qstaticlatin1stringmatcher.html</anchorfile>
            <anchor>indexIn</anchor>
            <arglist>(QLatin1StringView haystack, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qstaticlatin1stringmatcher.html</anchorfile>
            <anchor>indexIn-1</anchor>
            <arglist>(QStringView haystack, qsizetype from) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStaticPlugin</name>
        <filename>qstaticplugin.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>metaData</name>
            <anchorfile>qstaticplugin.html</anchorfile>
            <anchor>metaData</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStorageInfo</name>
        <filename>qstorageinfo.html</filename>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QStorageInfo&gt;</type>
            <name>mountedVolumes</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>mountedVolumes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStorageInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QStorageInfo &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStorageInfo &amp;</type>
            <name>operator=</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QStorageInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStorageInfo</type>
            <name>root</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>root</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>QStorageInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>QStorageInfo-1</anchor>
            <arglist>(const QDir &amp;dir)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>QStorageInfo-2</anchor>
            <arglist>(const QStorageInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>QStorageInfo-3</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QStorageInfo &amp;lhs, const QStorageInfo &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QStorageInfo &amp;lhs, const QStorageInfo &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>refresh</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>refresh</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QStorageInfo &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStorageInfo</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>dtor.QStorageInfo</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>device</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>fileSystemType</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>fileSystemType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>subvolume</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>subvolume</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>displayName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>name</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>rootPath</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>rootPath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>isReadOnly</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReady</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>isReady</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRoot</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>isRoot</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>blockSize</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>blockSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bytesAvailable</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>bytesAvailable</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bytesFree</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>bytesFree</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>bytesTotal</name>
            <anchorfile>qstorageinfo.html</anchorfile>
            <anchor>bytesTotal</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QString</name>
        <filename>qstring.html</filename>
        <member kind="enumeration">
            <name>NormalizationForm</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>NormalizationForm-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NormalizationForm_D</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NormalizationForm_C</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NormalizationForm_KD</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NormalizationForm_KC</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>NormalizationForm-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SectionFlag</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>SectionFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SectionDefault</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SectionSkipEmpty</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SectionIncludeLeadingSep</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SectionIncludeTrailingSep</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SectionCaseInsensitiveSeps</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar &amp;</type>
            <name>back</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar &amp;</type>
            <name>front</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar &amp;</type>
            <name>operator[]</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar *</type>
            <name>data</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-lt-25</anchor>
            <arglist>(QDataStream &amp;stream, const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-gt-24</anchor>
            <arglist>(QDataStream &amp;stream, QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-1</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(QLatin1StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-3</anchor>
            <arglist>(QStringView v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-4</anchor>
            <arglist>(QUtf8StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-5</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-7</anchor>
            <arglist>(const QChar *str, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>append</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>append-6</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>assign</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>assign-1</anchor>
            <arglist>(InputIterator first, InputIterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>assign</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>assign</anchor>
            <arglist>(QAnyStringView v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>assign</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>assign-2</anchor>
            <arglist>(qsizetype n, QChar c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>fill</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fill</anchor>
            <arglist>(QChar ch, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(qsizetype position, QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(qsizetype position, QLatin1StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(qsizetype position, QStringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(qsizetype position, QUtf8StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-5</anchor>
            <arglist>(qsizetype position, const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-7</anchor>
            <arglist>(qsizetype position, const QChar *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(qsizetype position, const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>insert</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>insert-6</anchor>
            <arglist>(qsizetype position, const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-1</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-2</anchor>
            <arglist>(QLatin1StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-3</anchor>
            <arglist>(QStringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-4</anchor>
            <arglist>(QUtf8StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-5</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator+=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-eq-6</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-3</anchor>
            <arglist>(QLatin1StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QString &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-4</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>operator=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-5</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-1</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-2</anchor>
            <arglist>(QLatin1StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-3</anchor>
            <arglist>(QStringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-4</anchor>
            <arglist>(QUtf8StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-5</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-7</anchor>
            <arglist>(const QChar *str, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>prepend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>prepend-6</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove-4</anchor>
            <arglist>(QLatin1StringView str, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove-2</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>remove</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>remove-3</anchor>
            <arglist>(qsizetype position, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>removeAt</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>removeAt</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>removeFirst</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>removeFirst</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>removeIf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>removeLast</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-2</anchor>
            <arglist>(QChar before, QChar after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-3</anchor>
            <arglist>(QChar c, QLatin1StringView after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-4</anchor>
            <arglist>(QChar ch, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-5</anchor>
            <arglist>(QLatin1StringView before, QLatin1StringView after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-6</anchor>
            <arglist>(QLatin1StringView before, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-11</anchor>
            <arglist>(const QChar *before, qsizetype blen, const QChar *after, qsizetype alen, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-1</anchor>
            <arglist>(const QRegularExpression &amp;re, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-7</anchor>
            <arglist>(const QString &amp;before, QLatin1StringView after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-8</anchor>
            <arglist>(const QString &amp;before, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-9</anchor>
            <arglist>(qsizetype position, qsizetype n, QChar after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace-10</anchor>
            <arglist>(qsizetype position, qsizetype n, const QChar *after, qsizetype alen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>replace</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(qsizetype position, qsizetype n, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-8</anchor>
            <arglist>(double n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-9</anchor>
            <arglist>(float n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum</anchor>
            <arglist>(int n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-1</anchor>
            <arglist>(long n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-2</anchor>
            <arglist>(qlonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-3</anchor>
            <arglist>(qulonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-4</anchor>
            <arglist>(short n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-5</anchor>
            <arglist>(uint n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-6</anchor>
            <arglist>(ulong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setNum</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setNum-7</anchor>
            <arglist>(ushort n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setRawData</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setRawData</anchor>
            <arglist>(const QChar *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setUnicode</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setUnicode</anchor>
            <arglist>(const QChar *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setUnicode</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setUnicode-1</anchor>
            <arglist>(const char16_t *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setUtf16</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>setUtf16</anchor>
            <arglist>(const char16_t *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>setUtf16</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>setUtf16-1</anchor>
            <arglist>(const ushort *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>slice</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>slice-1</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString &amp;</type>
            <name>slice</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>slice</anchor>
            <arglist>(qsizetype pos, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>asprintf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>asprintf</anchor>
            <arglist>(const char *cformat, ...)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>chopped</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>chopped</anchor>
            <arglist>(qsizetype len) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>first</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>first</anchor>
            <arglist>(qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromCFString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromCFString</anchor>
            <arglist>(CFStringRef string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromEcmaString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromEcmaString</anchor>
            <arglist>(emscripten::val jsString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLatin1</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLatin1-1</anchor>
            <arglist>(QByteArrayView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLatin1</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLatin1-2</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLatin1</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLatin1</anchor>
            <arglist>(const char *str, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLocal8Bit</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLocal8Bit-1</anchor>
            <arglist>(QByteArrayView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLocal8Bit</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLocal8Bit-2</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromLocal8Bit</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromLocal8Bit</anchor>
            <arglist>(const char *str, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromNSString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromNSString</anchor>
            <arglist>(const NSString *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromRawData</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromRawData</anchor>
            <arglist>(const QChar *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromStdString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromStdString</anchor>
            <arglist>(const std::string &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromStdU16String</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromStdU16String</anchor>
            <arglist>(const std::u16string &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromStdU32String</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromStdU32String</anchor>
            <arglist>(const std::u32string &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromStdWString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromStdWString</anchor>
            <arglist>(const std::wstring &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUcs4</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUcs4</anchor>
            <arglist>(const char32_t *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUcs4</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>fromUcs4-1</anchor>
            <arglist>(const uint *str, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf16</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf16</anchor>
            <arglist>(const char16_t *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf16</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>fromUtf16-1</anchor>
            <arglist>(const ushort *str, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf8-1</anchor>
            <arglist>(QByteArrayView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf8-2</anchor>
            <arglist>(const QByteArray &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf8</anchor>
            <arglist>(const char *str, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf8-3</anchor>
            <arglist>(const char8_t *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromUtf8-4</anchor>
            <arglist>(const char8_t *str, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromWCharArray</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>fromWCharArray</anchor>
            <arglist>(const wchar_t *string, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>last</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>last</anchor>
            <arglist>(qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>left</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>mid</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(qsizetype position, qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-1</anchor>
            <arglist>(double n, char format, int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-2</anchor>
            <arglist>(int n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number</anchor>
            <arglist>(long n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-3</anchor>
            <arglist>(qlonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-4</anchor>
            <arglist>(qulonglong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-5</anchor>
            <arglist>(uint n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>number</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>number-6</anchor>
            <arglist>(ulong n, int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator&quot;&quot;_qs</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>operator-22-22_qs</anchor>
            <arglist>(const char16_t *str, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator&quot;&quot;_s</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-22-22_s</anchor>
            <arglist>(const char16_t *str, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator+</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(QString &amp;&amp;s1, const QString &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator+</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(QStringView lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator+</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-2</anchor>
            <arglist>(const QString &amp;lhs, QStringView rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator+</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-3</anchor>
            <arglist>(const QString &amp;s1, const QString &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator+</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-4</anchor>
            <arglist>(const QString &amp;s1, const char *s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator+</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-2b-5</anchor>
            <arglist>(const char *s1, const QString &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>right</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sliced</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>sliced-2</anchor>
            <arglist>(qsizetype pos) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sliced</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(qsizetype pos, qsizetype n) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>vasprintf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>vasprintf</anchor>
            <arglist>(const char *cformat, va_list ap)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-1</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-2</anchor>
            <arglist>(QLatin1StringView str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-3</anchor>
            <arglist>(QString &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-4</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-8</anchor>
            <arglist>(const QChar *unicode, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-5</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-6</anchor>
            <arglist>(const char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-7</anchor>
            <arglist>(const char8_t *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QString-9</anchor>
            <arglist>(qsizetype size, QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::iterator</type>
            <name>begin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::iterator</type>
            <name>end</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::iterator</type>
            <name>erase</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QString::const_iterator first, QString::const_iterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::iterator</type>
            <name>erase</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>erase-2</anchor>
            <arglist>(QString::const_iterator it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringLiteral</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QStringLiteral</anchor>
            <arglist>(str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_NO_CAST_FROM_ASCII</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QT_NO_CAST_FROM_ASCII</anchor>
            <arglist>QT_NO_CAST_FROM_ASCII</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_NO_CAST_TO_ASCII</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QT_NO_CAST_TO_ASCII</anchor>
            <arglist>QT_NO_CAST_TO_ASCII</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_RESTRICTED_CAST_FROM_ASCII</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>QT_RESTRICTED_CAST_FROM_ASCII</anchor>
            <arglist>QT_RESTRICTED_CAST_FROM_ASCII</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QByteArray &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq-16</anchor>
            <arglist>(const QString &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq-17</anchor>
            <arglist>(const QString &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QString &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq-18</anchor>
            <arglist>(const QString &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const char *const &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QByteArray &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-14</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-15</anchor>
            <arglist>(const QString &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-16</anchor>
            <arglist>(const QString &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-17</anchor>
            <arglist>(const QString &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-18</anchor>
            <arglist>(const QString &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-1</anchor>
            <arglist>(const char *const &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QByteArray &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq-15</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq-16</anchor>
            <arglist>(const QString &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq-17</anchor>
            <arglist>(const QString &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq-1</anchor>
            <arglist>(const QString &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq-18</anchor>
            <arglist>(const QString &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-lt-eq-2</anchor>
            <arglist>(const char *const &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QByteArray &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq-13</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq-14</anchor>
            <arglist>(const QString &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq-15</anchor>
            <arglist>(const QString &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq-16</anchor>
            <arglist>(const QString &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq-17</anchor>
            <arglist>(const QString &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-eq-eq-18</anchor>
            <arglist>(const char *const &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QByteArray &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-15</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-16</anchor>
            <arglist>(const QString &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-17</anchor>
            <arglist>(const QString &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-1</anchor>
            <arglist>(const QString &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-18</anchor>
            <arglist>(const QString &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-2</anchor>
            <arglist>(const char *const &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QByteArray &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq-15</anchor>
            <arglist>(const QLatin1StringView &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq-16</anchor>
            <arglist>(const QString &amp;lhs, const QByteArray &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq-17</anchor>
            <arglist>(const QString &amp;lhs, const QLatin1StringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq-1</anchor>
            <arglist>(const QString &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq-18</anchor>
            <arglist>(const QString &amp;lhs, const char *const &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-gt-eq-2</anchor>
            <arglist>(const char *const &amp;lhs, const QString &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>qPrintable</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>qPrintable</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>qUtf8Printable</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>qUtf8Printable</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const wchar_t *</type>
            <name>qUtf16Printable</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>qUtf16Printable</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>decltype(qTokenize(std::move(*this), std::forward&lt;Needle&gt;(needle), flags...))</type>
            <name>tokenize</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>tokenize</anchor>
            <arglist>(qTokenize(std::move(*this), std::forward&lt;Needle&gt;(needle), flags...)) tokenize(Needle &amp;&amp;sep, Flags... flags) &amp;&amp;</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-5</anchor>
            <arglist>(QLatin1StringView s1, const QString &amp;s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-6</anchor>
            <arglist>(QStringView s1, const QString &amp;s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-7</anchor>
            <arglist>(const QString &amp;s1, QLatin1StringView s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-8</anchor>
            <arglist>(const QString &amp;s1, QStringView s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QString &amp;s1, const QString &amp;s2, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>localeAwareCompare-3</anchor>
            <arglist>(QStringView s1, QStringView s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>localeAwareCompare</anchor>
            <arglist>(const QString &amp;s1, const QString &amp;s2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>erase-3</anchor>
            <arglist>(QString &amp;s, const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>erase_if-1</anchor>
            <arglist>(QString &amp;s, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qsizetype</type>
            <name>maxSize</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>maxSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>push_back-1</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>push_front-1</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_front</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>push_front</anchor>
            <arglist>(const QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>resize-1</anchor>
            <arglist>(qsizetype newSize, QChar fillChar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resizeForOverwrite</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>resizeForOverwrite</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shrink_to_fit</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>shrink_to_fit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QString &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(qsizetype position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>dtor.QString</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFStringRef</type>
            <name>toCFString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toCFString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSString *</type>
            <name>toNSString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toNSString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLatin1</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLatin1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLocal8Bit</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLocal8Bit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toUtf8</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUtf8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>back</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>back-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>front</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>front-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;uint&gt;</type>
            <name>toUcs4</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUcs4</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg</anchor>
            <arglist>(Args &amp;&amp;... args) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-3</anchor>
            <arglist>(T a, int fieldWidth, char format, int precision, QChar fillChar) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-2</anchor>
            <arglist>(T a, int fieldWidth, int base, QChar fillChar) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>arg-1</anchor>
            <arglist>(const T &amp;a, int fieldWidth, QChar fillChar) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>chopped</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>chopped-1</anchor>
            <arglist>(qsizetype len) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>first</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>(qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>last</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>(qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>left</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>left-1</anchor>
            <arglist>(qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>leftJustified</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>leftJustified</anchor>
            <arglist>(qsizetype width, QChar fill, bool truncate) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>mid</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>mid-1</anchor>
            <arglist>(qsizetype position, qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>normalized</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>(QString::NormalizationForm mode, QChar::UnicodeVersion version) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>repeated</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>repeated</anchor>
            <arglist>(qsizetype times) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>right</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>right-1</anchor>
            <arglist>(qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>rightJustified</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>rightJustified</anchor>
            <arglist>(qsizetype width, QChar fill, bool truncate) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>section</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>section</anchor>
            <arglist>(QChar sep, qsizetype start, qsizetype end, QString::SectionFlags flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>section</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>section-1</anchor>
            <arglist>(const QRegularExpression &amp;re, qsizetype start, qsizetype end, QString::SectionFlags flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>section</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>section-2</anchor>
            <arglist>(const QString &amp;sep, qsizetype start, qsizetype end, QString::SectionFlags flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>simplified</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>simplified</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sliced</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>sliced-3</anchor>
            <arglist>(qsizetype pos) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>sliced</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(qsizetype pos, qsizetype n) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toCaseFolded</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toCaseFolded</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toHtmlEscaped</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toHtmlEscaped</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toLower</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLower</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toUpper</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUpper</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>trimmed</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>trimmed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_iterator</type>
            <name>begin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_iterator</type>
            <name>cend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_iterator</type>
            <name>end</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>rbegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>rend-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>split</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>split-2</anchor>
            <arglist>(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>split</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>split-1</anchor>
            <arglist>(const QRegularExpression &amp;re, Qt::SplitBehavior behavior) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>split</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>split</anchor>
            <arglist>(const QString &amp;sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(QLatin1StringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-4</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QRegularExpression &amp;re, QRegularExpressionMatch *rmatch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>endsWith-1</anchor>
            <arglist>(QChar c, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>endsWith-2</anchor>
            <arglist>(QLatin1StringView s, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>endsWith-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(const QString &amp;s, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLower</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isLower</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRightToLeft</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isRightToLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUpper</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isUpper</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValidUtf16</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>isValidUtf16</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>startsWith-1</anchor>
            <arglist>(QChar c, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>startsWith-2</anchor>
            <arglist>(QLatin1StringView s, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>startsWith-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(const QString &amp;s, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>constData</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>data</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar *</type>
            <name>unicode</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>unicode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar</type>
            <name>at</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QChar</type>
            <name>operator[]</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype position) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const ushort *</type>
            <name>utf16</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>utf16</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>decltype(qTokenize(*this, std::forward&lt;Needle&gt;(needle), flags...))</type>
            <name>tokenize</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>tokenize-2</anchor>
            <arglist>(qTokenize(*this, std::forward&lt;Needle&gt;(needle), flags...)) tokenize(Needle &amp;&amp;sep, Flags... flags) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>decltype(qTokenize(std::move(*this), std::forward&lt;Needle&gt;(needle), flags...))</type>
            <name>tokenize</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>tokenize-1</anchor>
            <arglist>(qTokenize(std::move(*this), std::forward&lt;Needle&gt;(needle), flags...)) tokenize(Needle &amp;&amp;sep, Flags... flags) const &amp;&amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>emscripten::val</type>
            <name>toEcmaString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toEcmaString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-2</anchor>
            <arglist>(QLatin1StringView other, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-3</anchor>
            <arglist>(QStringView s, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>compare-4</anchor>
            <arglist>(const QString &amp;other, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>localeAwareCompare-1</anchor>
            <arglist>(QStringView other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>localeAwareCompare-2</anchor>
            <arglist>(const QString &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capacity</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count-3</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count-4</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>(const QRegularExpression &amp;re) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-3</anchor>
            <arglist>(QChar ch, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QLatin1StringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-4</anchor>
            <arglist>(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-1</anchor>
            <arglist>(const QRegularExpression &amp;re, qsizetype from, QRegularExpressionMatch *rmatch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>indexOf-2</anchor>
            <arglist>(const QString &amp;str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-7</anchor>
            <arglist>(QChar ch, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-3</anchor>
            <arglist>(QLatin1StringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-8</anchor>
            <arglist>(QLatin1StringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-4</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-9</anchor>
            <arglist>(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-5</anchor>
            <arglist>(const QRegularExpression &amp;re, QRegularExpressionMatch *rmatch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const QRegularExpression &amp;re, qsizetype from, QRegularExpressionMatch *rmatch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-6</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>lastIndexOf-1</anchor>
            <arglist>(const QString &amp;str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>toWCharArray</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toWCharArray</anchor>
            <arglist>(wchar_t *array) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::string</type>
            <name>toStdString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toStdString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::u16string</type>
            <name>toStdU16String</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toStdU16String</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::u16string_view</type>
            <name>operator std::u16string_view</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-std-3a-3au16string_view</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::u32string</type>
            <name>toStdU32String</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toStdU32String</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::wstring</type>
            <name>toStdWString</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toStdWString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>ConstIterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>ConstIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>Iterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>Iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QString::SectionFlag">
            <name>SectionFlags</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>SectionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringConverter</name>
        <filename>qstringconverter.html</filename>
        <member kind="enumeration">
            <name>Encoding</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Utf8</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Utf16</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Utf16LE</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Utf16BE</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Utf32</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Utf32LE</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Utf32BE</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Latin1</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>System</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastEncoding</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Encoding-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Flag</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Flag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Default</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Stateless</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConvertInvalidToNull</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteBom</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConvertInitialBom</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UsesIcu</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>availableCodecs</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>availableCodecs</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const char *</type>
            <name>nameForEncoding</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>nameForEncoding</anchor>
            <arglist>(QStringConverter::Encoding e)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::optional&lt;QStringConverter::Encoding&gt;</type>
            <name>encodingForData</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>encodingForData</anchor>
            <arglist>(QByteArrayView data, char16_t expectedFirstCharacter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::optional&lt;QStringConverter::Encoding&gt;</type>
            <name>encodingForHtml</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>encodingForHtml</anchor>
            <arglist>(QByteArrayView data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>std::optional&lt;QStringConverter::Encoding&gt;</type>
            <name>encodingForName</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>encodingForName</anchor>
            <arglist>(QAnyStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetState</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>resetState</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasError</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>hasError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>name</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QStringConverter::Flag">
            <name>Flags</name>
            <anchorfile>qstringconverter.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringDecoder</name>
        <filename>qstringdecoder.html</filename>
        <base>QStringConverter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar *</type>
            <name>appendToBuffer</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>appendToBuffer</anchor>
            <arglist>(QChar *out, QByteArrayView in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringDecoder</type>
            <name>decoderForHtml</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>decoderForHtml</anchor>
            <arglist>(QByteArrayView data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringDecoder</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>QStringDecoder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringDecoder</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>QStringDecoder-1</anchor>
            <arglist>(QAnyStringView name, QStringConverter::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringDecoder</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>QStringDecoder-2</anchor>
            <arglist>(QStringConverter::Encoding encoding, QStringConverter::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringDecoder::EncodedData&lt;QByteArrayView&gt;</type>
            <name>decode</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>decode</anchor>
            <arglist>(QByteArrayView ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringDecoder::EncodedData&lt;QByteArrayView&gt;</type>
            <name>operator()</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()(QByteArrayView ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringDecoder::EncodedData&lt;const QByteArray &amp;&gt;</type>
            <name>decode</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>decode-1</anchor>
            <arglist>(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringDecoder::EncodedData&lt;const QByteArray &amp;&gt;</type>
            <name>operator()</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>operator-28-29-1</anchor>
            <arglist>()(const QByteArray &amp;ba)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char16_t *</type>
            <name>appendToBuffer</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>appendToBuffer-1</anchor>
            <arglist>(char16_t *out, QByteArrayView in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>requiredSpace</name>
            <anchorfile>qstringdecoder.html</anchorfile>
            <anchor>requiredSpace</anchor>
            <arglist>(qsizetype inputLength) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringEncoder</name>
        <filename>qstringencoder.html</filename>
        <base>QStringConverter</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringEncoder</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>QStringEncoder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringEncoder</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>QStringEncoder-1</anchor>
            <arglist>(QAnyStringView name, QStringConverter::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringEncoder</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>QStringEncoder-2</anchor>
            <arglist>(QStringConverter::Encoding encoding, QStringConverter::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringEncoder::DecodedData&lt;QStringView&gt;</type>
            <name>encode</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>encode</anchor>
            <arglist>(QStringView in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringEncoder::DecodedData&lt;QStringView&gt;</type>
            <name>operator()</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>operator-28-29</anchor>
            <arglist>()(QStringView in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringEncoder::DecodedData&lt;const QString &amp;&gt;</type>
            <name>encode</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>encode-1</anchor>
            <arglist>(const QString &amp;in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringEncoder::DecodedData&lt;const QString &amp;&gt;</type>
            <name>operator()</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>operator-28-29-1</anchor>
            <arglist>()(const QString &amp;in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>char *</type>
            <name>appendToBuffer</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>appendToBuffer</anchor>
            <arglist>(char *out, QStringView in)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>requiredSpace</name>
            <anchorfile>qstringencoder.html</anchorfile>
            <anchor>requiredSpace</anchor>
            <arglist>(qsizetype inputLength) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringList</name>
        <filename>qstringlist.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(const QList&lt;QString&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(const QStringList &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator=</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(QList&lt;QString&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>operator=</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QList&lt;QString&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>replaceInStrings</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>replaceInStrings-2</anchor>
            <arglist>(QStringView before, QStringView after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>replaceInStrings</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>replaceInStrings-3</anchor>
            <arglist>(QStringView before, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>replaceInStrings</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>replaceInStrings-1</anchor>
            <arglist>(const QRegularExpression &amp;re, const QString &amp;after)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>replaceInStrings</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>replaceInStrings-4</anchor>
            <arglist>(const QString &amp;before, QStringView after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList &amp;</type>
            <name>replaceInStrings</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>replaceInStrings</anchor>
            <arglist>(const QString &amp;before, const QString &amp;after, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringList</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringList-2</anchor>
            <arglist>(QList&lt;QString&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringList</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringList</anchor>
            <arglist>(const QList&lt;QString&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringList</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringList-1</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>removeDuplicates</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>removeDuplicates</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>sort</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>join</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>join-1</anchor>
            <arglist>(QChar separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>join</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>join-2</anchor>
            <arglist>(QLatin1StringView separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>join</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>join-3</anchor>
            <arglist>(QStringView separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>join</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>join</anchor>
            <arglist>(const QString &amp;separator) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter-4</anchor>
            <arglist>(QLatin1StringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter-5</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter</anchor>
            <arglist>(const QLatin1StringMatcher &amp;matcher) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter-2</anchor>
            <arglist>(const QRegularExpression &amp;re) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter-1</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>filter</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>filter-3</anchor>
            <arglist>(const QStringMatcher &amp;matcher) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>operator+</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(const QStringList &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(QLatin1StringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QString &amp;str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QLatin1StringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>indexOf-1</anchor>
            <arglist>(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>indexOf-3</anchor>
            <arglist>(const QRegularExpression &amp;re, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>indexOf-2</anchor>
            <arglist>(const QString &amp;str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(QLatin1StringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>lastIndexOf-1</anchor>
            <arglist>(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>lastIndexOf-3</anchor>
            <arglist>(const QRegularExpression &amp;re, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(const QString &amp;str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QMutableStringListIterator</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QMutableStringListIterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QStringListIterator</name>
            <anchorfile>qstringlist.html</anchorfile>
            <anchor>QStringListIterator-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringListModel</name>
        <filename>qstringlistmodel.html</filename>
        <base>QAbstractListModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringListModel</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>QStringListModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringListModel</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>QStringListModel-1</anchor>
            <arglist>(const QStringList &amp;strings, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>clearItemData</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>clearItemData</anchor>
            <arglist>(const QModelIndex &amp;index) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveRows</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>moveRows</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceRow, int count, const QModelIndex &amp;destinationParent, int destinationChild) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setData</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QModelIndex &amp;index, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStringList</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>setStringList</anchor>
            <arglist>(const QStringList &amp;strings)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>sibling</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>sibling</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;idx) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>stringList</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>stringList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>data</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>data</anchor>
            <arglist>(const QModelIndex &amp;index, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::DropActions</type>
            <name>supportedDropActions</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>supportedDropActions</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual Qt::ItemFlags</type>
            <name>flags</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qstringlistmodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringMatcher</name>
        <filename>qstringmatcher.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringMatcher &amp;</type>
            <name>operator=</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QStringMatcher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher-2</anchor>
            <arglist>(QStringView pattern, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher-4</anchor>
            <arglist>(const QChar *uc, qsizetype length, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher-3</anchor>
            <arglist>(const QString &amp;pattern, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>QStringMatcher-1</anchor>
            <arglist>(const QStringMatcher &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCaseSensitivity</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>setCaseSensitivity</anchor>
            <arglist>(Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPattern</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>setPattern</anchor>
            <arglist>(const QString &amp;pattern)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QStringMatcher</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>dtor.QStringMatcher</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>pattern</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>pattern</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>patternView</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>patternView</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::CaseSensitivity</type>
            <name>caseSensitivity</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>caseSensitivity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>indexIn</anchor>
            <arglist>(QStringView str, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>indexIn-2</anchor>
            <arglist>(const QChar *str, qsizetype length, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexIn</name>
            <anchorfile>qstringmatcher.html</anchorfile>
            <anchor>indexIn-1</anchor>
            <arglist>(const QString &amp;str, qsizetype from) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringTokenizer</name>
        <filename>qstringtokenizer.html</filename>
        <base>HaystackPinning</base>
        <base>NeedlePinning</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringTokenizer</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>QStringTokenizer</anchor>
            <arglist>(Haystack haystack, Needle needle, Qt::CaseSensitivity cs, Qt::SplitBehavior sb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringTokenizer</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>QStringTokenizer-1</anchor>
            <arglist>(Haystack haystack, Needle needle, Qt::SplitBehavior sb, Qt::CaseSensitivity cs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>decltype(QtPrivate::Tok::TokenizerResult&lt;Haystack, Needle&gt;{std::forward&lt;Haystack&gt;(h), std::forward&lt;Needle&gt;(n), flags...})</type>
            <name>qTokenize</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>qTokenize</anchor>
            <arglist>(QtPrivate::Tok::TokenizerResult&lt;Haystack, Needle&gt;{std::forward&lt;Haystack&gt;(h), std::forward&lt;Needle&gt;(n), flags...}) qTokenize(Haystack &amp;&amp;haystack, Needle &amp;&amp;needle, Flags... flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>LContainer</type>
            <name>toContainer</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>toContainer</anchor>
            <arglist>(LContainer &amp;&amp;c) const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringTokenizer&lt;Haystack, Needle&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringTokenizer&lt;Haystack, Needle&gt;::iterator</type>
            <name>cbegin</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringTokenizer&lt;Haystack, Needle&gt;::sentinel</type>
            <name>cend</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringTokenizer&lt;Haystack, Needle&gt;::sentinel</type>
            <name>end</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>RContainer</type>
            <name>toContainer</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>toContainer-1</anchor>
            <arglist>(RContainer &amp;&amp;c) const &amp;&amp; const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>sentinel</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>sentinel-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qstringtokenizer.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QStringView</name>
        <filename>qstringview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView &amp;</type>
            <name>slice</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>slice-1</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView &amp;</type>
            <name>slice</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>slice</anchor>
            <arglist>(qsizetype pos, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringView</type>
            <name>fromArray</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>fromArray</anchor>
            <arglist>(const Char (&amp;)[Size] string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringView</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>QStringView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringView</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>QStringView-1</anchor>
            <arglist>(const Char (&amp;)[N] string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringView</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>QStringView-6</anchor>
            <arglist>(const Char *first, const Char *last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringView</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>QStringView-2</anchor>
            <arglist>(const Char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringView</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>QStringView-7</anchor>
            <arglist>(const Char *str, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringView</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>QStringView-3</anchor>
            <arglist>(const Container &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringView</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>QStringView-4</anchor>
            <arglist>(const QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QStringView</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>QStringView-5</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QStringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QStringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QStringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QStringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QStringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QStringView &amp;lhs, const QStringView &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qsizetype</type>
            <name>maxSize</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>maxSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>qHash-7</anchor>
            <arglist>(QStringView key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(qsizetype length)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFStringRef</type>
            <name>toCFString</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toCFString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSString *</type>
            <name>toNSString</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toNSString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLatin1</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toLatin1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toLocal8Bit</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toLocal8Bit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toUtf8</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toUtf8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>at</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>back</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>back</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>first</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>first</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>front</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>front</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>last</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>last</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>operator[]</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStringView&gt;</type>
            <name>split</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>split</anchor>
            <arglist>(QChar sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStringView&gt;</type>
            <name>split</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>split-1</anchor>
            <arglist>(QStringView sep, Qt::SplitBehavior behavior, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QStringView&gt;</type>
            <name>split</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>split-2</anchor>
            <arglist>(const QRegularExpression &amp;re, Qt::SplitBehavior behavior) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;uint&gt;</type>
            <name>toUcs4</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toUcs4</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>arg</anchor>
            <arglist>(Args &amp;&amp;... args) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>chopped</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>chopped</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>first</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>last</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>left</name>
            <anchorfile>qstringview-obsolete.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>mid</name>
            <anchorfile>qstringview-obsolete.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(qsizetype start, qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>right</name>
            <anchorfile>qstringview-obsolete.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(qsizetype length) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>sliced</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>sliced</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(qsizetype pos, qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>trimmed</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>trimmed</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_iterator</type>
            <name>begin</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_iterator</type>
            <name>cend</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_iterator</type>
            <name>end</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_pointer</type>
            <name>constData</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_pointer</type>
            <name>data</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(QChar c, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>contains-1</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>contains-2</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>contains-3</anchor>
            <arglist>(const QRegularExpression &amp;re, QRegularExpressionMatch *rmatch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>endsWith</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>endsWith-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>endsWith-2</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>endsWith</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>endsWith-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLower</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>isLower</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRightToLeft</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>isRightToLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUpper</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>isUpper</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValidUtf16</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>isValidUtf16</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>startsWith</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>startsWith-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>startsWith-2</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>startsWith</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>startsWith-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QStringView::storage_type *</type>
            <name>utf16</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>utf16</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>decltype(qTokenize(*this, std::forward&lt;Needle&gt;(needle), flags...))</type>
            <name>tokenize</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>tokenize</anchor>
            <arglist>(qTokenize(*this, std::forward&lt;Needle&gt;(needle), flags...)) tokenize(Needle &amp;&amp;sep, Flags... flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(QChar ch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>compare-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>compare-2</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>compare-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>compare-4</anchor>
            <arglist>(QUtf8StringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>localeAwareCompare</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>localeAwareCompare</anchor>
            <arglist>(QStringView other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>long</type>
            <name>toLong</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>count-1</anchor>
            <arglist>(QChar ch, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>count-2</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>count-3</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>count</anchor>
            <arglist>(const QRegularExpression &amp;re) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(QChar c, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>indexOf-1</anchor>
            <arglist>(QLatin1StringView l1, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>indexOf-2</anchor>
            <arglist>(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>indexOf-3</anchor>
            <arglist>(const QRegularExpression &amp;re, qsizetype from, QRegularExpressionMatch *rmatch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>lastIndexOf-5</anchor>
            <arglist>(QChar c, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>lastIndexOf-1</anchor>
            <arglist>(QChar c, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>lastIndexOf-6</anchor>
            <arglist>(QLatin1StringView l1, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>lastIndexOf-2</anchor>
            <arglist>(QLatin1StringView l1, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>lastIndexOf-7</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>lastIndexOf-3</anchor>
            <arglist>(QStringView str, qsizetype from, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const QRegularExpression &amp;re, QRegularExpressionMatch *rmatch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>lastIndexOf-4</anchor>
            <arglist>(const QRegularExpression &amp;re, qsizetype from, QRegularExpressionMatch *rmatch) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>toWCharArray</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toWCharArray</anchor>
            <arglist>(wchar_t *array) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>short</type>
            <name>toShort</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::u16string_view</type>
            <name>operator std::u16string_view</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>operator-std-3a-3au16string_view</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ulong</type>
            <name>toULong</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toULong</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>ushort</type>
            <name>toUShort</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>toUShort</anchor>
            <arglist>(bool *ok, int base) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>storage_type</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>storage_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qstringview.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSysInfo</name>
        <filename>qsysinfo.html</filename>
        <member kind="enumeration">
            <name>Endian</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>Endian-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BigEndian</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LittleEndian</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ByteOrder</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>Endian-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Sizes</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>Sizes-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WordSize</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>Sizes-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>bootUniqueId</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>bootUniqueId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>machineUniqueId</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>machineUniqueId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>buildAbi</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>buildAbi</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>buildCpuArchitecture</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>buildCpuArchitecture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>currentCpuArchitecture</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>currentCpuArchitecture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>kernelType</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>kernelType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>kernelVersion</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>kernelVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>machineHostName</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>machineHostName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>prettyProductName</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>prettyProductName</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>productType</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>productType</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>productVersion</name>
            <anchorfile>qsysinfo.html</anchorfile>
            <anchor>productVersion</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QSystemSemaphore</name>
        <filename>qsystemsemaphore.html</filename>
        <member kind="enumeration">
            <name>AccessMode</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Open</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Create</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>AccessMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SystemSemaphoreError</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>SystemSemaphoreError-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PermissionDenied</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeyError</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlreadyExists</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotFound</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OutOfResources</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnknownError</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>SystemSemaphoreError-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemSemaphore</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>QSystemSemaphore</anchor>
            <arglist>(const QNativeIpcKey &amp;key, int initialValue, QSystemSemaphore::AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QSystemSemaphore</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>QSystemSemaphore-1</anchor>
            <arglist>(const QString &amp;key, int initialValue, QSystemSemaphore::AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>acquire</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>acquire</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>release</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>release</anchor>
            <arglist>(int n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKey</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>setKey</anchor>
            <arglist>(const QString &amp;key, int initialValue, QSystemSemaphore::AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNativeKey</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>setNativeKey</anchor>
            <arglist>(const QNativeIpcKey &amp;key, int initialValue, QSystemSemaphore::AccessMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QSystemSemaphore</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>dtor.QSystemSemaphore</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QNativeIpcKey</type>
            <name>nativeIpcKey</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>nativeIpcKey</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>key</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>key</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSystemSemaphore::SystemSemaphoreError</type>
            <name>error</name>
            <anchorfile>qsystemsemaphore.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTaggedIterator</name>
        <filename>qtaggediterator.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTaggedIterator</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>QTaggedIterator</anchor>
            <arglist>(Iterator &amp;&amp;it)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;</type>
            <name>operator++</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator-2b-2b</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;</type>
            <name>operator--</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator--</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;</type>
            <name>operator-=</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator--eq</anchor>
            <arglist>(qsizetype j)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt;</type>
            <name>operator+</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(qsizetype j, const QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;k)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt;</type>
            <name>operator++</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator-2b-2b-1</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt;</type>
            <name>operator--</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator---1</anchor>
            <arglist>(int x)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt;</type>
            <name>operator+</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTaggedIterator&lt;Iterator, IteratorCategory&gt;</type>
            <name>operator-</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator--1</anchor>
            <arglist>(qsizetype j) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>operator-</name>
            <anchorfile>qtaggediterator.html</anchorfile>
            <anchor>operator-</anchor>
            <arglist>(const QTaggedIterator&lt;Iterator, IteratorCategory&gt; &amp;j) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTemporaryDir</name>
        <filename>qtemporarydir.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTemporaryDir &amp;</type>
            <name>operator=</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QTemporaryDir &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryDir</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>QTemporaryDir</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryDir</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>QTemporaryDir-1</anchor>
            <arglist>(QTemporaryDir &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryDir</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>QTemporaryDir-2</anchor>
            <arglist>(const QString &amp;templatePath)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>remove</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRemove</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>setAutoRemove</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QTemporaryDir &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTemporaryDir</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>dtor.QTemporaryDir</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>(const QString &amp;fileName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>path</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRemove</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>autoRemove</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtemporarydir.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTemporaryFile</name>
        <filename>qtemporaryfile.html</filename>
        <base>QFile</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTemporaryFile *</type>
            <name>createNativeFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>createNativeFile</anchor>
            <arglist>(QFile &amp;file)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTemporaryFile *</type>
            <name>createNativeFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>createNativeFile-1</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTemporaryFile *</type>
            <name>createNativeFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>createNativeFile-2</anchor>
            <arglist>(const std::filesystem::path &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile-1</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile-2</anchor>
            <arglist>(const QString &amp;templateName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile-3</anchor>
            <arglist>(const QString &amp;templateName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>QTemporaryFile-5</anchor>
            <arglist>(const std::filesystem::path &amp;templateName, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>open</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>open</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>open</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>open-1</anchor>
            <arglist>(QIODeviceBase::OpenMode mode) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>rename</anchor>
            <arglist>(const QString &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>rename</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>rename-1</anchor>
            <arglist>(const std::filesystem::path &amp;newName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoRemove</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>setAutoRemove</anchor>
            <arglist>(bool b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileTemplate</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>setFileTemplate</anchor>
            <arglist>(const QString &amp;templateName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFileTemplate</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>setFileTemplate-1</anchor>
            <arglist>(const std::filesystem::path &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTemporaryFile</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>dtor.QTemporaryFile</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>fileName</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileTemplate</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>fileTemplate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoRemove</name>
            <anchorfile>qtemporaryfile.html</anchorfile>
            <anchor>autoRemove</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextBoundaryFinder</name>
        <filename>qtextboundaryfinder.html</filename>
        <member kind="enumeration">
            <name>BoundaryReason</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotAtBoundary</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BreakOpportunity</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StartOfItem</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EndOfItem</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MandatoryBreak</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SoftHyphen</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BoundaryType</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Grapheme</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Word</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sentence</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Line</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBoundaryFinder &amp;</type>
            <name>operator=</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QTextBoundaryFinder &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder-3</anchor>
            <arglist>(QTextBoundaryFinder::BoundaryType type, QStringView string, unsigned char *buffer, qsizetype bufferSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder-4</anchor>
            <arglist>(QTextBoundaryFinder::BoundaryType type, const QChar *chars, qsizetype length, unsigned char *buffer, qsizetype bufferSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder-2</anchor>
            <arglist>(QTextBoundaryFinder::BoundaryType type, const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>QTextBoundaryFinder-1</anchor>
            <arglist>(const QTextBoundaryFinder &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>toNextBoundary</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>toNextBoundary</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>toPreviousBoundary</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>toPreviousBoundary</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPosition</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>setPosition</anchor>
            <arglist>(qsizetype position)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toEnd</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>toEnd</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toStart</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>toStart</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTextBoundaryFinder</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>dtor.QTextBoundaryFinder</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>string</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>string</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBoundaryFinder::BoundaryReasons</type>
            <name>boundaryReasons</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>boundaryReasons</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextBoundaryFinder::BoundaryType</type>
            <name>type</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isAtBoundary</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>isAtBoundary</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>position</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>position</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QTextBoundaryFinder::BoundaryReason">
            <name>BoundaryReasons</name>
            <anchorfile>qtextboundaryfinder.html</anchorfile>
            <anchor>BoundaryReason-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTextStream</name>
        <filename>qtextstream.html</filename>
        <base>QIODeviceBase</base>
        <member kind="enumeration">
            <name>FieldAlignment</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>FieldAlignment-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AlignLeft</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignRight</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignCenter</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignAccountingStyle</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>FieldAlignment-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NumberFlag</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>NumberFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ShowBase</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForcePoint</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForceSign</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UppercaseBase</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UppercaseDigits</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>RealNumberNotation</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>RealNumberNotation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>SmartNotation</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>RealNumberNotation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FixedNotation</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>RealNumberNotation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScientificNotation</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>RealNumberNotation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Status</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>Status-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Ok</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadPastEnd</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReadCorruptData</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WriteFailed</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>Status-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>read</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>read</anchor>
            <arglist>(qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readAll</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>readAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readLine</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>readLine</anchor>
            <arglist>(qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QChar c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-4</anchor>
            <arglist>(QLatin1StringView string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-5</anchor>
            <arglist>(QStringView string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-6</anchor>
            <arglist>(char c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-7</anchor>
            <arglist>(char16_t c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-8</anchor>
            <arglist>(const QByteArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(const QString &amp;string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-9</anchor>
            <arglist>(const char *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-10</anchor>
            <arglist>(const void *ptr)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-11</anchor>
            <arglist>(double f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(float f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-12</anchor>
            <arglist>(int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-13</anchor>
            <arglist>(long i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-14</anchor>
            <arglist>(qlonglong i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-15</anchor>
            <arglist>(qulonglong i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-3</anchor>
            <arglist>(short i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-16</anchor>
            <arglist>(unsigned int i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-17</anchor>
            <arglist>(unsigned long i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-lt-lt-18</anchor>
            <arglist>(unsigned short i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-4</anchor>
            <arglist>(QByteArray &amp;array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QChar &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(QString &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-5</anchor>
            <arglist>(char &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-6</anchor>
            <arglist>(char *c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-7</anchor>
            <arglist>(char16_t &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-8</anchor>
            <arglist>(double &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-2</anchor>
            <arglist>(float &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-9</anchor>
            <arglist>(int &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-10</anchor>
            <arglist>(long &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-11</anchor>
            <arglist>(qlonglong &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-12</anchor>
            <arglist>(qulonglong &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-3</anchor>
            <arglist>(short &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-13</anchor>
            <arglist>(unsigned int &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-14</anchor>
            <arglist>(unsigned long &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>operator-gt-gt-15</anchor>
            <arglist>(unsigned short &amp;i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-2</anchor>
            <arglist>(FILE *fileHandle, QIODeviceBase::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-3</anchor>
            <arglist>(QByteArray *array, QIODeviceBase::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-1</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-4</anchor>
            <arglist>(QString *string, QIODeviceBase::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>QTextStream-5</anchor>
            <arglist>(const QByteArray &amp;array, QIODeviceBase::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStreamManipulator</type>
            <name>qSetFieldWidth</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>qSetFieldWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStreamManipulator</type>
            <name>qSetPadChar</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>qSetPadChar</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStreamManipulator</type>
            <name>qSetRealNumberPrecision</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>qSetRealNumberPrecision</anchor>
            <arglist>(int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>readLineInto</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>readLineInto</anchor>
            <arglist>(QString *line, qint64 maxlen)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>seek</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>seek</anchor>
            <arglist>(qint64 pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>flush</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reset</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resetStatus</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>resetStatus</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoDetectUnicode</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setAutoDetectUnicode</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEncoding</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setEncoding</anchor>
            <arglist>(QStringConverter::Encoding encoding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldAlignment</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setFieldAlignment</anchor>
            <arglist>(QTextStream::FieldAlignment mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFieldWidth</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setFieldWidth</anchor>
            <arglist>(int width)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGenerateByteOrderMark</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setGenerateByteOrderMark</anchor>
            <arglist>(bool generate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setIntegerBase</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setIntegerBase</anchor>
            <arglist>(int base)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocale</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setLocale</anchor>
            <arglist>(const QLocale &amp;locale)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNumberFlags</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setNumberFlags</anchor>
            <arglist>(QTextStream::NumberFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPadChar</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setPadChar</anchor>
            <arglist>(QChar ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRealNumberNotation</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setRealNumberNotation</anchor>
            <arglist>(QTextStream::RealNumberNotation notation)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRealNumberPrecision</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setRealNumberPrecision</anchor>
            <arglist>(int precision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStatus</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setStatus</anchor>
            <arglist>(QTextStream::Status status)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setString</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>setString</anchor>
            <arglist>(QString *string, QIODeviceBase::OpenMode openMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>skipWhiteSpace</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>skipWhiteSpace</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTextStream</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>dtor.QTextStream</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>padChar</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>padChar</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>locale</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>locale</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString *</type>
            <name>string</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>string</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringConverter::Encoding</type>
            <name>encoding</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>encoding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream::FieldAlignment</type>
            <name>fieldAlignment</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>fieldAlignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream::NumberFlags</type>
            <name>numberFlags</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>numberFlags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream::RealNumberNotation</type>
            <name>realNumberNotation</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>realNumberNotation</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream::Status</type>
            <name>status</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>status</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoDetectUnicode</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>autoDetectUnicode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>generateByteOrderMark</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>generateByteOrderMark</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fieldWidth</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>fieldWidth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>integerBase</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>integerBase</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>realNumberPrecision</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>realNumberPrecision</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>pos</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>pos</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="QTextStream::NumberFlag">
            <name>NumberFlags</name>
            <anchorfile>qtextstream.html</anchorfile>
            <anchor>NumberFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QThread</name>
        <filename>qthread.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Priority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>IdlePriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LowestPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LowPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NormalPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HighPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HighestPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TimeCriticalPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InheritPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>Priority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>QualityOfService</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>QualityOfService-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Auto</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>QualityOfService-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>High</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>QualityOfService-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Eco</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>QualityOfService-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QThread *</type>
            <name>create</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(Function &amp;&amp;f, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QThread *</type>
            <name>currentThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>currentThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>QThread</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>Qt::HANDLE</type>
            <name>currentThreadId</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>currentThreadId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isMainThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>isMainThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>wait</anchor>
            <arglist>(QDeadlineTimer deadline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>wait-1</anchor>
            <arglist>(unsigned long time)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>int</type>
            <name>exec</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>exec</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>idealThreadCount</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>idealThreadCount</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>exit</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>exit</anchor>
            <arglist>(int returnCode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>msleep</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>msleep</anchor>
            <arglist>(unsigned long msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>quit</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>quit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>requestInterruption</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>requestInterruption</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>run</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>run</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEventDispatcher</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setEventDispatcher</anchor>
            <arglist>(QAbstractEventDispatcher *eventDispatcher)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPriority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setPriority</anchor>
            <arglist>(QThread::Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServiceLevel</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setServiceLevel</anchor>
            <arglist>(QThread::QualityOfService serviceLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStackSize</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setStackSize</anchor>
            <arglist>(uint stackSize)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="yes">
            <type>void</type>
            <name>setTerminationEnabled</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>setTerminationEnabled</anchor>
            <arglist>(bool enabled)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>sleep</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>sleep</anchor>
            <arglist>(std::chrono::nanoseconds nsecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>sleep</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>sleep-1</anchor>
            <arglist>(unsigned long secs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(QThread::Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>started</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>started</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>terminate</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>terminate</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>usleep</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>usleep</anchor>
            <arglist>(unsigned long usecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>yieldCurrentThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>yieldCurrentThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>dtor.QThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QAbstractEventDispatcher *</type>
            <name>eventDispatcher</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>eventDispatcher</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QThread::Priority</type>
            <name>priority</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>priority</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QThread::QualityOfService</type>
            <name>serviceLevel</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>serviceLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCurrentThread</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>isCurrentThread</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFinished</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>isFinished</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isInterruptionRequested</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>isInterruptionRequested</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRunning</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>isRunning</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopLevel</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>loopLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>stackSize</name>
            <anchorfile>qthread.html</anchorfile>
            <anchor>stackSize</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QThreadPool</name>
        <filename>qthreadpool.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QThreadPool *</type>
            <name>globalInstance</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>globalInstance</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QThreadPool</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>QThreadPool</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryStart</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>tryStart-1</anchor>
            <arglist>(Callable &amp;&amp;callableToRun)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryStart</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>tryStart</anchor>
            <arglist>(QRunnable *runnable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>tryTake</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>tryTake</anchor>
            <arglist>(QRunnable *runnable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForDone</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>waitForDone</anchor>
            <arglist>(QDeadlineTimer deadline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>waitForDone</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>waitForDone-1</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseThread</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>releaseThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserveThread</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>reserveThread</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setExpiryTimeout</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>expiryTimeout-prop</anchor>
            <arglist>(int expiryTimeout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>maxThreadCount-prop</anchor>
            <arglist>(int maxThreadCount)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setServiceLevel</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>setServiceLevel</anchor>
            <arglist>(QThread::QualityOfService serviceLevel)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStackSize</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>stackSize-prop</anchor>
            <arglist>(uint stackSize)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setThreadPriority</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>threadPriority-prop</anchor>
            <arglist>(QThread::Priority priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>start-1</anchor>
            <arglist>(Callable &amp;&amp;callableToRun, int priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(QRunnable *runnable, int priority)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startOnReservedThread</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>startOnReservedThread-1</anchor>
            <arglist>(Callable &amp;&amp;callableToRun)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startOnReservedThread</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>startOnReservedThread</anchor>
            <arglist>(QRunnable *runnable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QThreadPool</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>dtor.QThreadPool</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QThread::Priority</type>
            <name>threadPriority</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>threadPriority-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QThread::QualityOfService</type>
            <name>serviceLevel</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>serviceLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const QThread *thread) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>activeThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>activeThreadCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>expiryTimeout</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>expiryTimeout-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>maxThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>maxThreadCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>stackSize</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>stackSize-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="int">
            <name>activeThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>activeThreadCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>expiryTimeout</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>expiryTimeout-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>maxThreadCount</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>maxThreadCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="uint">
            <name>stackSize</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>stackSize-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QThread::Priority">
            <name>threadPriority</name>
            <anchorfile>qthreadpool.html</anchorfile>
            <anchor>threadPriority-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QThreadStorage</name>
        <filename>qthreadstorage.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QThreadStorage</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>QThreadStorage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>localData</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>localData</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocalData</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>setLocalData</anchor>
            <arglist>(T data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QThreadStorage</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>dtor.QThreadStorage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>localData</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>localData-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasLocalData</name>
            <anchorfile>qthreadstorage.html</anchorfile>
            <anchor>hasLocalData</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTime</name>
        <filename>qtime.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDataStream &amp;out, QTime time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(QDataStream &amp;in, QTime &amp;time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>currentTime</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>currentTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromMSecsSinceStartOfDay</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromMSecsSinceStartOfDay</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromString-2</anchor>
            <arglist>(QStringView string, QStringView format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromString-3</anchor>
            <arglist>(QStringView string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromString-4</anchor>
            <arglist>(const QString &amp;string, QStringView format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(const QString &amp;string, Qt::DateFormat format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTime</type>
            <name>fromString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>fromString-1</anchor>
            <arglist>(const QString &amp;string, const QString &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTime</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>QTime</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTime</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>QTime-1</anchor>
            <arglist>(int h, int m, int s, int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>isValid-1</anchor>
            <arglist>(int h, int m, int s, int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTime &amp;lhs, const QTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QTime &amp;lhs, const QTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QTime &amp;lhs, const QTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTime &amp;lhs, const QTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QTime &amp;lhs, const QTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QTime &amp;lhs, const QTime &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setHMS</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>setHMS</anchor>
            <arglist>(int h, int m, int s, int ms)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QStringView format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>toString-2</anchor>
            <arglist>(Qt::DateFormat format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>toString-1</anchor>
            <arglist>(const QString &amp;format) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>addMSecs</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>addMSecs</anchor>
            <arglist>(int ms) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>addSecs</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>addSecs</anchor>
            <arglist>(int s) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>hour</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>hour</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minute</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>minute</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>msec</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>msec</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>msecsSinceStartOfDay</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>msecsSinceStartOfDay</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>msecsTo</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>msecsTo</anchor>
            <arglist>(QTime t) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>second</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>second</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>secsTo</name>
            <anchorfile>qtime.html</anchorfile>
            <anchor>secsTo</anchor>
            <arglist>(QTime t) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimeLine</name>
        <filename>qtimeline.html</filename>
        <base>QObject</base>
        <member kind="enumeration">
            <name>Direction</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>Direction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Forward</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Backward</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>Direction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>State</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>State-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NotRunning</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Paused</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Running</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>State-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QEasingCurve&gt;</type>
            <name>bindableEasingCurve</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QTimeLine::Direction&gt;</type>
            <name>bindableDirection</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableCurrentTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableDuration</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableLoopCount</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableUpdateInterval</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeLine</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>QTimeLine</anchor>
            <arglist>(int duration, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>finished</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>finished</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>frameChanged</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>frameChanged</anchor>
            <arglist>(int frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resume</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>resume</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCurrentTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDirection</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>(QTimeLine::Direction direction)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(int duration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEasingCurve</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>(const QEasingCurve &amp;curve)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>setEndFrame</anchor>
            <arglist>(int frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameRange</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>setFrameRange</anchor>
            <arglist>(int startFrame, int endFrame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLoopCount</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>(int count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPaused</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>setPaused</anchor>
            <arglist>(bool paused)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>setStartFrame</anchor>
            <arglist>(int frame)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUpdateInterval</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>(int interval)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>start</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stateChanged</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>stateChanged</anchor>
            <arglist>(QTimeLine::State newState)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>toggleDirection</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>toggleDirection</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>valueChanged</anchor>
            <arglist>(qreal value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTimeLine</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>dtor.QTimeLine</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>easingCurve</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeLine::Direction</type>
            <name>direction</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeLine::State</type>
            <name>state</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>state</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>duration</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>endFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>endFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameForTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>frameForTime</anchor>
            <arglist>(int msec) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>loopCount</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>startFrame</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>startFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>updateInterval</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>currentValue</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual qreal</type>
            <name>valueForTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>valueForTime</anchor>
            <arglist>(int msec) const const</arglist>
        </member>
        <member kind="property" type="int">
            <name>currentTime</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>currentTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Direction">
            <name>direction</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>direction-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEasingCurve">
            <name>easingCurve</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>loopCount</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>loopCount-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>updateInterval</name>
            <anchorfile>qtimeline.html</anchorfile>
            <anchor>updateInterval-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimeZone</name>
        <filename>qtimezone.html</filename>
        <class>QTimeZone::OffsetData</class>
        <member kind="enumeration">
            <name>Initialization</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>Initialization-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LocalTime</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>Initialization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UTC</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>Initialization-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NameType</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>NameType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LongName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShortName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OffsetName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>NameType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TimeType</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>TimeType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StandardTime</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>TimeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DaylightTime</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>TimeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GenericTime</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>TimeType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>ianaIdToWindowsId</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>ianaIdToWindowsId</anchor>
            <arglist>(const QByteArray &amp;ianaId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>systemTimeZoneId</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>systemTimeZoneId</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>windowsIdToDefaultIanaId</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>windowsIdToDefaultIanaId</anchor>
            <arglist>(const QByteArray &amp;windowsId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>windowsIdToDefaultIanaId</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>windowsIdToDefaultIanaId-1</anchor>
            <arglist>(const QByteArray &amp;windowsId, QLocale::Territory territory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>availableTimeZoneIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>availableTimeZoneIds</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>availableTimeZoneIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>availableTimeZoneIds-1</anchor>
            <arglist>(QLocale::Territory territory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>availableTimeZoneIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>availableTimeZoneIds-2</anchor>
            <arglist>(int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>windowsIdToIanaIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>windowsIdToIanaIds</anchor>
            <arglist>(const QByteArray &amp;windowsId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QByteArray&gt;</type>
            <name>windowsIdToIanaIds</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>windowsIdToIanaIds-1</anchor>
            <arglist>(const QByteArray &amp;windowsId, QLocale::Territory territory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone &amp;</type>
            <name>operator=</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QTimeZone &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone &amp;</type>
            <name>operator=</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QTimeZone &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>fromCFTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>fromCFTimeZone</anchor>
            <arglist>(CFTimeZoneRef timeZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>fromDurationAheadOfUtc</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>fromDurationAheadOfUtc</anchor>
            <arglist>(std::chrono::seconds offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>fromNSTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>fromNSTimeZone</anchor>
            <arglist>(const NSTimeZone *timeZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>fromSecondsAheadOfUtc</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>fromSecondsAheadOfUtc</anchor>
            <arglist>(int offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>fromStdTimeZonePtr</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>fromStdTimeZonePtr</anchor>
            <arglist>(const int *timeZone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>systemTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>systemTimeZone</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTimeZone</type>
            <name>utc</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>utc</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-1</anchor>
            <arglist>(QTimeZone &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-2</anchor>
            <arglist>(QTimeZone::Initialization spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-3</anchor>
            <arglist>(const QByteArray &amp;ianaId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-6</anchor>
            <arglist>(const QByteArray &amp;zoneId, int offsetSeconds, const QString &amp;name, const QString &amp;abbreviation, QLocale::Territory territory, const QString &amp;comment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-4</anchor>
            <arglist>(const QTimeZone &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>QTimeZone-5</anchor>
            <arglist>(int offsetSeconds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isTimeZoneIdAvailable</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>isTimeZoneIdAvailable</anchor>
            <arglist>(const QByteArray &amp;ianaId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isUtcOrFixedOffset</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>isUtcOrFixedOffset-1</anchor>
            <arglist>(Qt::TimeSpec spec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QTimeZone &amp;lhs, const QTimeZone &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QTimeZone &amp;lhs, const QTimeZone &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QTimeZone &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>dtor.QTimeZone</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFTimeZoneRef</type>
            <name>toCFTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>toCFTimeZone</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSTimeZone *</type>
            <name>toNSTimeZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>toNSTimeZone</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>id</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::Country</type>
            <name>country</name>
            <anchorfile>qtimezone-obsolete.html</anchorfile>
            <anchor>country</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale::Territory</type>
            <name>territory</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>territory</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>abbreviation</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>abbreviation</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>comment</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>comment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>displayName</anchor>
            <arglist>(QTimeZone::TimeType timeType, QTimeZone::NameType nameType, const QLocale &amp;locale) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>displayName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>displayName-1</anchor>
            <arglist>(const QDateTime &amp;atDateTime, QTimeZone::NameType nameType, const QLocale &amp;locale) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone</type>
            <name>asBackendZone</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>asBackendZone</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone::OffsetData</type>
            <name>nextTransition</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>nextTransition</anchor>
            <arglist>(const QDateTime &amp;afterDateTime) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone::OffsetData</type>
            <name>offsetData</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>offsetData</anchor>
            <arglist>(const QDateTime &amp;forDateTime) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone::OffsetData</type>
            <name>previousTransition</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>previousTransition</anchor>
            <arglist>(const QDateTime &amp;beforeDateTime) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTimeZone::OffsetDataList</type>
            <name>transitions</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>transitions</anchor>
            <arglist>(const QDateTime &amp;fromDateTime, const QDateTime &amp;toDateTime) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimeSpec</type>
            <name>timeSpec</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>timeSpec</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAlternativeName</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>hasAlternativeName</anchor>
            <arglist>(QByteArrayView alias) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasDaylightTime</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>hasDaylightTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasTransitions</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>hasTransitions</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDaylightTime</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>isDaylightTime</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isUtcOrFixedOffset</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>isUtcOrFixedOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>daylightTimeOffset</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>daylightTimeOffset</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>fixedSecondsAheadOfUtc</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>fixedSecondsAheadOfUtc</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>offsetFromUtc</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>offsetFromUtc</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>standardTimeOffset</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>standardTimeOffset</anchor>
            <arglist>(const QDateTime &amp;atDateTime) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>OffsetDataList</name>
            <anchorfile>qtimezone.html</anchorfile>
            <anchor>OffsetDataList-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimeZone::OffsetData</name>
        <filename>qtimezone-offsetdata.html</filename>
    </compound>
    <compound kind="class">
        <name>QTimer</name>
        <filename>qtimer.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;Qt::TimerType&gt;</type>
            <name>bindableTimerType</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;bool&gt;</type>
            <name>bindableActive</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;bool&gt;</type>
            <name>bindableSingleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableInterval</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>callOnTimeout</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>callOnTimeout</anchor>
            <arglist>(Functor &amp;&amp;slot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaObject::Connection</type>
            <name>callOnTimeout</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>callOnTimeout-1</anchor>
            <arglist>(const QObject *context, Functor &amp;&amp;slot, Qt::ConnectionType connectionType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimer</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>QTimer</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterval</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInterval</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>(std::chrono::milliseconds value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSingleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist>(bool singleShot)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTimerType</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist>(Qt::TimerType atype)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot</anchor>
            <arglist>(Duration interval, Functor &amp;&amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-1</anchor>
            <arglist>(Duration interval, Qt::TimerType timerType, Functor &amp;&amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-4</anchor>
            <arglist>(Duration interval, Qt::TimerType timerType, const QObject *context, Functor &amp;&amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-2</anchor>
            <arglist>(Duration interval, const QObject *context, Functor &amp;&amp;functor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer-obsolete.html</anchorfile>
            <anchor>singleShot-6</anchor>
            <arglist>(int msec, Qt::TimerType timerType, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer-obsolete.html</anchorfile>
            <anchor>singleShot-3</anchor>
            <arglist>(int msec, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-7</anchor>
            <arglist>(std::chrono::nanoseconds nsec, Qt::TimerType timerType, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-5</anchor>
            <arglist>(std::chrono::nanoseconds nsec, const QObject *receiver, const char *member)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>start-1</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>start</anchor>
            <arglist>(int msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>start</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>start-2</anchor>
            <arglist>(std::chrono::milliseconds msec)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>stop</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>stop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>timeout</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timeout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>timerEvent</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerEvent</anchor>
            <arglist>(QTimerEvent *e) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTimer</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>dtor.QTimer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerId</type>
            <name>id</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerType</type>
            <name>timerType</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isActive</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>isActive</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isSingleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>interval</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>remainingTime</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>remainingTime-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timerId</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::milliseconds</type>
            <name>intervalAsDuration</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>intervalAsDuration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::chrono::milliseconds</type>
            <name>remainingTimeAsDuration</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>remainingTimeAsDuration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="bool">
            <name>active</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>active-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>interval</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>interval-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>remainingTime</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>remainingTime-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="bool">
            <name>singleShot</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>singleShot-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="Qt::TimerType">
            <name>timerType</name>
            <anchorfile>qtimer.html</anchorfile>
            <anchor>timerType-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTimerEvent</name>
        <filename>qtimerevent.html</filename>
        <base>QEvent</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimerEvent</name>
            <anchorfile>qtimerevent.html</anchorfile>
            <anchor>QTimerEvent</anchor>
            <arglist>(Qt::TimerId timerId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTimerEvent</name>
            <anchorfile>qtimerevent.html</anchorfile>
            <anchor>QTimerEvent-1</anchor>
            <arglist>(int timerId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::TimerId</type>
            <name>id</name>
            <anchorfile>qtimerevent.html</anchorfile>
            <anchor>id</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qtimerevent.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(const QBasicTimer &amp;timer) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>timerId</name>
            <anchorfile>qtimerevent.html</anchorfile>
            <anchor>timerId</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTranslator</name>
        <filename>qtranslator.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTranslator</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>QTranslator</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>load-1</anchor>
            <arglist>(const QLocale &amp;locale, const QString &amp;filename, const QString &amp;prefix, const QString &amp;directory, const QString &amp;suffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>load</anchor>
            <arglist>(const QString &amp;filename, const QString &amp;directory, const QString &amp;search_delimiters, const QString &amp;suffix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>load</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>load-2</anchor>
            <arglist>(const uchar *data, int len, const QString &amp;directory)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTranslator</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>dtor.QTranslator</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>filePath</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>filePath</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>language</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>language</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>translate</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>translate</anchor>
            <arglist>(const char *context, const char *sourceText, const char *disambiguation, int n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>isEmpty</name>
            <anchorfile>qtranslator.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTransposeProxyModel</name>
        <filename>qtransposeproxymodel.html</filename>
        <base>QAbstractProxyModel</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTransposeProxyModel</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>QTransposeProxyModel</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertColumns</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>insertColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>insertRows</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>insertRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveColumns</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>moveColumns</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceRow, int count, const QModelIndex &amp;destinationParent, int destinationChild) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>moveRows</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>moveRows</anchor>
            <arglist>(const QModelIndex &amp;sourceParent, int sourceRow, int count, const QModelIndex &amp;destinationParent, int destinationChild) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeColumns</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>removeColumns</anchor>
            <arglist>(int column, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>removeRows</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>removeRows</anchor>
            <arglist>(int row, int count, const QModelIndex &amp;parent) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setHeaderData</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>setHeaderData</anchor>
            <arglist>(int section, Qt::Orientation orientation, const QVariant &amp;value, int role) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>setItemData</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>setItemData</anchor>
            <arglist>(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>setSourceModel</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>setSourceModel</anchor>
            <arglist>(QAbstractItemModel *newSourceModel) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>sort</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>sort</anchor>
            <arglist>(int column, Qt::SortOrder order) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QTransposeProxyModel</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>dtor.QTransposeProxyModel</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QMap&lt;int, QVariant&gt;</type>
            <name>itemData</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>itemData</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>index</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>index</anchor>
            <arglist>(int row, int column, const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapFromSource</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>mapFromSource</anchor>
            <arglist>(const QModelIndex &amp;sourceIndex) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>mapToSource</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>mapToSource</anchor>
            <arglist>(const QModelIndex &amp;proxyIndex) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QModelIndex</type>
            <name>parent</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>parent</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QSize</type>
            <name>span</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>span</anchor>
            <arglist>(const QModelIndex &amp;index) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>headerData</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>headerData</anchor>
            <arglist>(int section, Qt::Orientation orientation, int role) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>columnCount</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>columnCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>rowCount</name>
            <anchorfile>qtransposeproxymodel.html</anchorfile>
            <anchor>rowCount</anchor>
            <arglist>(const QModelIndex &amp;parent) const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QTypeRevision</name>
        <filename>qtyperevision.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>operator-lt-lt-26</anchor>
            <arglist>(QDataStream &amp;out, const QTypeRevision &amp;revision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>operator-gt-gt-26</anchor>
            <arglist>(QDataStream &amp;in, QTypeRevision &amp;revision)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTypeRevision</type>
            <name>fromEncodedVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>fromEncodedVersion</anchor>
            <arglist>(Integer value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTypeRevision</type>
            <name>fromMajorVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>fromMajorVersion</anchor>
            <arglist>(Major majorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTypeRevision</type>
            <name>fromMinorVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>fromMinorVersion</anchor>
            <arglist>(Minor minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTypeRevision</type>
            <name>fromVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>fromVersion</anchor>
            <arglist>(Major majorVersion, Minor minorVersion)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QTypeRevision</type>
            <name>zero</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>zero</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QTypeRevision</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>QTypeRevision</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>bool</type>
            <name>isValidSegment</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>isValidSegment</anchor>
            <arglist>(Integer segment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Integer</type>
            <name>toEncodedVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>toEncodedVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasMajorVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>hasMajorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasMinorVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>hasMinorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint8</type>
            <name>majorVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>majorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint8</type>
            <name>minorVersion</name>
            <anchorfile>qtyperevision.html</anchorfile>
            <anchor>minorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUnhandledException</name>
        <filename>qunhandledexception.html</filename>
        <base>QException</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUnhandledException &amp;</type>
            <name>operator=</name>
            <anchorfile>qunhandledexception.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QUnhandledException &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUnhandledException</name>
            <anchorfile>qunhandledexception.html</anchorfile>
            <anchor>QUnhandledException</anchor>
            <arglist>(QUnhandledException &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUnhandledException</name>
            <anchorfile>qunhandledexception.html</anchorfile>
            <anchor>QUnhandledException-1</anchor>
            <arglist>(const QUnhandledException &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUnhandledException</name>
            <anchorfile>qunhandledexception.html</anchorfile>
            <anchor>QUnhandledException-2</anchor>
            <arglist>(std::__exception_ptr::exception_ptr exception)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qunhandledexception.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QUnhandledException &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::__exception_ptr::exception_ptr</type>
            <name>exception</name>
            <anchorfile>qunhandledexception.html</anchorfile>
            <anchor>exception</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUntypedBindable</name>
        <filename>quntypedbindable.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyNotifier</type>
            <name>addNotifier</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>addNotifier</anchor>
            <arglist>(Functor f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUntypedBindable</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>QUntypedBindable</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUntypedBindable</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>QUntypedBindable-1</anchor>
            <arglist>(Property *property)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUntypedPropertyBinding</type>
            <name>takeBinding</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>takeBinding</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>setBinding</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>setBinding</anchor>
            <arglist>(const QUntypedPropertyBinding &amp;binding)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>metaType</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>metaType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyChangeHandler&lt;Functor&gt;</type>
            <name>onValueChanged</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>onValueChanged</anchor>
            <arglist>(Functor f) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPropertyChangeHandler&lt;Functor&gt;</type>
            <name>subscribe</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>subscribe</anchor>
            <arglist>(Functor f) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUntypedPropertyBinding</type>
            <name>binding</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>binding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUntypedPropertyBinding</type>
            <name>makeBinding</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>makeBinding</anchor>
            <arglist>(const QPropertyBindingSourceLocation &amp;location) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasBinding</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>hasBinding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isReadOnly</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>isReadOnly</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>quntypedbindable.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUrl</name>
        <filename>qurl.html</filename>
        <member kind="enumeration">
            <name>AceProcessingOption</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>AceProcessingOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>IgnoreIDNWhitelist</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>AceProcessingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AceTransitionalProcessing</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>AceProcessingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ComponentFormattingOption</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PrettyDecoded</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EncodeSpaces</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EncodeUnicode</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EncodeDelimiters</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EncodeReserved</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DecodeReserved</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FullyEncoded</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FullyDecoded</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ParsingMode</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ParsingMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TolerantMode</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ParsingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StrictMode</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ParsingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DecodedMode</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ParsingMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UrlFormattingOption</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoveScheme</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemovePassword</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoveUserInfo</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemovePort</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoveAuthority</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemovePath</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoveQuery</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoveFragment</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferLocalFile</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StripTrailingSlash</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RemoveFilename</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NormalizePathSegments</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UserInputResolutionOption</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UserInputResolutionOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DefaultResolution</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UserInputResolutionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AssumeLocalFile</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UserInputResolutionOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>toAce</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toAce</anchor>
            <arglist>(const QString &amp;domain, QUrl::AceProcessingOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QByteArray</type>
            <name>toPercentEncoding</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toPercentEncoding</anchor>
            <arglist>(const QString &amp;input, const QByteArray &amp;exclude, const QByteArray &amp;include)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-lt-lt-27</anchor>
            <arglist>(QDataStream &amp;out, const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-gt-gt-27</anchor>
            <arglist>(QDataStream &amp;in, QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QList&lt;QUrl&gt;</type>
            <name>fromStringList</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromStringList</anchor>
            <arglist>(const QStringList &amp;urls, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromAce</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromAce</anchor>
            <arglist>(const QByteArray &amp;domain, QUrl::AceProcessingOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QString</type>
            <name>fromPercentEncoding</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromPercentEncoding</anchor>
            <arglist>(const QByteArray &amp;input)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>idnWhitelist</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>idnWhitelist</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QStringList</type>
            <name>toStringList</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toStringList</anchor>
            <arglist>(const QList&lt;QUrl&gt; &amp;urls, QUrl::FormattingOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QT_NO_URL_CAST_FROM_STRING</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QT_NO_URL_CAST_FROM_STRING</anchor>
            <arglist>QT_NO_URL_CAST_FROM_STRING</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl &amp;</type>
            <name>operator=</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QUrl &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl &amp;</type>
            <name>operator=</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QString &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl &amp;</type>
            <name>operator=</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromCFURL</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromCFURL</anchor>
            <arglist>(CFURLRef url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromEncoded</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromEncoded</anchor>
            <arglist>(QByteArrayView input, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromLocalFile</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromLocalFile</anchor>
            <arglist>(const QString &amp;localFile)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromNSURL</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromNSURL</anchor>
            <arglist>(const NSURL *url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUrl</type>
            <name>fromUserInput</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fromUserInput</anchor>
            <arglist>(const QString &amp;userInput, const QString &amp;workingDirectory, QUrl::UserInputResolutionOptions options)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QUrl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QUrl-1</anchor>
            <arglist>(QUrl &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QUrl-3</anchor>
            <arglist>(const QString &amp;url, QUrl::ParsingMode parsingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>QUrl-2</anchor>
            <arglist>(const QUrl &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QUrl &amp;lhs, const QUrl &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QUrl &amp;lhs, const QUrl &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAuthority</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setAuthority</anchor>
            <arglist>(const QString &amp;authority, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFragment</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setFragment</anchor>
            <arglist>(const QString &amp;fragment, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHost</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setHost</anchor>
            <arglist>(const QString &amp;host, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>void</type>
            <name>setIdnWhitelist</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setIdnWhitelist</anchor>
            <arglist>(const QStringList &amp;list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPassword</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setPassword</anchor>
            <arglist>(const QString &amp;password, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPath</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setPath</anchor>
            <arglist>(const QString &amp;path, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPort</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setPort</anchor>
            <arglist>(int port)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setQuery</anchor>
            <arglist>(const QString &amp;query, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setQuery-1</anchor>
            <arglist>(const QUrlQuery &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScheme</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setScheme</anchor>
            <arglist>(const QString &amp;scheme)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setUrl</anchor>
            <arglist>(const QString &amp;url, QUrl::ParsingMode parsingMode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserInfo</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setUserInfo</anchor>
            <arglist>(const QString &amp;userInfo, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUserName</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>setUserName</anchor>
            <arglist>(const QString &amp;userName, QUrl::ParsingMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QUrl &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QUrl</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>dtor.QUrl</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFURLRef</type>
            <name>toCFURL</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toCFURL</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSURL *</type>
            <name>toNSURL</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toNSURL</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toEncoded</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toEncoded</anchor>
            <arglist>(QUrl::FormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>authority</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>authority</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fileName</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fileName</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>fragment</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>fragment</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>host</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>host</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>password</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>password</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>path</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>path</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>query</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>query</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>scheme</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>scheme</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toDisplayString</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toDisplayString</anchor>
            <arglist>(QUrl::FormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toLocalFile</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toLocalFile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QUrl::FormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>url</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>url</anchor>
            <arglist>(QUrl::FormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>userInfo</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>userInfo</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>userName</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>userName</anchor>
            <arglist>(QUrl::ComponentFormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>adjusted</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>adjusted</anchor>
            <arglist>(QUrl::FormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>resolved</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>resolved</anchor>
            <arglist>(const QUrl &amp;relative) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasFragment</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>hasFragment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasQuery</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>hasQuery</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLocalFile</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isLocalFile</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isParentOf</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isParentOf</anchor>
            <arglist>(const QUrl &amp;childUrl) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRelative</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isRelative</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>matches</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>matches</anchor>
            <arglist>(const QUrl &amp;url, QUrl::FormattingOptions options) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>port</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>port</anchor>
            <arglist>(int defaultPort) const const</arglist>
        </member>
        <member kind="typedef" type="QUrl::AceProcessingOption">
            <name>AceProcessingOptions</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>AceProcessingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QUrl::ComponentFormattingOption">
            <name>ComponentFormattingOptions</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>ComponentFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QUrl::UrlFormattingOption">
            <name>FormattingOptions</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UrlFormattingOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QUrl::UserInputResolutionOption">
            <name>UserInputResolutionOptions</name>
            <anchorfile>qurl.html</anchorfile>
            <anchor>UserInputResolutionOption-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUrlQuery</name>
        <filename>qurlquery.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrlQuery &amp;</type>
            <name>operator=</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QUrlQuery &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrlQuery &amp;</type>
            <name>operator=</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QUrlQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery-1</anchor>
            <arglist>(QUrlQuery &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery-2</anchor>
            <arglist>(const QString &amp;queryString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery-3</anchor>
            <arglist>(const QUrl &amp;url)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery-4</anchor>
            <arglist>(const QUrlQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>QUrlQuery-5</anchor>
            <arglist>(std::initializer_list&lt;std::pair&lt;QString, QString&gt;&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QUrlQuery &amp;lhs, const QUrlQuery &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QUrlQuery &amp;lhs, const QUrlQuery &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char16_t</type>
            <name>defaultQueryPairDelimiter</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>defaultQueryPairDelimiter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>char16_t</type>
            <name>defaultQueryValueDelimiter</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>defaultQueryValueDelimiter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>qHash-31</anchor>
            <arglist>(const QUrlQuery &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addQueryItem</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>addQueryItem</anchor>
            <arglist>(const QString &amp;key, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeAllQueryItems</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>removeAllQueryItems</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeQueryItem</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>removeQueryItem</anchor>
            <arglist>(const QString &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>setQuery</anchor>
            <arglist>(const QString &amp;queryString)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQueryDelimiters</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>setQueryDelimiters</anchor>
            <arglist>(QChar valueDelimiter, QChar pairDelimiter)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setQueryItems</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>setQueryItems</anchor>
            <arglist>(const QList&lt;std::pair&lt;QString, QString&gt;&gt; &amp;query)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QUrlQuery &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QUrlQuery</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>dtor.QUrlQuery</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>queryPairDelimiter</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>queryPairDelimiter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>queryValueDelimiter</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>queryValueDelimiter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;std::pair&lt;QString, QString&gt;&gt;</type>
            <name>queryItems</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>queryItems</anchor>
            <arglist>(QUrl::ComponentFormattingOptions encoding) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>query</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>query</anchor>
            <arglist>(QUrl::ComponentFormattingOptions encoding) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>queryItemValue</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>queryItemValue</anchor>
            <arglist>(const QString &amp;key, QUrl::ComponentFormattingOptions encoding) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QUrl::ComponentFormattingOptions encoding) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>allQueryItemValues</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>allQueryItemValues</anchor>
            <arglist>(const QString &amp;key, QUrl::ComponentFormattingOptions encoding) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasQueryItem</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>hasQueryItem</anchor>
            <arglist>(const QString &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qurlquery.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUtf8StringView</name>
        <filename>qutf8stringview.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView &amp;</type>
            <name>slice</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>slice-1</anchor>
            <arglist>(qsizetype pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView &amp;</type>
            <name>slice</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>slice</anchor>
            <arglist>(qsizetype pos, qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUtf8StringView</type>
            <name>fromArray</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>fromArray</anchor>
            <arglist>(const Char (&amp;)[Size] string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUtf8StringView</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>QUtf8StringView</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUtf8StringView</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>QUtf8StringView-1</anchor>
            <arglist>(const Char (&amp;)[N] string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUtf8StringView</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>QUtf8StringView-5</anchor>
            <arglist>(const Char *first, const Char *last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUtf8StringView</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>QUtf8StringView-2</anchor>
            <arglist>(const Char *str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUtf8StringView</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>QUtf8StringView-6</anchor>
            <arglist>(const Char *str, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUtf8StringView</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>QUtf8StringView-3</anchor>
            <arglist>(const Container &amp;str)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUtf8StringView</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>QUtf8StringView-4</anchor>
            <arglist>(std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qsizetype</type>
            <name>maxSize</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>maxSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>chop</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>chop</anchor>
            <arglist>(qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>truncate</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>truncate</anchor>
            <arglist>(qsizetype n)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>arg</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>arg</anchor>
            <arglist>(Args &amp;&amp;... args) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView</type>
            <name>chopped</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>chopped</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView</type>
            <name>first</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>first</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView</type>
            <name>last</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>last</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView</type>
            <name>left</name>
            <anchorfile>qutf8stringview-obsolete.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView</type>
            <name>mid</name>
            <anchorfile>qutf8stringview-obsolete.html</anchorfile>
            <anchor>mid</anchor>
            <arglist>(qsizetype pos, qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView</type>
            <name>right</name>
            <anchorfile>qutf8stringview-obsolete.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView</type>
            <name>sliced</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>sliced</anchor>
            <arglist>(qsizetype pos) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView</type>
            <name>sliced</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>sliced-1</anchor>
            <arglist>(qsizetype pos, qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_iterator</type>
            <name>begin</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_iterator</type>
            <name>cend</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_iterator</type>
            <name>end</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_pointer</type>
            <name>data</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::storage_type</type>
            <name>at</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::storage_type</type>
            <name>back</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>back</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::storage_type</type>
            <name>front</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>front</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUtf8StringView::storage_type</type>
            <name>operator[]</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype n) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValidUtf8</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>isValidUtf8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char8_t *</type>
            <name>utf8</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>utf8</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(QLatin1StringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>compare-1</anchor>
            <arglist>(QStringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>compare-2</anchor>
            <arglist>(QUtf8StringView str, Qt::CaseSensitivity cs) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::basic_string_view&lt;QUtf8StringView::storage_type&gt;</type>
            <name>operator std::basic_string_view&lt;QUtf8StringView::storage_type&gt;</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>operator-std-3a-3abasic_string_view-ltQUtf8StringView-3a-3astorage_type-gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>storage_type</name>
            <anchorfile>qutf8stringview.html</anchorfile>
            <anchor>storage_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUuid</name>
        <filename>quuid.html</filename>
        <class>QUuid::Id128Bytes</class>
        <member kind="enumeration">
            <name>StringFormat</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>StringFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WithBraces</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>StringFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WithoutBraces</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>StringFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Id128</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>StringFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Variant</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Variant-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VarUnknown</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NCS</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DCE</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Microsoft</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Reserved</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Version</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>VerUnknown</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Time</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EmbeddedPOSIX</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Md5</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Name</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Random</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sha1</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnixEpoch</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>Version-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;s, const QUuid &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-gt-gt-28</anchor>
            <arglist>(QDataStream &amp;s, QUuid &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDebug</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDebug dbg, const QUuid &amp;id)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid &amp;</type>
            <name>operator=</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const GUID &amp;guid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuid</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV3</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV3</anchor>
            <arglist>(QUuid ns, QByteArrayView baseData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV3</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV3-1</anchor>
            <arglist>(const QUuid &amp;ns, const QString &amp;baseData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV5</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV5</anchor>
            <arglist>(QUuid ns, QByteArrayView baseData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV5</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV5-1</anchor>
            <arglist>(const QUuid &amp;ns, const QString &amp;baseData)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>createUuidV7</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>createUuidV7</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>fromBytes</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>fromBytes</anchor>
            <arglist>(const void *bytes, QSysInfo::Endian order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>fromCFUUID</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>fromCFUUID</anchor>
            <arglist>(CFUUIDRef uuid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>fromNSUUID</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>fromNSUUID</anchor>
            <arglist>(const NSUUID *uuid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>fromRfc4122</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>fromRfc4122</anchor>
            <arglist>(QByteArrayView bytes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>fromString</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(QAnyStringView string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QUuid</type>
            <name>fromUInt128</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>fromUInt128</anchor>
            <arglist>(quint128 uuid, QSysInfo::Endian order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid-1</anchor>
            <arglist>(QAnyStringView text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid-3</anchor>
            <arglist>(QUuid::Id128Bytes id128, QSysInfo::Endian order)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid-2</anchor>
            <arglist>(const GUID &amp;guid)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QUuid</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>QUuid-4</anchor>
            <arglist>(uint l, ushort w1, ushort w2, uchar b1, uchar b2, uchar b3, uchar b4, uchar b5, uchar b6, uchar b7, uchar b8)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QUuid &amp;lhs, const GUID &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QUuid &amp;lhs, const QUuid &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QUuid &amp;lhs, const QUuid &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QUuid &amp;lhs, const QUuid &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QUuid &amp;lhs, const GUID &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QUuid &amp;lhs, const QUuid &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QUuid &amp;lhs, const QUuid &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QUuid &amp;lhs, const QUuid &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>qHash-32</anchor>
            <arglist>(const QUuid &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>CFUUIDRef</type>
            <name>toCFUUID</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toCFUUID</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>GUID</type>
            <name>operator GUID</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>operator-GUID</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>NSUUID *</type>
            <name>toNSUUID</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toNSUUID</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toByteArray</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toByteArray</anchor>
            <arglist>(QUuid::StringFormat mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toRfc4122</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toRfc4122</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>(QUuid::StringFormat mode) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Id128Bytes</type>
            <name>toBytes</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toBytes</anchor>
            <arglist>(QSysInfo::Endian order) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Variant</type>
            <name>variant</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>variant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Version</type>
            <name>version</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint128</type>
            <name>toUInt128</name>
            <anchorfile>quuid.html</anchorfile>
            <anchor>toUInt128</anchor>
            <arglist>(QSysInfo::Endian order) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QUuid::Id128Bytes</name>
        <filename>quuid-id128bytes.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Id128Bytes</type>
            <name>qFromBigEndian</name>
            <anchorfile>quuid-id128bytes.html</anchorfile>
            <anchor>qFromBigEndian-5</anchor>
            <arglist>(QUuid::Id128Bytes src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Id128Bytes</type>
            <name>qFromLittleEndian</name>
            <anchorfile>quuid-id128bytes.html</anchorfile>
            <anchor>qFromLittleEndian-5</anchor>
            <arglist>(QUuid::Id128Bytes src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Id128Bytes</type>
            <name>qToBigEndian</name>
            <anchorfile>quuid-id128bytes.html</anchorfile>
            <anchor>qToBigEndian-4</anchor>
            <arglist>(QUuid::Id128Bytes src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid::Id128Bytes</type>
            <name>qToLittleEndian</name>
            <anchorfile>quuid-id128bytes.html</anchorfile>
            <anchor>qToLittleEndian-4</anchor>
            <arglist>(QUuid::Id128Bytes src)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVarLengthArray</name>
        <filename>qvarlengtharray.html</filename>
        <base>QVLABase</base>
        <base>QVLAStorage</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray-5</anchor>
            <arglist>(InputIterator first, InputIterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray-1</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray-2</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray-3</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray-6</anchor>
            <arglist>(qsizetype size, const T &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>QVarLengthArray-4</anchor>
            <arglist>(std::initializer_list&lt;T&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>assign</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>assign-1</anchor>
            <arglist>(InputIterator first, InputIterator last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>assign</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>assign-2</anchor>
            <arglist>(qsizetype n, const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>assign</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>assign</anchor>
            <arglist>(std::initializer_list&lt;T&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-2b-eq-1</anchor>
            <arglist>(T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator+=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-2b-eq</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt; &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(std::initializer_list&lt;T&gt; list)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::iterator</type>
            <name>begin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::iterator</type>
            <name>emplace</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>emplace</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt;::const_iterator pos, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::iterator</type>
            <name>end</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>end</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>erase-2</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt;::const_iterator begin, QVarLengthArray&lt;T, Prealloc&gt;::const_iterator end)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::iterator</type>
            <name>erase</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>erase</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt;::const_iterator pos)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert-3</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt;::const_iterator before, T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert-4</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt;::const_iterator before, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::iterator</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert-2</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt;::const_iterator before, qsizetype count, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>emplace_back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>emplace_back</anchor>
            <arglist>(Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>first</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>first</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>front</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>front</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>last</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>last</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-5b-5d</anchor>
            <arglist>(qsizetype i)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc1&gt; &amp;left, const QVarLengthArray&lt;T, Prealloc2&gt; &amp;right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc1&gt; &amp;lhs, const QVarLengthArray&lt;T, Prealloc2&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc1&gt; &amp;lhs, const QVarLengthArray&lt;T, Prealloc2&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc1&gt; &amp;left, const QVarLengthArray&lt;T, Prealloc2&gt; &amp;right)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc1&gt; &amp;lhs, const QVarLengthArray&lt;T, Prealloc2&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc1&gt; &amp;lhs, const QVarLengthArray&lt;T, Prealloc2&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>removeOne</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>removeOne</anchor>
            <arglist>(const AT &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>erase-1</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt; &amp;array, const AT &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>erase_if</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>erase_if-8</anchor>
            <arglist>(QVarLengthArray&lt;T, Prealloc&gt; &amp;array, Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>qsizetype</type>
            <name>maxSize</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>maxSize</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>removeAll</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>removeAll</anchor>
            <arglist>(const AT &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>removeIf</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>removeIf</anchor>
            <arglist>(Predicate pred)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>qHash-33</anchor>
            <arglist>(const QVarLengthArray&lt;T, Prealloc&gt; &amp;key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>append-2</anchor>
            <arglist>(T &amp;&amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>append-1</anchor>
            <arglist>(const T *buf, qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert</anchor>
            <arglist>(qsizetype i, T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert-1</anchor>
            <arglist>(qsizetype i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>insert</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>insert-5</anchor>
            <arglist>(qsizetype i, qsizetype count, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>pop_back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>pop_back</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qvarlengtharray-obsolete.html</anchorfile>
            <anchor>prepend</anchor>
            <arglist>(T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>prepend</name>
            <anchorfile>qvarlengtharray-obsolete.html</anchorfile>
            <anchor>prepend-1</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>push_back-1</anchor>
            <arglist>(T &amp;&amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>push_back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>push_back</anchor>
            <arglist>(const T &amp;t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>remove</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>remove</anchor>
            <arglist>(qsizetype i, qsizetype count)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeLast</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>removeLast</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>replace</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>replace</anchor>
            <arglist>(qsizetype i, const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>reserve</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>reserve</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>resize</anchor>
            <arglist>(qsizetype size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resize</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>resize-1</anchor>
            <arglist>(qsizetype size, const T &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>shrink_to_fit</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>shrink_to_fit</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>squeeze</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>squeeze</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVarLengthArray</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>dtor.QVarLengthArray</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_iterator</type>
            <name>begin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>begin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_iterator</type>
            <name>cend</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_iterator</type>
            <name>end</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>end-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>rbegin-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVarLengthArray&lt;T, Prealloc&gt;::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>rend-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>(qsizetype i, const T &amp;defaultValue) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>contains</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>contains</anchor>
            <arglist>(const AT &amp;value) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>empty</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>empty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEmpty</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>isEmpty</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>at</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>at</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>back</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>back-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>first</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>first-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>front</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>front-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>last</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>last-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>operator[]</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>operator-5b-5d-1</anchor>
            <arglist>(qsizetype i) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>constData</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>data</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>capacity</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>capacity</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>count</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>count</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>indexOf</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>indexOf</anchor>
            <arglist>(const AT &amp;value, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>lastIndexOf</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>lastIndexOf</anchor>
            <arglist>(const AT &amp;value, qsizetype from) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>length</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>length</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>max_size</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>max_size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>size</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>iterator</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reverse_iterator</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qvarlengtharray.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVariant</name>
        <filename>qvariant.html</filename>
        <member kind="enumeration">
            <name>Type</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bool</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Int</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UInt</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LongLong</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ULongLong</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Double</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Char</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Map</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>List</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>String</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StringList</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ByteArray</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BitArray</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Date</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Time</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DateTime</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Url</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Locale</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Rect</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RectF</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Size</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeF</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Line</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LineF</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Point</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PointF</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RegularExpression</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Hash</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EasingCurve</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Uuid</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ModelIndex</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PersistentModelIndex</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastCoreType</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Font</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pixmap</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Brush</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Color</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Palette</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Image</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Polygon</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Region</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Bitmap</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Cursor</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeySequence</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Pen</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextLength</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextFormat</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Transform</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Matrix4x4</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vector2D</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vector3D</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vector4D</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Quaternion</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PolygonF</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Icon</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastGuiType</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizePolicy</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserType</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastType</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-lt-lt-1</anchor>
            <arglist>(QDataStream &amp;s, const QVariant &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>operator-lt-lt-2</anchor>
            <arglist>(QDataStream &amp;s, const QVariant::Type p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;s, QVariant &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>operator-gt-gt-1</anchor>
            <arglist>(QDataStream &amp;s, QVariant::Type &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QPartialOrdering</type>
            <name>compare</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QVariant &amp;lhs, const QVariant &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant &amp;</type>
            <name>operator=</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QVariant &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant &amp;</type>
            <name>operator=</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QVariant &amp;variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>fromMetaType</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>fromMetaType</anchor>
            <arglist>(QMetaType type, const void *copy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>fromStdVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>fromStdVariant</anchor>
            <arglist>(const std::variant&lt;Types...&gt; &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>fromStdVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>fromStdVariant-1</anchor>
            <arglist>(std::variant&lt;Types...&gt; &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>fromValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>fromValue-1</anchor>
            <arglist>(T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant</type>
            <name>fromValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>fromValue</anchor>
            <arglist>(const T &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-1</anchor>
            <arglist>(QChar c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-2</anchor>
            <arglist>(QDate val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-3</anchor>
            <arglist>(QLatin1StringView val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-4</anchor>
            <arglist>(QLine val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-5</anchor>
            <arglist>(QLineF val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-43</anchor>
            <arglist>(QMetaType type, const void *copy)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-6</anchor>
            <arglist>(QPoint val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-7</anchor>
            <arglist>(QPointF val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-8</anchor>
            <arglist>(QRect val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-9</anchor>
            <arglist>(QRectF val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-10</anchor>
            <arglist>(QSize val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-11</anchor>
            <arglist>(QSizeF val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-12</anchor>
            <arglist>(QTime val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-13</anchor>
            <arglist>(QUuid val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-14</anchor>
            <arglist>(QVariant &amp;&amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>QVariant-15</anchor>
            <arglist>(QVariant::Type type)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-16</anchor>
            <arglist>(bool val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-17</anchor>
            <arglist>(const QBitArray &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-18</anchor>
            <arglist>(const QByteArray &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-19</anchor>
            <arglist>(const QDateTime &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-20</anchor>
            <arglist>(const QEasingCurve &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-21</anchor>
            <arglist>(const QHash&lt;QString, QVariant&gt; &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-22</anchor>
            <arglist>(const QJsonArray &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-23</anchor>
            <arglist>(const QJsonDocument &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-24</anchor>
            <arglist>(const QJsonObject &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-25</anchor>
            <arglist>(const QJsonValue &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-26</anchor>
            <arglist>(const QList&lt;QVariant&gt; &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-27</anchor>
            <arglist>(const QLocale &amp;l)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-28</anchor>
            <arglist>(const QMap&lt;QString, QVariant&gt; &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-29</anchor>
            <arglist>(const QModelIndex &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-30</anchor>
            <arglist>(const QPersistentModelIndex &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-31</anchor>
            <arglist>(const QRegularExpression &amp;re)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-32</anchor>
            <arglist>(const QString &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-33</anchor>
            <arglist>(const QStringList &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-34</anchor>
            <arglist>(const QUrl &amp;val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-35</anchor>
            <arglist>(const QVariant &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-36</anchor>
            <arglist>(const char *val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-37</anchor>
            <arglist>(double val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-38</anchor>
            <arglist>(float val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-39</anchor>
            <arglist>(int val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-40</anchor>
            <arglist>(qlonglong val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-41</anchor>
            <arglist>(qulonglong val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-52</anchor>
            <arglist>(std::in_place_type_t&lt;T&gt;, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-53</anchor>
            <arglist>(std::in_place_type_t&lt;T&gt;, std::initializer_list&lt;U&gt; il, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariant-42</anchor>
            <arglist>(uint val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVariant::Type</type>
            <name>nameToType</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>nameToType</anchor>
            <arglist>(const char *name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>emplace</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>emplace</anchor>
            <arglist>(Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>emplace</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>emplace-1</anchor>
            <arglist>(std::initializer_list&lt;U&gt; list, Args &amp;&amp;... args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;</type>
            <name>get</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>get</anchor>
            <arglist>(QVariant &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T &amp;&amp;</type>
            <name>get</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>get-1</anchor>
            <arglist>(QVariant &amp;&amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>get_if</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>get_if</anchor>
            <arglist>(QVariant *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>qvariant_cast</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>qvariant_cast-1</anchor>
            <arglist>(QVariant &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>qvariant_cast</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>qvariant_cast</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>view</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>view</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>convert</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>convert</anchor>
            <arglist>(QMetaType targetType)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>convert</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>convert-1</anchor>
            <arglist>(int targetTypeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QVariant &amp;lhs, const QVariant &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QVariant &amp;lhs, const QVariant &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;</type>
            <name>get</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>get-2</anchor>
            <arglist>(const QVariant &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T &amp;&amp;</type>
            <name>get</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>get-3</anchor>
            <arglist>(const QVariant &amp;&amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const T *</type>
            <name>get_if</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>get_if-1</anchor>
            <arglist>(const QVariant *v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>const char *</type>
            <name>typeToName</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>typeToName</anchor>
            <arglist>(int typeId)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void *</type>
            <name>data</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>data</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>setValue</anchor>
            <arglist>(QVariant &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>setValue-1</anchor>
            <arglist>(T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>setValue-2</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QVariant &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QVariant</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>dtor.QVariant</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBitArray</type>
            <name>toBitArray</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toBitArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toByteArray</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toByteArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QChar</type>
            <name>toChar</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toChar</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDate</type>
            <name>toDate</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toDate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDateTime</type>
            <name>toDateTime</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toDateTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>toEasingCurve</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toEasingCurve</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QHash&lt;QString, QVariant&gt;</type>
            <name>toHash</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toHash</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonArray</type>
            <name>toJsonArray</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toJsonArray</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonDocument</type>
            <name>toJsonDocument</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toJsonDocument</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonObject</type>
            <name>toJsonObject</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toJsonObject</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QJsonValue</type>
            <name>toJsonValue</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toJsonValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLine</type>
            <name>toLine</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toLine</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLineF</type>
            <name>toLineF</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toLineF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;QVariant&gt;</type>
            <name>toList</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLocale</type>
            <name>toLocale</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toLocale</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMap&lt;QString, QVariant&gt;</type>
            <name>toMap</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toMap</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMetaType</type>
            <name>metaType</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>metaType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QModelIndex</type>
            <name>toModelIndex</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toModelIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPersistentModelIndex</type>
            <name>toPersistentModelIndex</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toPersistentModelIndex</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>toPoint</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPointF</type>
            <name>toPointF</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toPointF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRect</type>
            <name>toRect</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toRect</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRectF</type>
            <name>toRectF</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toRectF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRegularExpression</type>
            <name>toRegularExpression</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toRegularExpression</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>toSize</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSizeF</type>
            <name>toSizeF</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toSizeF</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringList</type>
            <name>toStringList</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toStringList</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTime</type>
            <name>toTime</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toTime</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUrl</type>
            <name>toUrl</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toUrl</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QUuid</type>
            <name>toUuid</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toUuid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant::Type</type>
            <name>type</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T</type>
            <name>value</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const &amp; const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canConvert</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>canConvert</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canConvert</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>canConvert-1</anchor>
            <arglist>(QMetaType type) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canConvert</name>
            <anchorfile>qvariant-obsolete.html</anchorfile>
            <anchor>canConvert-2</anchor>
            <arglist>(int targetTypeId) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>canView</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>canView</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>toBool</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toBool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const char *</type>
            <name>typeName</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>typeName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>constData</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>constData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const void *</type>
            <name>data</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>data-1</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>double</type>
            <name>toDouble</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toDouble</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>toFloat</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toFloat</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>toInt</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toInt</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>typeId</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>typeId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>userType</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>userType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qlonglong</type>
            <name>toLongLong</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toLongLong</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qreal</type>
            <name>toReal</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toReal</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qulonglong</type>
            <name>toULongLong</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toULongLong</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>uint</type>
            <name>toUInt</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>toUInt</anchor>
            <arglist>(bool *ok) const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QVariantHash</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariantHash-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QVariantList</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariantList-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>QVariantMap</name>
            <anchorfile>qvariant.html</anchorfile>
            <anchor>QVariantMap-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVariantAnimation</name>
        <filename>qvariantanimation.html</filename>
        <base>QAbstractAnimation</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;QEasingCurve&gt;</type>
            <name>bindableEasingCurve</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBindable&lt;int&gt;</type>
            <name>bindableDuration</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariantAnimation</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>QVariantAnimation</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *event) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qRegisterAnimationInterpolator</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>qRegisterAnimationInterpolator</anchor>
            <arglist>(QVariant (*)(const T &amp;, const T &amp;, qreal) func)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDuration</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>(int msecs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEasingCurve</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>(const QEasingCurve &amp;easing)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEndValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>endValue-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyValueAt</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>setKeyValueAt</anchor>
            <arglist>(qreal step, const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setKeyValues</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>setKeyValues</anchor>
            <arglist>(const QVariantAnimation::KeyValues &amp;keyValues)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStartValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>startValue-prop</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentTime</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>updateCurrentTime</anchor>
            <arglist>(int) override</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateCurrentValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>updateCurrentValue</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual void</type>
            <name>updateState</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>updateState</anchor>
            <arglist>(QAbstractAnimation::State newState, QAbstractAnimation::State oldState) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>valueChanged</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>valueChanged</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QVariantAnimation</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>dtor.QVariantAnimation</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QEasingCurve</type>
            <name>easingCurve</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>currentValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>currentValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>endValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>endValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual QVariant</type>
            <name>interpolated</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>interpolated</anchor>
            <arglist>(const QVariant &amp;from, const QVariant &amp;to, qreal progress) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>keyValueAt</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>keyValueAt</anchor>
            <arglist>(qreal step) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>startValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>startValue-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantAnimation::KeyValues</type>
            <name>keyValues</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>keyValues</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual int</type>
            <name>duration</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="typedef" type="">
            <name>KeyValues</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>KeyValues-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>KeyValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>KeyValue-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>currentValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>currentValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>duration</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>duration-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QEasingCurve">
            <name>easingCurve</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>easingCurve-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>endValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>endValue-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="QVariant">
            <name>startValue</name>
            <anchorfile>qvariantanimation.html</anchorfile>
            <anchor>startValue-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVariantConstPointer</name>
        <filename>qvariantconstpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariantConstPointer</name>
            <anchorfile>qvariantconstpointer.html</anchorfile>
            <anchor>QVariantConstPointer</anchor>
            <arglist>(QVariant variant)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator*</name>
            <anchorfile>qvariantconstpointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QVariant *</type>
            <name>operator-&gt;</name>
            <anchorfile>qvariantconstpointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVariantPointer</name>
        <filename>qvariantpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariantPointer</name>
            <anchorfile>qvariantpointer.html</anchorfile>
            <anchor>QVariantPointer</anchor>
            <arglist>(const Pointer *pointer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Pointer</type>
            <name>operator-&gt;</name>
            <anchorfile>qvariantpointer.html</anchorfile>
            <anchor>operator--gt</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantRef&lt;Pointer&gt;</type>
            <name>operator*</name>
            <anchorfile>qvariantpointer.html</anchorfile>
            <anchor>operator-2a</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVariantRef</name>
        <filename>qvariantref.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVariantRef</name>
            <anchorfile>qvariantref.html</anchorfile>
            <anchor>QVariantRef</anchor>
            <arglist>(const Pointer *pointer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantRef&lt;Pointer&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvariantref.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(QVariantRef&lt;Pointer&gt; &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantRef&lt;Pointer&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvariantref.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QVariant &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariantRef&lt;Pointer&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qvariantref.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QVariantRef&lt;Pointer&gt; &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVariant</type>
            <name>operator QVariant</name>
            <anchorfile>qvariantref.html</anchorfile>
            <anchor>operator-QVariant</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QVector</name>
        <filename>qvector.html</filename>
        <base>QList</base>
    </compound>
    <compound kind="class">
        <name>QVersionNumber</name>
        <filename>qversionnumber.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>operator-lt-lt-31</anchor>
            <arglist>(QDataStream &amp;out, const QVersionNumber &amp;version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>operator-gt-gt-31</anchor>
            <arglist>(QDataStream &amp;in, QVersionNumber &amp;version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVersionNumber</type>
            <name>commonPrefix</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>commonPrefix</anchor>
            <arglist>(const QVersionNumber &amp;v1, const QVersionNumber &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QVersionNumber</type>
            <name>fromString</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>fromString</anchor>
            <arglist>(QAnyStringView string, qsizetype *suffixIndex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersionNumber</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>QVersionNumber</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersionNumber</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>QVersionNumber-1</anchor>
            <arglist>(QList&lt;int&gt; &amp;&amp;seg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersionNumber</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>QVersionNumber-2</anchor>
            <arglist>(QSpan&lt;const int&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersionNumber</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>QVersionNumber-3</anchor>
            <arglist>(const QList&lt;int&gt; &amp;seg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersionNumber</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>QVersionNumber-4</anchor>
            <arglist>(int maj)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersionNumber</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>QVersionNumber-6</anchor>
            <arglist>(int maj, int min)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersionNumber</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>QVersionNumber-7</anchor>
            <arglist>(int maj, int min, int mic)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QVersionNumber</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>QVersionNumber-5</anchor>
            <arglist>(std::initializer_list&lt;int&gt; args)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QVersionNumber &amp;lhs, const QVersionNumber &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>operator-lt</anchor>
            <arglist>(const QVersionNumber &amp;lhs, const QVersionNumber &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&lt;=</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>operator-lt-eq</anchor>
            <arglist>(const QVersionNumber &amp;lhs, const QVersionNumber &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QVersionNumber &amp;lhs, const QVersionNumber &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>operator-gt</anchor>
            <arglist>(const QVersionNumber &amp;lhs, const QVersionNumber &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator&gt;=</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>operator-gt-eq</anchor>
            <arglist>(const QVersionNumber &amp;lhs, const QVersionNumber &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>int</type>
            <name>compare</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>compare</anchor>
            <arglist>(const QVersionNumber &amp;v1, const QVersionNumber &amp;v2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QList&lt;int&gt;</type>
            <name>segments</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>segments</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>toString</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>toString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber</type>
            <name>normalized</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>normalized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_iterator</type>
            <name>begin</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>begin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_iterator</type>
            <name>cbegin</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>cbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_iterator</type>
            <name>cend</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>cend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_iterator</type>
            <name>constBegin</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>constBegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_iterator</type>
            <name>constEnd</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>constEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_iterator</type>
            <name>end</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>end</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_reverse_iterator</type>
            <name>crbegin</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>crbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_reverse_iterator</type>
            <name>crend</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>crend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_reverse_iterator</type>
            <name>rbegin</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>rbegin</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVersionNumber::const_reverse_iterator</type>
            <name>rend</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>rend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNormalized</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>isNormalized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isPrefixOf</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>isPrefixOf</anchor>
            <arglist>(const QVersionNumber &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>majorVersion</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>majorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>microVersion</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>microVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>minorVersion</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>minorVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>segmentAt</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>segmentAt</anchor>
            <arglist>(qsizetype index) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qsizetype</type>
            <name>segmentCount</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>segmentCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_iterator</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>const_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_pointer</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>const_pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reference</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>const_reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>const_reverse_iterator</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>const_reverse_iterator-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>difference_type</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>difference_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>pointer</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>pointer-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>reference</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>reference-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>size_type</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>size_type-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>value_type</name>
            <anchorfile>qversionnumber.html</anchorfile>
            <anchor>value_type-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWaitCondition</name>
        <filename>qwaitcondition.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWaitCondition</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>QWaitCondition</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wait</anchor>
            <arglist>(QMutex *lockedMutex, QDeadlineTimer deadline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wait-2</anchor>
            <arglist>(QMutex *lockedMutex, unsigned long time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wait-1</anchor>
            <arglist>(QReadWriteLock *lockedReadWriteLock, QDeadlineTimer deadline)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>wait</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wait-3</anchor>
            <arglist>(QReadWriteLock *lockedReadWriteLock, unsigned long time)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>notify_all</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>notify_all</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>notify_one</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>notify_one</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wakeAll</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wakeAll</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>wakeOne</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>wakeOne</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWaitCondition</name>
            <anchorfile>qwaitcondition.html</anchorfile>
            <anchor>dtor.QWaitCondition</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWeakPointer</name>
        <filename>qweakpointer.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWeakPointer</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>QWeakPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWeakPointer</name>
            <anchorfile>qweakpointer-obsolete.html</anchorfile>
            <anchor>QWeakPointer-1</anchor>
            <arglist>(const QObject *other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWeakPointer</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>QWeakPointer-2</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWeakPointer</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>QWeakPointer-3</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qweakpointer-obsolete.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QObject *other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-eq-1</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;T&gt; &amp;</type>
            <name>operator=</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-eq-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWeakPointer&lt;X&gt;</type>
            <name>qWeakPointerCast</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>qWeakPointerCast</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;src)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;ptr1, const QWeakPointer&lt;X&gt; &amp;ptr2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-not-eq-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-not-eq-1</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;ptr1, const QSharedPointer&lt;X&gt; &amp;ptr2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-not-eq-3</anchor>
            <arglist>(std::nullptr_t, const QWeakPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QSharedPointer&lt;T&gt; &amp;ptr1, const QWeakPointer&lt;X&gt; &amp;ptr2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-eq-eq-2</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;lhs, std::nullptr_t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-eq-eq-1</anchor>
            <arglist>(const QWeakPointer&lt;T&gt; &amp;ptr1, const QSharedPointer&lt;X&gt; &amp;ptr2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-eq-eq-3</anchor>
            <arglist>(std::nullptr_t, const QWeakPointer&lt;T&gt; &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>swap</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>swap</anchor>
            <arglist>(QWeakPointer&lt;T&gt; &amp;other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWeakPointer</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>dtor.QWeakPointer</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>lock</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>lock</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSharedPointer&lt;T&gt;</type>
            <name>toStrongRef</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>toStrongRef</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>T *</type>
            <name>data</name>
            <anchorfile>qweakpointer-obsolete.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNull</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>isNull</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator bool</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-bool</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>operator-not</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>owner_before</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>owner_before</anchor>
            <arglist>(const QSharedPointer&lt;X&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>owner_before</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>owner_before-1</anchor>
            <arglist>(const QWeakPointer&lt;X&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>owner_equal</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>owner_equal</anchor>
            <arglist>(const QSharedPointer&lt;X&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>owner_equal</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>owner_equal-1</anchor>
            <arglist>(const QWeakPointer&lt;X&gt; &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>owner_hash</name>
            <anchorfile>qweakpointer.html</anchorfile>
            <anchor>owner_hash</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWinEventNotifier</name>
        <filename>qwineventnotifier.html</filename>
        <base>QObject</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWinEventNotifier</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>QWinEventNotifier</anchor>
            <arglist>(QObject *parent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWinEventNotifier</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>QWinEventNotifier-1</anchor>
            <arglist>(QWinEventNotifier::HANDLE hEvent, QObject *parent)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>event</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>event</anchor>
            <arglist>(QEvent *e) override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>activated</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>activated</anchor>
            <arglist>(QWinEventNotifier::HANDLE hEvent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEnabled</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>setEnabled</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setHandle</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>setHandle</anchor>
            <arglist>(QWinEventNotifier::HANDLE hEvent)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QWinEventNotifier</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>dtor.QWinEventNotifier</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWinEventNotifier::HANDLE</type>
            <name>handle</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>handle</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEnabled</name>
            <anchorfile>qwineventnotifier.html</anchorfile>
            <anchor>isEnabled</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QWriteLocker</name>
        <filename>qwritelocker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QWriteLocker</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>QWriteLocker</anchor>
            <arglist>(QReadWriteLock *lock)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>relock</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>relock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>unlock</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>unlock</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QWriteLocker</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>dtor.QWriteLocker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QReadWriteLock *</type>
            <name>readWriteLock</name>
            <anchorfile>qwritelocker.html</anchorfile>
            <anchor>readWriteLock</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamAttribute</name>
        <filename>qxmlstreamattribute.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttribute</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>QXmlStreamAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttribute</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>QXmlStreamAttribute-2</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttribute</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>QXmlStreamAttribute-1</anchor>
            <arglist>(const QString &amp;qualifiedName, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlStreamAttribute &amp;lhs, const QXmlStreamAttribute &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlStreamAttribute &amp;lhs, const QXmlStreamAttribute &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>name</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>namespaceUri</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>namespaceUri</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>prefix</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>prefix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>qualifiedName</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>qualifiedName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>value</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDefault</name>
            <anchorfile>qxmlstreamattribute.html</anchorfile>
            <anchor>isDefault</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamAttributes</name>
        <filename>qxmlstreamattributes.html</filename>
        <base>QList</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamAttributes</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>QXmlStreamAttributes</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>append-1</anchor>
            <arglist>(const QString &amp;qualifiedName, const QString &amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>value</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>value</anchor>
            <arglist>(QAnyStringView namespaceUri, QAnyStringView name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>value</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>value-1</anchor>
            <arglist>(QAnyStringView qualifiedName) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>hasAttribute-1</anchor>
            <arglist>(QAnyStringView namespaceUri, QAnyStringView name) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasAttribute</name>
            <anchorfile>qxmlstreamattributes.html</anchorfile>
            <anchor>hasAttribute</anchor>
            <arglist>(QAnyStringView qualifiedName) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamEntityDeclaration</name>
        <filename>qxmlstreamentitydeclaration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamEntityDeclaration</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>QXmlStreamEntityDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlStreamEntityDeclaration &amp;lhs, const QXmlStreamEntityDeclaration &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlStreamEntityDeclaration &amp;lhs, const QXmlStreamEntityDeclaration &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>name</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>notationName</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>notationName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>publicId</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>publicId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>systemId</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>systemId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>value</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>value</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QXmlStreamEntityDeclarations</name>
            <anchorfile>qxmlstreamentitydeclaration.html</anchorfile>
            <anchor>QXmlStreamEntityDeclarations-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamEntityResolver</name>
        <filename>qxmlstreamentityresolver.html</filename>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QString</type>
            <name>resolveUndeclaredEntity</name>
            <anchorfile>qxmlstreamentityresolver.html</anchorfile>
            <anchor>resolveUndeclaredEntity</anchor>
            <arglist>(const QString &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QXmlStreamEntityResolver</name>
            <anchorfile>qxmlstreamentityresolver.html</anchorfile>
            <anchor>dtor.QXmlStreamEntityResolver</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamNamespaceDeclaration</name>
        <filename>qxmlstreamnamespacedeclaration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamNamespaceDeclaration</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>QXmlStreamNamespaceDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamNamespaceDeclaration</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>QXmlStreamNamespaceDeclaration-1</anchor>
            <arglist>(const QString &amp;prefix, const QString &amp;namespaceUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlStreamNamespaceDeclaration &amp;lhs, const QXmlStreamNamespaceDeclaration &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlStreamNamespaceDeclaration &amp;lhs, const QXmlStreamNamespaceDeclaration &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>namespaceUri</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>namespaceUri</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>prefix</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>prefix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QXmlStreamNamespaceDeclarations</name>
            <anchorfile>qxmlstreamnamespacedeclaration.html</anchorfile>
            <anchor>QXmlStreamNamespaceDeclarations-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamNotationDeclaration</name>
        <filename>qxmlstreamnotationdeclaration.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamNotationDeclaration</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>QXmlStreamNotationDeclaration</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(const QXmlStreamNotationDeclaration &amp;lhs, const QXmlStreamNotationDeclaration &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(const QXmlStreamNotationDeclaration &amp;lhs, const QXmlStreamNotationDeclaration &amp;rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>name</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>publicId</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>publicId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>systemId</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>systemId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>QXmlStreamNotationDeclarations</name>
            <anchorfile>qxmlstreamnotationdeclaration.html</anchorfile>
            <anchor>QXmlStreamNotationDeclarations-typedef</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamReader</name>
        <filename>qxmlstreamreader.html</filename>
        <member kind="enumeration">
            <name>Error</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>Error-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UnexpectedElementError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotWellFormedError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PrematureEndOfDocumentError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>Error-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ReadElementTextBehaviour</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>ReadElementTextBehaviour-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ErrorOnUnexpectedElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>ReadElementTextBehaviour-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IncludeChildElements</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>ReadElementTextBehaviour-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SkipChildElements</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>ReadElementTextBehaviour-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TokenType</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoToken</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StartDocument</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EndDocument</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StartElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EndElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Characters</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Comment</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DTD</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EntityReference</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ProcessingInstruction</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>TokenType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>readElementText</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>readElementText</anchor>
            <arglist>(QXmlStreamReader::ReadElementTextBehaviour behaviour)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader-1</anchor>
            <arglist>(QAnyStringView data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>QXmlStreamReader-4</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamReader::TokenType</type>
            <name>readNext</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>readNext</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>readNextStartElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>readNextStartElement</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addData</anchor>
            <arglist>(QAnyStringView data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addData</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addData-1</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addExtraNamespaceDeclaration</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addExtraNamespaceDeclaration</anchor>
            <arglist>(const QXmlStreamNamespaceDeclaration &amp;extraNamespaceDeclaration)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addExtraNamespaceDeclarations</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>addExtraNamespaceDeclarations</anchor>
            <arglist>(const QXmlStreamNamespaceDeclarations &amp;extraNamespaceDeclarations)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>clear</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>clear</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>raiseError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>raiseError</anchor>
            <arglist>(const QString &amp;message)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntityExpansionLimit</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>setEntityExpansionLimit</anchor>
            <arglist>(int limit)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntityResolver</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>setEntityResolver</anchor>
            <arglist>(QXmlStreamEntityResolver *resolver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setNamespaceProcessing</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceProcessing-prop</anchor>
            <arglist>(bool)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>skipCurrentElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>skipCurrentElement</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlStreamReader</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>dtor.QXmlStreamReader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorString</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>errorString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>tokenString</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>tokenString</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>documentEncoding</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>documentEncoding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>documentVersion</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>documentVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>dtdName</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>dtdName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>dtdPublicId</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>dtdPublicId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>dtdSystemId</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>dtdSystemId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>name</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>namespaceUri</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceUri</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>prefix</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>prefix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>processingInstructionData</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>processingInstructionData</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>processingInstructionTarget</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>processingInstructionTarget</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>qualifiedName</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>qualifiedName</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QStringView</type>
            <name>text</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>text</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamAttributes</type>
            <name>attributes</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamEntityDeclarations</type>
            <name>entityDeclarations</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>entityDeclarations</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamEntityResolver *</type>
            <name>entityResolver</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>entityResolver</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamNamespaceDeclarations</type>
            <name>namespaceDeclarations</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceDeclarations</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamNotationDeclarations</type>
            <name>notationDeclarations</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>notationDeclarations</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamReader::Error</type>
            <name>error</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>error</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QXmlStreamReader::TokenType</type>
            <name>tokenType</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>tokenType</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>atEnd</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>atEnd</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasError</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>hasError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasStandaloneDeclaration</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>hasStandaloneDeclaration</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCDATA</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isCDATA</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isCharacters</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isCharacters</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isComment</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isComment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isDTD</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isDTD</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEndDocument</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isEndDocument</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEndElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isEndElement</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isEntityReference</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isEntityReference</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isProcessingInstruction</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isProcessingInstruction</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStandaloneDocument</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isStandaloneDocument</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStartDocument</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isStartDocument</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isStartElement</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isStartElement</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isWhitespace</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>isWhitespace</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>namespaceProcessing</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceProcessing-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>entityExpansionLimit</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>entityExpansionLimit</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>characterOffset</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>characterOffset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>columnNumber</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>columnNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>lineNumber</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>lineNumber</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="bool">
            <name>namespaceProcessing</name>
            <anchorfile>qxmlstreamreader.html</anchorfile>
            <anchor>namespaceProcessing-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QXmlStreamWriter</name>
        <filename>qxmlstreamwriter.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>QXmlStreamWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>QXmlStreamWriter-1</anchor>
            <arglist>(QByteArray *array)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>QXmlStreamWriter-2</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>QXmlStreamWriter-3</anchor>
            <arglist>(QString *string)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoFormatting</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>setAutoFormatting</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAutoFormattingIndent</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormattingIndent-prop</anchor>
            <arglist>(int spacesOrTabs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeAttribute</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeAttribute</anchor>
            <arglist>(QAnyStringView namespaceUri, QAnyStringView name, QAnyStringView value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeAttribute</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeAttribute-2</anchor>
            <arglist>(QAnyStringView qualifiedName, QAnyStringView value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeAttribute</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeAttribute-1</anchor>
            <arglist>(const QXmlStreamAttribute &amp;attribute)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeAttributes</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeAttributes</anchor>
            <arglist>(const QXmlStreamAttributes &amp;attributes)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeCDATA</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeCDATA</anchor>
            <arglist>(QAnyStringView text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeCharacters</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeCharacters</anchor>
            <arglist>(QAnyStringView text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeComment</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeComment</anchor>
            <arglist>(QAnyStringView text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeCurrentToken</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeCurrentToken</anchor>
            <arglist>(const QXmlStreamReader &amp;reader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeDTD</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeDTD</anchor>
            <arglist>(QAnyStringView dtd)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeDefaultNamespace</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeDefaultNamespace</anchor>
            <arglist>(QAnyStringView namespaceUri)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEmptyElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEmptyElement</anchor>
            <arglist>(QAnyStringView namespaceUri, QAnyStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEmptyElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEmptyElement-1</anchor>
            <arglist>(QAnyStringView qualifiedName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEndDocument</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEndDocument</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEndElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEndElement</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeEntityReference</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeEntityReference</anchor>
            <arglist>(QAnyStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeNamespace</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeNamespace</anchor>
            <arglist>(QAnyStringView namespaceUri, QAnyStringView prefix)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeProcessingInstruction</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeProcessingInstruction</anchor>
            <arglist>(QAnyStringView target, QAnyStringView data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartDocument</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartDocument-2</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartDocument</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartDocument</anchor>
            <arglist>(QAnyStringView version)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartDocument</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartDocument-1</anchor>
            <arglist>(QAnyStringView version, bool standalone)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartElement</anchor>
            <arglist>(QAnyStringView namespaceUri, QAnyStringView name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeStartElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeStartElement-1</anchor>
            <arglist>(QAnyStringView qualifiedName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeTextElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeTextElement</anchor>
            <arglist>(QAnyStringView namespaceUri, QAnyStringView name, QAnyStringView text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>writeTextElement</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>writeTextElement-1</anchor>
            <arglist>(QAnyStringView qualifiedName, QAnyStringView text)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QXmlStreamWriter</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>dtor.QXmlStreamWriter</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QIODevice *</type>
            <name>device</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>device</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>autoFormatting</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormatting</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasError</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>hasError</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>autoFormattingIndent</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormattingIndent-prop</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="property" type="bool">
            <name>autoFormatting</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormatting-prop</anchor>
            <arglist></arglist>
        </member>
        <member kind="property" type="int">
            <name>autoFormattingIndent</name>
            <anchorfile>qxmlstreamwriter.html</anchorfile>
            <anchor>autoFormattingIndent-prop</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt</name>
        <filename>qt.html</filename>
        <namespace>Qt::Literals</namespace>
        <class>Qt::partial_ordering</class>
        <class>Qt::strong_ordering</class>
        <class>Qt::totally_ordered_wrapper</class>
        <class>Qt::weak_ordering</class>
        <member kind="enumeration">
            <name>AlignmentFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AlignLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignLeading</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignTrailing</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignHCenter</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignJustify</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignAbsolute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignHorizontal_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignTop</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignBottom</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignVCenter</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignBaseline</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignVertical_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlignCenter</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AnchorPoint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AnchorPoint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AnchorLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchorHorizontalCenter</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchorRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchorTop</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchorVerticalCenter</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AnchorBottom</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AnchorPoint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ApplicationAttribute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AA_QtQuickUseDefaultSizePolicy</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DontShowIconsInMenus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_NativeWindows</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DontCreateNativeWidgetSiblings</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_PluginApplication</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DontUseNativeMenuBar</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_MacDontSwapCtrlAndMeta</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_Use96Dpi</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DisableNativeVirtualKeyboard</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DontUseNativeMenuWindows</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_SynthesizeTouchForUnhandledMouseEvents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_SynthesizeMouseForUnhandledTouchEvents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_UseHighDpiPixmaps</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_ForceRasterWidgets</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_UseDesktopOpenGL</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_UseOpenGLES</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_UseSoftwareOpenGL</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_ShareOpenGLContexts</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_SetPalette</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_EnableHighDpiScaling</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DisableHighDpiScaling</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_UseStyleSheetPropagationInWidgetStyles</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DontUseNativeDialogs</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_SynthesizeMouseForUnhandledTabletEvents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_CompressHighFrequencyEvents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DontCheckOpenGLContextThreadAffinity</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DisableShaderDiskCache</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DontShowShortcutsInContextMenus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_CompressTabletEvents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_DisableSessionManager</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AA_AttributeCount</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ApplicationState</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ApplicationSuspended</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationHidden</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationInactive</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationActive</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ArrowType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ArrowType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoArrow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UpArrow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DownArrow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LeftArrow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightArrow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ArrowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>AspectRatioMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AspectRatioMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>IgnoreAspectRatio</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AspectRatioMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeepAspectRatio</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AspectRatioMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeepAspectRatioByExpanding</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AspectRatioMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Axis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Axis-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>XAxis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>YAxis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZAxis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Axis-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BGMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BGMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TransparentMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BGMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpaqueMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BGMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>BrushStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoBrush</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SolidPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dense1Pattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dense2Pattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dense3Pattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dense4Pattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dense5Pattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dense6Pattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dense7Pattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>HorPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VerPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CrossPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BDiagPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FDiagPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiagCrossPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinearGradientPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RadialGradientPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ConicalGradientPattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TexturePattern</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>BrushStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CaseSensitivity</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CaseSensitivity-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CaseInsensitive</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CaseSensitivity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CaseSensitive</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CaseSensitivity-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CheckState</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CheckState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Unchecked</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CheckState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PartiallyChecked</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CheckState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Checked</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CheckState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ChecksumType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ChecksumType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ChecksumIso3309</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ChecksumType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ChecksumItuV41</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ChecksumType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ClipOperation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ClipOperation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoClip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ClipOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReplaceClip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ClipOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IntersectClip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ClipOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ColorScheme</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ColorScheme-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Unknown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ColorScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Light</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ColorScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dark</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ColorScheme-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ConnectionType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ConnectionType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AutoConnection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DirectConnection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>QueuedConnection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlockingQueuedConnection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UniqueConnection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SingleShotConnection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ConnectionType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ContextMenuPolicy</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoContextMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DefaultContextMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActionsContextMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomContextMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreventContextMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ContextMenuTrigger</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuTrigger-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Press</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Release</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ContextMenuTrigger-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CoordinateSystem</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CoordinateSystem-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DeviceCoordinates</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CoordinateSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LogicalCoordinates</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CoordinateSystem-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Corner</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Corner-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TopLeftCorner</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TopRightCorner</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomLeftCorner</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomRightCorner</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Corner-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CursorMoveStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorMoveStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LogicalMoveStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorMoveStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VisualMoveStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorMoveStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>CursorShape</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ArrowCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UpArrowCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CrossCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WaitCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IBeamCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeVerCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeHorCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeBDiagCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeFDiagCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeAllCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BlankCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SplitVCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SplitHCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PointingHandCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForbiddenCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhatsThisCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BusyCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OpenHandCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClosedHandCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragCopyCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragMoveCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DragLinkCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BitmapCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>CursorShape-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DateFormat</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DateFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TextDate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISODate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RFC2822Date</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ISODateWithMs</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DateFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DayOfWeek</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DayOfWeek-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Monday</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tuesday</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Wednesday</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Thursday</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Friday</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Saturday</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sunday</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DayOfWeek-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DockWidgetArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LeftDockWidgetArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightDockWidgetArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TopDockWidgetArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomDockWidgetArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DockWidgetArea_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllDockWidgetAreas</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoDockWidgetArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>DropAction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>CopyAction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MoveAction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinkAction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActionMask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TargetMoveAction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IgnoreAction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Edge</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Edge-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TopEdge</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LeftEdge</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightEdge</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomEdge</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>EnterKeyType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>EnterKeyDefault</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterKeyReturn</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterKeyDone</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterKeyGo</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterKeySend</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterKeySearch</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterKeyNext</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EnterKeyPrevious</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EnterKeyType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>EventPriority</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EventPriority-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>HighEventPriority</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NormalEventPriority</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LowEventPriority</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>EventPriority-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FillRule</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FillRule-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>OddEvenFill</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FillRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindingFill</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FillRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FindChildOption</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FindChildOption-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FindDirectChildrenOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FindChildOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FindChildrenRecursively</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FindChildOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FocusPolicy</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ClickFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StrongFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WheelFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>FocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MouseFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BacktabFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ActiveWindowFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PopupFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShortcutFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MenuBarFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OtherFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoFocusReason</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FocusReason-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>GestureFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DontStartGestureOnChildren</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ReceivePartialGestures</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IgnoredGesturesPropagateToParent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>GestureState</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GestureStarted</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GestureUpdated</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GestureFinished</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GestureCanceled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>GestureType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TapGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TapAndHoldGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PanGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PinchGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwipeGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LastGestureType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>GlobalColor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>color0</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>color1</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>black</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>white</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>darkGray</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>gray</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>lightGray</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>red</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>green</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>blue</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>cyan</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>magenta</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>yellow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>darkRed</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>darkGreen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>darkBlue</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>darkCyan</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>darkMagenta</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>darkYellow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>transparent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GlobalColor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>HighDpiScaleFactorRoundingPolicy</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HighDpiScaleFactorRoundingPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Unset</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HighDpiScaleFactorRoundingPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Round</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HighDpiScaleFactorRoundingPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Ceil</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HighDpiScaleFactorRoundingPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Floor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HighDpiScaleFactorRoundingPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RoundPreferFloor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HighDpiScaleFactorRoundingPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PassThrough</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HighDpiScaleFactorRoundingPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>HitTestAccuracy</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HitTestAccuracy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ExactHit</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HitTestAccuracy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FuzzyHit</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HitTestAccuracy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ImageConversionFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ColorMode_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AutoColor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ColorOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MonoOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AlphaDither_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ThresholdAlphaDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OrderedAlphaDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiffuseAlphaDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoAlpha</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dither_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DiffuseDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OrderedDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ThresholdDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DitherMode_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AutoDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AvoidDither</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoOpaqueDetection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoFormatConversion</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>InputMethodHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ImhNone</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhHiddenText</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhSensitiveData</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhNoAutoUppercase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhPreferNumbers</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhPreferUppercase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhPreferLowercase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhNoPredictiveText</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhDate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhTime</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhPreferLatin</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhMultiLine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhNoEditMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhNoTextHandles</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhDigitsOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhFormattedNumbersOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhUppercaseOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhLowercaseOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhDialableCharactersOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhEmailCharactersOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhUrlCharactersOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhLatinOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImhExclusiveInputMask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>InputMethodQuery</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ImEnabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImCursorRectangle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImFont</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImCursorPosition</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImSurroundingText</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImCurrentSelection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImMaximumTextLength</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImAnchorPosition</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImHints</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImPreferredLanguage</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImAbsolutePosition</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImTextBeforeCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImTextAfterCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImEnterKeyType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImAnchorRectangle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImInputItemClipRectangle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImReadOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImPlatformData</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImQueryInput</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ImQueryAll</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ItemDataRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>DisplayRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DecorationRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EditRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolTipRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StatusTipRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhatsThisRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FontRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextAlignmentRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackgroundRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForegroundRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CheckStateRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AccessibleTextRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AccessibleDescriptionRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SizeHintRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InitialSortOrderRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DisplayPropertyRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DecorationPropertyRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolTipPropertyRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>StatusTipPropertyRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhatsThisPropertyRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UserRole</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemDataRole-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ItemFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoItemFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsSelectable</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsEditable</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsDragEnabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsDropEnabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsUserCheckable</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsEnabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsAutoTristate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemNeverHasChildren</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ItemIsUserTristate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ItemSelectionMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemSelectionMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ContainsItemShape</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IntersectsItemShape</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ContainsItemBoundingRect</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>IntersectsItemBoundingRect</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemSelectionMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ItemSelectionOperation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemSelectionOperation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReplaceSelection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemSelectionOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AddToSelection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemSelectionOperation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Key</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Key_Space</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Any</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Exclam</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_QuoteDbl</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_NumberSign</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dollar</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Percent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ampersand</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Apostrophe</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ParenLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ParenRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Asterisk</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Plus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Comma</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Minus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Period</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Slash</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_0</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_1</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_2</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_3</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_4</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_5</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_6</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_7</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_8</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_9</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Colon</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Semicolon</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Less</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Equal</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Greater</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Question</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_At</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_A</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_B</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_C</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_D</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_E</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_G</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_H</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_I</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_J</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_K</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_L</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_M</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_N</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_O</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_P</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Q</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_R</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_S</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_T</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_U</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_V</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_W</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_X</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Y</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Z</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BracketLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Backslash</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BracketRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AsciiCircum</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Underscore</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_QuoteLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BraceLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Bar</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BraceRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AsciiTilde</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_nobreakspace</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_exclamdown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_cent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_sterling</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_currency</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_yen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_brokenbar</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_section</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_diaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_copyright</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ordfeminine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_guillemotleft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_notsign</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_hyphen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_registered</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_macron</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_degree</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_plusminus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_twosuperior</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_threesuperior</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_acute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_micro</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_mu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_paragraph</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_periodcentered</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_cedilla</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_onesuperior</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_masculine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_guillemotright</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_onequarter</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_onehalf</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_threequarters</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_questiondown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Agrave</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Aacute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Acircumflex</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Atilde</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Adiaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Aring</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AE</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ccedilla</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Egrave</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Eacute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ecircumflex</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ediaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Igrave</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Iacute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Icircumflex</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Idiaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ETH</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ntilde</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ograve</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Oacute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ocircumflex</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Otilde</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Odiaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_multiply</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ooblique</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ugrave</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Uacute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Ucircumflex</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Udiaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Yacute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_THORN</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ssharp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_division</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ydiaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Escape</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Tab</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Backtab</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Backspace</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Return</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Enter</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Insert</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Delete</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Pause</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Print</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_SysReq</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Clear</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Home</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_End</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Left</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Up</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Right</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Down</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_PageUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_PageDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Shift</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Control</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Meta</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Alt</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_CapsLock</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_NumLock</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ScrollLock</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F1</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F2</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F3</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F4</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F5</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F6</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F7</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F8</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F9</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F10</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F11</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F12</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F13</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F14</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F15</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F16</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F17</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F18</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F19</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F20</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F21</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F22</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F23</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F24</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F25</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F26</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F27</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F28</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F29</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F30</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F31</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F32</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F33</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F34</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_F35</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Super_L</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Super_R</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Menu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hyper_L</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hyper_R</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Help</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Direction_L</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Direction_R</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AltGr</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Multi_key</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Codeinput</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_SingleCandidate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MultipleCandidate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_PreviousCandidate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Mode_switch</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Kanji</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Muhenkan</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Henkan</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Romaji</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hiragana</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Katakana</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hiragana_Katakana</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Zenkaku</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hankaku</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Zenkaku_Hankaku</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Touroku</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Massyo</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Kana_Lock</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Kana_Shift</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Eisu_Shift</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Eisu_toggle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_Start</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_End</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_Hanja</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_Jamo</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_Romaja</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_Jeonja</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_Banja</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_PreHanja</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_PostHanja</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangul_Special</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Grave</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Acute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Circumflex</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Tilde</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Macron</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Breve</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Abovedot</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Diaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Abovering</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Doubleacute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Caron</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Cedilla</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Ogonek</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Iota</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Voiced_Sound</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Semivoiced_Sound</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowdot</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Hook</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Horn</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Stroke</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Abovecomma</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Abovereversedcomma</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Doublegrave</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowring</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowmacron</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowcircumflex</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowtilde</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowbreve</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowdiaeresis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Invertedbreve</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowcomma</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Currency</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_a</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_A</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_e</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_E</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_i</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_I</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_o</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_O</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_u</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_U</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Small_Schwa</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Capital_Schwa</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Greek</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Lowline</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Aboveverticalline</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Belowverticalline</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Dead_Longsolidusoverlay</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Back</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Forward</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Stop</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Refresh</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_VolumeDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_VolumeMute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_VolumeUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BassBoost</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BassUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BassDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_TrebleUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_TrebleDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MediaPlay</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MediaStop</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MediaPrevious</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MediaNext</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MediaRecord</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MediaPause</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MediaTogglePlayPause</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_HomePage</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Favorites</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Search</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Standby</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_OpenUrl</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchMail</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchMedia</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch0</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch1</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch2</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch3</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch4</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch5</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch6</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch7</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch8</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Launch9</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchA</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchB</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchC</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchD</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchE</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchF</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MonBrightnessUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MonBrightnessDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_KeyboardLightOnOff</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_KeyboardBrightnessUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_KeyboardBrightnessDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_PowerOff</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_WakeUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Eject</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ScreenSaver</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_WWW</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Memo</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LightBulb</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Shop</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_History</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AddFavorite</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_HotLinks</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BrightnessAdjust</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Finance</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Community</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AudioRewind</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_BackForward</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ApplicationLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ApplicationRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Book</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_CD</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Calculator</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ToDoList</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ClearGrab</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Close</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Copy</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Cut</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Display</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_DOS</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Documents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Excel</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Explorer</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Game</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Go</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_iTouch</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LogOff</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Market</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Meeting</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MenuKB</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MenuPB</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MySites</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_News</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_OfficeHome</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Option</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Paste</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Phone</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Calendar</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Reply</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Reload</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_RotateWindows</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_RotationPB</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_RotationKB</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Save</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Send</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Spell</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_SplitScreen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Support</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_TaskPane</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Terminal</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Tools</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Travel</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Video</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Word</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Xfer</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ZoomIn</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ZoomOut</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Away</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Messenger</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_WebCam</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MailForward</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Pictures</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Music</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Battery</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Bluetooth</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_WLAN</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_UWB</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AudioForward</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AudioRepeat</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AudioRandomPlay</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Subtitle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_AudioCycleTrack</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Time</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hibernate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_View</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_TopMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_PowerDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Suspend</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ContrastAdjust</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchG</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LaunchH</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_TouchpadToggle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_TouchpadOn</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_TouchpadOff</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MicMute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Red</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Green</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Yellow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Blue</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ChannelUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ChannelDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Guide</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Info</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Settings</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MicVolumeUp</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MicVolumeDown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_New</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Open</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Find</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Undo</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Redo</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_MediaLast</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Select</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Yes</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_No</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Cancel</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Printer</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Execute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Sleep</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Play</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Zoom</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Exit</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Context1</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Context2</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Context3</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Context4</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Call</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Hangup</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Flip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_ToggleCallHangup</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_VoiceDial</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_LastNumberRedial</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_Camera</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_CameraFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Key_unknown</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Key-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>KeyboardModifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoModifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ShiftModifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ControlModifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AltModifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MetaModifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeypadModifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>GroupSwitchModifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>KeyboardModifierMask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>LayoutDirection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>LayoutDirection-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LeftToRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>LayoutDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightToLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>LayoutDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LayoutDirectionAuto</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>LayoutDirection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MaskMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MaskMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MaskInColor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MaskMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaskOutColor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MaskMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MatchFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MatchExactly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchContains</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchStartsWith</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchEndsWith</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchRegularExpression</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchWildcard</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchFixedString</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchTypeMask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchCaseSensitive</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchWrap</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MatchRecursive</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Modifier</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Modifier-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>META</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SHIFT</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CTRL</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ALT</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MODIFIER_MASK</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MouseButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LeftButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MiddleButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BackButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>XButton1</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton1</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForwardButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>XButton2</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton2</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TaskButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton3</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton4</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton5</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton6</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton7</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton8</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton9</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton10</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton11</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton12</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton13</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton14</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton15</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton16</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton17</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton18</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton19</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton20</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton21</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton22</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton23</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExtraButton24</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllButtons</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaxMouseButton</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseButtonMask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MouseEventFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoMouseEventFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseEventCreatedDoubleClick</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseEventFlagMask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>MouseEventSource</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventSource-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MouseEventNotSynthesized</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventSource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseEventSynthesizedBySystem</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventSource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseEventSynthesizedByQt</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventSource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MouseEventSynthesizedByApplication</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventSource-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NativeGestureType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NativeGestureType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>BeginNativeGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>EndNativeGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PanNativeGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ZoomNativeGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SmartZoomNativeGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RotateNativeGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SwipeNativeGesture</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NativeGestureType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>NavigationMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NavigationMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NavigationModeNone</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NavigationModeKeypadTabOrder</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NavigationModeKeypadDirectional</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NavigationModeCursorAuto</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NavigationModeCursorForceVisible</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>NavigationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>Orientation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Orientation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Horizontal</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Vertical</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PenCapStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenCapStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FlatCap</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SquareCap</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RoundCap</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MPenCapStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenCapStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PenJoinStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenJoinStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MiterJoin</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BevelJoin</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RoundJoin</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SvgMiterJoin</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MPenJoinStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenJoinStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PenStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoPen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SolidLine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DashLine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DotLine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DashDotLine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DashDotDotLine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomDashLine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MPenStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PenStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>PermissionStatus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PermissionStatus-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Undetermined</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PermissionStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Granted</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PermissionStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Denied</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>PermissionStatus-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ReturnByValueConstant</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ReturnByValueConstant-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ReturnByValue</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ReturnByValueConstant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ScreenOrientation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScreenOrientation-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PrimaryOrientation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PortraitOrientation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LandscapeOrientation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvertedPortraitOrientation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>InvertedLandscapeOrientation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ScrollBarPolicy</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollBarPolicy-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ScrollBarAsNeeded</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollBarPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollBarAlwaysOff</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollBarPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollBarAlwaysOn</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollBarPolicy-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ScrollPhase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollPhase-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoScrollPhase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollBegin</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollUpdate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollEnd</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ScrollMomentum</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScrollPhase-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ShortcutContext</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ShortcutContext-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WidgetShortcut</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowShortcut</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationShortcut</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WidgetWithChildrenShortcut</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ShortcutContext-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SizeHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeHint-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>MinimumSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>PreferredSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaximumSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MinimumDescent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NSizeHints</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SizeMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AbsoluteSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RelativeSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SizeMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SortOrder</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SortOrder-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>AscendingOrder</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SortOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DescendingOrder</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SortOrder-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>SplitBehaviorFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SplitBehaviorFlags-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>KeepEmptyParts</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SplitBehaviorFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SkipEmptyParts</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SplitBehaviorFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TabFocusBehavior</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TabFocusBehavior-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoTabFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabFocusTextControls</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabFocusListControls</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TabFocusAllControls</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TabFocusBehavior-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextElideMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextElideMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ElideLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ElideRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ElideMiddle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ElideNone</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextElideMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TextSingleLine</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextDontClip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextExpandTabs</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextShowMnemonic</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextWordWrap</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextWrapAnywhere</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextDontPrint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextIncludeTrailingSpaces</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextHideMnemonic</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextJustificationForced</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextForceLeftToRight</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextForceRightToLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextLongestVariant</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextFormat</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFormat-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PlainText</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RichText</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AutoText</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MarkdownText</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TextInteractionFlag</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoTextInteraction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextSelectableByMouse</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextSelectableByKeyboard</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinksAccessibleByMouse</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LinksAccessibleByKeyboard</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextEditable</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextEditorInteraction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TextBrowserInteraction</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TileRule</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TileRule-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>StretchTile</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TileRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RepeatTile</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TileRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RoundTile</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TileRule-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TimeSpec</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimeSpec-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LocalTime</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UTC</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>OffsetFromUTC</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TimeZone</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimeSpec-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TimerId</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>TimerId-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Invalid</name>
            <anchorfile>qobject.html</anchorfile>
            <anchor>TimerId-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TimerType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimerType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>PreciseTimer</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CoarseTimer</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>VeryCoarseTimer</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TimerType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ToolBarArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>LeftToolBarArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightToolBarArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TopToolBarArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomToolBarArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolBarArea_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllToolBarAreas</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoToolBarArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>ToolButtonStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolButtonStyle-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>ToolButtonIconOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolButtonTextOnly</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolButtonTextBesideIcon</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolButtonTextUnderIcon</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolButtonFollowStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolButtonStyle-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TouchPointState</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TouchPointState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>TouchPointUnknownState</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchPointPressed</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchPointMoved</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchPointStationary</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TouchPointReleased</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>TransformationMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TransformationMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>FastTransformation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TransformationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SmoothTransformation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TransformationMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>UIEffect</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>UIEffect-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>UI_General</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UI_AnimateMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UI_FadeMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UI_AnimateCombo</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UI_AnimateTooltip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UI_FadeTooltip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>UI_AnimateToolBox</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>UIEffect-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WhiteSpaceMode</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WhiteSpaceMode-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WhiteSpaceNormal</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhiteSpacePre</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhiteSpaceNoWrap</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WhiteSpaceModeUndefined</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WhiteSpaceMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WidgetAttribute</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WA_Disabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_UnderMouse</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_MouseTracking</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_OpaquePaintEvent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_StaticContents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_LaidOut</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_PaintOnScreen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_NoSystemBackground</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_UpdatesDisabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_Mapped</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_InputMethodEnabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_Visible</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_Hidden</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_ForceDisabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_KeyCompression</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_PendingMoveEvent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_PendingResizeEvent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_SetPalette</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_SetFont</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_SetCursor</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_NoChildEventsFromChildren</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WindowModified</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_Resized</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_Moved</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_PendingUpdate</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_InvalidSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_CustomWhatsThis</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_LayoutOnEntireRect</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_OutsideWSRange</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_GrabbedShortcut</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_TransparentForMouseEvents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_PaintUnclipped</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_SetWindowIcon</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_NoMouseReplay</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_DeleteOnClose</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_RightToLeft</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_SetLayoutDirection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_NoChildEventsForParent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_ForceUpdatesDisabled</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_Created</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_CompressKeys</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_InPaintEvent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_Reparented</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_ConfigPending</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_Polished</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_OwnSizePolicy</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_ExplicitShowHide</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_ShowModal</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_MouseNoMask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_NoMousePropagation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_Hover</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_InputMethodTransparent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_QuitOnClose</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_KeyboardFocusChange</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_AcceptDrops</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_DropSiteRegistered</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WindowPropagation</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_NoX11EventCompression</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_TintedBackground</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11OpenGLOverlay</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_AlwaysShowToolTips</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_MacOpaqueSizeGrip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_SetStyle</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_SetLocale</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_MacShowFocusRect</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_MacNormalSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_MacSmallSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_MacMiniSize</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_LayoutUsesWidgetRect</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_StyledBackground</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_CanHostQMdiSubWindowTitleBar</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_MacAlwaysShowToolWindow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_StyleSheet</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_ShowWithoutActivating</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11BypassTransientForHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_NativeWindow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_DontCreateNativeAncestors</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_DontShowOnScreen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeDesktop</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeDock</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeToolBar</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeUtility</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeSplash</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeDialog</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeDropDownMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypePopupMenu</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeToolTip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeNotification</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeCombo</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11NetWmWindowTypeDND</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_SetWindowModality</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_WindowOpacitySet</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_TranslucentBackground</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_AcceptTouchEvents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_WState_AcceptedTouchBeginEvent</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_TouchPadAcceptSingleTouchEvents</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_X11DoNotAcceptFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_AlwaysStackOnTop</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_TabletTracking</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_ContentsMarginsRespectsSafeArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_StyleSheetTarget</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WA_AttributeCount</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WidgetAttribute-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WindowFrameSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NoSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>LeftSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TopLeftSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TopSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TopRightSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>RightSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomRightSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BottomLeftSection</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>TitleBarArea</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowFrameSection-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WindowModality</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowModality-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>NonModal</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowModal</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ApplicationModal</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowModality-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WindowState</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowState-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>WindowNoState</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowMinimized</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowMaximized</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowFullScreen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowActive</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumeration">
            <name>WindowType</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Widget</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Window</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Dialog</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Sheet</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Drawer</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Popup</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Tool</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ToolTip</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SplashScreen</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Desktop</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>SubWindow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ForeignWindow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CoverWindow</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowType_Mask</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MSWindowsFixedSizeDialogHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MSWindowsOwnDC</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BypassWindowManagerHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>X11BypassWindowManagerHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>FramelessWindowHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowTitleHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowSystemMenuHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowMinimizeButtonHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowMaximizeButtonHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowMinMaxButtonsHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowContextHelpButtonHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowShadeButtonHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowStaysOnTopHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowTransparentForInput</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowOverridesSystemGestures</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowDoesNotAcceptFocus</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MaximizeUsingFullscreenGeometryHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExpandedClientAreaHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoTitleBarBackgroundHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>CustomizeWindowHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowStaysOnBottomHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowCloseButtonHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>MacWindowToolBarButtonHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>BypassGraphicsProxyWidget</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NoDropShadowWindowHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WindowFullscreenButtonHint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b</anchor>
            <arglist>(Qt::Key key, Qt::KeyboardModifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-1</anchor>
            <arglist>(Qt::Key key, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-2</anchor>
            <arglist>(Qt::Key key, Qt::Modifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-3</anchor>
            <arglist>(Qt::Key key, Qt::Modifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-4</anchor>
            <arglist>(Qt::KeyboardModifier modifier, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-5</anchor>
            <arglist>(Qt::KeyboardModifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-6</anchor>
            <arglist>(Qt::Modifier modifier, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator+</name>
            <anchorfile>qkeycombination-obsolete.html</anchorfile>
            <anchor>operator-2b-7</anchor>
            <arglist>(Qt::Modifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c</anchor>
            <arglist>(Qt::Key key, Qt::KeyboardModifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-1</anchor>
            <arglist>(Qt::Key key, Qt::KeyboardModifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-2</anchor>
            <arglist>(Qt::Key key, Qt::Modifier modifier)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-3</anchor>
            <arglist>(Qt::Key key, Qt::Modifiers modifiers)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-4</anchor>
            <arglist>(Qt::KeyboardModifier modifier, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-5</anchor>
            <arglist>(Qt::KeyboardModifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-6</anchor>
            <arglist>(Qt::Modifier modifier, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QKeyCombination</type>
            <name>operator|</name>
            <anchorfile>qkeycombination.html</anchorfile>
            <anchor>operator-7c-7</anchor>
            <arglist>(Qt::Modifiers modifiers, Qt::Key key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>bin</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>bin</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>bom</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>bom</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>center</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>center</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>dec</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>dec</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>endl</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>endl</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>fixed</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>fixed</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>flush</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>flush</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>forcepoint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>forcepoint</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>forcesign</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>forcesign</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>hex</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>hex</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>left</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>left</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>lowercasebase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>lowercasebase</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>lowercasedigits</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>lowercasedigits</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>noforcepoint</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>noforcepoint</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>noforcesign</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>noforcesign</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>noshowbase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>noshowbase</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>oct</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>oct</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>reset</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>reset</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>right</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>right</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>scientific</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>scientific</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>showbase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>showbase</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>uppercasebase</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>uppercasebase</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>uppercasedigits</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>uppercasedigits</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QTextStream &amp;</type>
            <name>ws</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ws</anchor>
            <arglist>(QTextStream &amp;stream)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::partial_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-1</anchor>
            <arglist>(FloatType lhs, IntType rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::partial_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-2</anchor>
            <arglist>(IntType lhs, FloatType rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::partial_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-3</anchor>
            <arglist>(LeftFloat lhs, RightFloat rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::strong_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay</anchor>
            <arglist>(Enum lhs, Enum rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::strong_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-4</anchor>
            <arglist>(LeftInt lhs, RightInt rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::strong_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-5</anchor>
            <arglist>(Qt::totally_ordered_wrapper&lt;T *&gt; lhs, Qt::totally_ordered_wrapper&lt;U *&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::strong_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-6</anchor>
            <arglist>(Qt::totally_ordered_wrapper&lt;T *&gt; lhs, U *rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::strong_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-7</anchor>
            <arglist>(Qt::totally_ordered_wrapper&lt;T *&gt; lhs, std::nullptr_t rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::strong_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-8</anchor>
            <arglist>(U *lhs, Qt::totally_ordered_wrapper&lt;T *&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::strong_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare-obsolete.html</anchorfile>
            <anchor>compareThreeWay-9</anchor>
            <arglist>(const LeftType *lhs, const RightType *rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::strong_ordering</type>
            <name>compareThreeWay</name>
            <anchorfile>qtcompare.html</anchorfile>
            <anchor>compareThreeWay-10</anchor>
            <arglist>(std::nullptr_t lhs, Qt::totally_ordered_wrapper&lt;T *&gt; rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginPropertyUpdateGroup</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>beginPropertyUpdateGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endPropertyUpdateGroup</name>
            <anchorfile>qproperty.html</anchorfile>
            <anchor>endPropertyUpdateGroup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="typedef" type="Qt::AlignmentFlag">
            <name>Alignment</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>AlignmentFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ApplicationState">
            <name>ApplicationStates</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ApplicationState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::DockWidgetArea">
            <name>DockWidgetAreas</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DockWidgetArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::DropAction">
            <name>DropActions</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>DropAction-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::Edge">
            <name>Edges</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Edge-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::FindChildOption">
            <name>FindChildOptions</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>FindChildOption-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::GestureFlag">
            <name>GestureFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>GestureFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="">
            <name>HANDLE</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>HANDLE-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ImageConversionFlag">
            <name>ImageConversionFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ImageConversionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::InputMethodHint">
            <name>InputMethodHints</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodHint-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::InputMethodQuery">
            <name>InputMethodQueries</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>InputMethodQuery-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ItemFlag">
            <name>ItemFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ItemFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::KeyboardModifier">
            <name>KeyboardModifiers</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>KeyboardModifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::MatchFlag">
            <name>MatchFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MatchFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::Modifier">
            <name>Modifiers</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Modifier-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::MouseButton">
            <name>MouseButtons</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseButton-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::MouseEventFlag">
            <name>MouseEventFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>MouseEventFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::Orientation">
            <name>Orientations</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>Orientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ScreenOrientation">
            <name>ScreenOrientations</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ScreenOrientation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::SplitBehaviorFlags">
            <name>SplitBehavior</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>SplitBehaviorFlags-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::TextInteractionFlag">
            <name>TextInteractionFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TextInteractionFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::ToolBarArea">
            <name>ToolBarAreas</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>ToolBarArea-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::TouchPointState">
            <name>TouchPointStates</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>TouchPointState-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::WindowType">
            <name>WindowFlags</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="Qt::WindowState">
            <name>WindowStates</name>
            <anchorfile>qt.html</anchorfile>
            <anchor>WindowState-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>Qt::Literals</name>
        <filename>qt-literals.html</filename>
        <namespace>Qt::Literals::StringLiterals</namespace>
    </compound>
    <compound kind="namespace">
        <name>Qt::Literals::StringLiterals</name>
        <filename>qt-literals-stringliterals.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator&quot;&quot;_ba</name>
            <anchorfile>qbytearray.html</anchorfile>
            <anchor>operator-22-22_ba</anchor>
            <arglist>(const char *str, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1Char</type>
            <name>operator&quot;&quot;_L1</name>
            <anchorfile>qlatin1char.html</anchorfile>
            <anchor>operator-22-22_L1</anchor>
            <arglist>(char ch)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QLatin1StringView</type>
            <name>operator&quot;&quot;_L1</name>
            <anchorfile>qlatin1stringview.html</anchorfile>
            <anchor>operator-22-22_L1-1</anchor>
            <arglist>(const char *str, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator&quot;&quot;_s</name>
            <anchorfile>qstring.html</anchorfile>
            <anchor>operator-22-22_s</anchor>
            <arglist>(const char16_t *str, size_t size)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt::partial_ordering</name>
        <filename>qt-partial-ordering.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_eq</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>is_eq</anchor>
            <arglist>(Qt::partial_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_gt</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>is_gt</anchor>
            <arglist>(Qt::partial_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_gteq</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>is_gteq</anchor>
            <arglist>(Qt::partial_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_lt</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>is_lt</anchor>
            <arglist>(Qt::partial_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_lteq</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>is_lteq</anchor>
            <arglist>(Qt::partial_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_neq</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>is_neq</anchor>
            <arglist>(Qt::partial_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(Qt::partial_ordering lhs, Qt::partial_ordering rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(Qt::partial_ordering lhs, Qt::partial_ordering rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>partial_ordering</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>partial_ordering</anchor>
            <arglist>(std::partial_ordering stdorder)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::partial_ordering</type>
            <name>operator std::partial_ordering</name>
            <anchorfile>qt-partial-ordering.html</anchorfile>
            <anchor>operator-std-3a-3apartial_ordering</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt::strong_ordering</name>
        <filename>qt-strong-ordering.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_eq</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>is_eq</anchor>
            <arglist>(Qt::strong_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_gt</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>is_gt</anchor>
            <arglist>(Qt::strong_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_gteq</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>is_gteq</anchor>
            <arglist>(Qt::strong_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_lt</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>is_lt</anchor>
            <arglist>(Qt::strong_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_lteq</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>is_lteq</anchor>
            <arglist>(Qt::strong_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_neq</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>is_neq</anchor>
            <arglist>(Qt::strong_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(Qt::strong_ordering lhs, Qt::strong_ordering rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(Qt::strong_ordering lhs, Qt::strong_ordering rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>strong_ordering</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>strong_ordering</anchor>
            <arglist>(std::strong_ordering stdorder)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::partial_ordering</type>
            <name>operator Qt::partial_ordering</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>operator-Qt-3a-3apartial_ordering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::weak_ordering</type>
            <name>operator Qt::weak_ordering</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>operator-Qt-3a-3aweak_ordering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::strong_ordering</type>
            <name>operator std::strong_ordering</name>
            <anchorfile>qt-strong-ordering.html</anchorfile>
            <anchor>operator-std-3a-3astrong_ordering</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>Qt::totally_ordered_wrapper</name>
        <filename>qt-totally-ordered-wrapper.html</filename>
    </compound>
    <compound kind="class">
        <name>Qt::weak_ordering</name>
        <filename>qt-weak-ordering.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_eq</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>is_eq</anchor>
            <arglist>(Qt::weak_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_gt</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>is_gt</anchor>
            <arglist>(Qt::weak_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_gteq</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>is_gteq</anchor>
            <arglist>(Qt::weak_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_lt</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>is_lt</anchor>
            <arglist>(Qt::weak_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_lteq</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>is_lteq</anchor>
            <arglist>(Qt::weak_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>is_neq</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>is_neq</anchor>
            <arglist>(Qt::weak_ordering o)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator!=</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>operator-not-eq</anchor>
            <arglist>(Qt::weak_ordering lhs, Qt::weak_ordering rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>operator==</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>operator-eq-eq</anchor>
            <arglist>(Qt::weak_ordering lhs, Qt::weak_ordering rhs)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>weak_ordering</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>weak_ordering</anchor>
            <arglist>(std::weak_ordering stdorder)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>Qt::partial_ordering</type>
            <name>operator Qt::partial_ordering</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>operator-Qt-3a-3apartial_ordering</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::weak_ordering</type>
            <name>operator std::weak_ordering</name>
            <anchorfile>qt-weak-ordering.html</anchorfile>
            <anchor>operator-std-3a-3aweak_ordering</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QtAndroidPrivate</name>
        <filename>qtandroidprivate.html</filename>
        <member kind="enumeration">
            <name>BindFlag</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>None</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AutoCreate</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>DebugUnbind</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>NotForeground</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AboveClient</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AllowOomManagement</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>WaivePriority</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Important</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>AdjustWithActivity</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>ExternalService</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QtAndroidPrivate::PermissionResult&gt;</type>
            <name>checkPermission</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>checkPermission</anchor>
            <arglist>(const QString &amp;permission)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QtAndroidPrivate::PermissionResult&gt;</type>
            <name>requestPermission</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>requestPermission</anchor>
            <arglist>(const QString &amp;permission)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>bindService</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>bindService</anchor>
            <arglist>(const QAndroidIntent &amp;serviceIntent, const QAndroidServiceConnection &amp;serviceConnection, QtAndroidPrivate::BindFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startActivity</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>startActivity</anchor>
            <arglist>(const QAndroidIntent &amp;intent, int receiverRequestCode, QAndroidActivityResultReceiver *resultReceiver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startActivity</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>startActivity-1</anchor>
            <arglist>(const QJniObject &amp;intent, int receiverRequestCode, QAndroidActivityResultReceiver *resultReceiver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startActivity</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>startActivity-2</anchor>
            <arglist>(const QJniObject &amp;intent, int receiverRequestCode, std::function&lt;void (int, int, const QJniObject &amp;)&gt; callbackFunc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>startIntentSender</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>startIntentSender</anchor>
            <arglist>(const QJniObject &amp;intentSender, int receiverRequestCode, QAndroidActivityResultReceiver *resultReceiver)</arglist>
        </member>
        <member kind="typedef" type="QtAndroidPrivate::BindFlag">
            <name>BindFlags</name>
            <anchorfile>qtandroidprivate.html</anchorfile>
            <anchor>BindFlag-enum</anchor>
            <arglist></arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QtFuture</name>
        <filename>qtfuture.html</filename>
        <class>QtFuture::WhenAnyResult</class>
        <member kind="enumeration">
            <name>Launch</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>Launch-enum</anchor>
        </member>
        <member kind="enumvalue">
            <name>Sync</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>Launch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Async</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>Launch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enumvalue">
            <name>Inherit</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>Launch-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;OutputSequence&gt;</type>
            <name>whenAll</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>whenAll</anchor>
            <arglist>(Futures &amp;&amp;... futures)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;OutputSequence&gt;</type>
            <name>whenAll</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>whenAll-1</anchor>
            <arglist>(InputIt first, InputIt last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QtFuture::ArgsType&lt;Signal&gt;&gt;</type>
            <name>connect</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>connect</anchor>
            <arglist>(Sender *sender, Signal signal)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QtFuture::ContainedType&lt;Container&gt;&gt;</type>
            <name>makeReadyRangeFuture</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>makeReadyRangeFuture</anchor>
            <arglist>(Container &amp;&amp;container)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;QtFuture::WhenAnyResult&lt;T&gt;&gt;</type>
            <name>whenAny</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>whenAny-1</anchor>
            <arglist>(InputIt first, InputIt last)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>makeExceptionalFuture</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>makeExceptionalFuture</anchor>
            <arglist>(const QException &amp;exception)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>makeExceptionalFuture</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>makeExceptionalFuture-1</anchor>
            <arglist>(std::__exception_ptr::exception_ptr exception)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;T&gt;</type>
            <name>makeReadyFuture</name>
            <anchorfile>qtfuture-obsolete.html</anchorfile>
            <anchor>makeReadyFuture-2</anchor>
            <arglist>(const QList&lt;T&gt; &amp;values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;ValueType&gt;</type>
            <name>makeReadyRangeFuture</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>makeReadyRangeFuture-1</anchor>
            <arglist>(std::initializer_list&lt;ValueType&gt; values)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;std::decay_t&lt;T&gt;&gt;</type>
            <name>makeReadyFuture</name>
            <anchorfile>qtfuture-obsolete.html</anchorfile>
            <anchor>makeReadyFuture-1</anchor>
            <arglist>(T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;std::decay_t&lt;T&gt;&gt;</type>
            <name>makeReadyValueFuture</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>makeReadyValueFuture</anchor>
            <arglist>(T &amp;&amp;value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;std::variant&lt;std::decay_t&lt;Futures&gt;...&gt;&gt;</type>
            <name>whenAny</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>whenAny</anchor>
            <arglist>(Futures &amp;&amp;... futures)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;void&gt;</type>
            <name>makeReadyFuture</name>
            <anchorfile>qtfuture-obsolete.html</anchorfile>
            <anchor>makeReadyFuture</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QFuture&lt;void&gt;</type>
            <name>makeReadyVoidFuture</name>
            <anchorfile>qtfuture.html</anchorfile>
            <anchor>makeReadyVoidFuture</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QtFuture::WhenAnyResult</name>
        <filename>qtfuture-whenanyresult.html</filename>
    </compound>
    <compound kind="namespace">
        <name>QtJniTypes</name>
        <filename>qtjnitypes.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_JNI_CLASS</name>
            <anchorfile>qtjnitypes.html</anchorfile>
            <anchor>Q_DECLARE_JNI_CLASS</anchor>
            <arglist>(Type, JavaSignature)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_JNI_NATIVE_METHOD</name>
            <anchorfile>qtjnitypes.html</anchorfile>
            <anchor>Q_DECLARE_JNI_NATIVE_METHOD</anchor>
            <arglist>(Method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_JNI_NATIVE_METHOD</name>
            <anchorfile>qtjnitypes.html</anchorfile>
            <anchor>Q_DECLARE_JNI_NATIVE_METHOD-1</anchor>
            <arglist>(Method, JavaName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE</name>
            <anchorfile>qtjnitypes.html</anchorfile>
            <anchor>Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE</anchor>
            <arglist>(Method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE</name>
            <anchorfile>qtjnitypes.html</anchorfile>
            <anchor>Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE-1</anchor>
            <arglist>(Method, JavaName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_JNI_NATIVE_METHOD</name>
            <anchorfile>qtjnitypes.html</anchorfile>
            <anchor>Q_JNI_NATIVE_METHOD</anchor>
            <arglist>(Method)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>Q_JNI_NATIVE_SCOPED_METHOD</name>
            <anchorfile>qtjnitypes.html</anchorfile>
            <anchor>Q_JNI_NATIVE_SCOPED_METHOD</anchor>
            <arglist>(Method, Scope)</arglist>
        </member>
    </compound>
    <compound kind="namespace">
        <name>QtLiterals</name>
        <filename>qtliterals.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>operator&quot;&quot;_qba</name>
            <anchorfile>qbytearray-obsolete.html</anchorfile>
            <anchor>operator-22-22_qba</anchor>
            <arglist>(const char *str, size_t size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>operator&quot;&quot;_qs</name>
            <anchorfile>qstring-obsolete.html</anchorfile>
            <anchor>operator-22-22_qs</anchor>
            <arglist>(const char16_t *str, size_t size)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>qfloat16</name>
        <filename>qfloat16.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&lt;&lt;</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>operator-lt-lt</anchor>
            <arglist>(QDataStream &amp;ds, qfloat16 f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QDataStream &amp;</type>
            <name>operator&gt;&gt;</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>operator-gt-gt</anchor>
            <arglist>(QDataStream &amp;ds, qfloat16 &amp;f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qFuzzyCompare</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qFuzzyCompare-2</anchor>
            <arglist>(qfloat16 p1, qfloat16 p2)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qIsFinite</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qIsFinite-3</anchor>
            <arglist>(qfloat16 f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qIsInf</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qIsInf-3</anchor>
            <arglist>(qfloat16 f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>qIsNaN</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qIsNaN-3</anchor>
            <arglist>(qfloat16 f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qFpClassify</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qFpClassify-2</anchor>
            <arglist>(qfloat16 val)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>qRound</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qRound-2</anchor>
            <arglist>(qfloat16 value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>qfloat16</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qfloat16</anchor>
            <arglist>(Qt::Initialization)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qint64</type>
            <name>qRound64</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qRound64-2</anchor>
            <arglist>(qfloat16 value)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>size_t</type>
            <name>qHash</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qHash</anchor>
            <arglist>(qfloat16 key, size_t seed)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qFloatFromFloat16</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qFloatFromFloat16</anchor>
            <arglist>(float *out, const qfloat16 *in, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>qFloatToFloat16</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>qFloatToFloat16</anchor>
            <arglist>(qfloat16 *out, const float *in, qsizetype len)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isNormal</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>isNormal</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>qfloat16</type>
            <name>copySign</name>
            <anchorfile>qfloat16.html</anchorfile>
            <anchor>copySign</anchor>
            <arglist>(qfloat16 sign) const const</arglist>
        </member>
    </compound>
</tagfile>
